
MainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a09c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d4  0800a2d4  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2d4  0800a2d4  0000b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2dc  0800a2dc  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2dc  0800a2dc  0000b2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a2e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  20000218  0800a4fc  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001328  0800a4fc  0000c328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017db8  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea3  00000000  00000000  00024000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00026ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea4  00000000  00000000  00028140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027141  00000000  00000000  00028fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b37  00000000  00000000  00050125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea58  00000000  00000000  00066c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001656b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  001656f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0016a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000218 	.word	0x20000218
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a25c 	.word	0x0800a25c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000021c 	.word	0x2000021c
 8000214:	0800a25c 	.word	0x0800a25c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_frsub>:
 8000aa4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	e002      	b.n	8000ab0 <__addsf3>
 8000aaa:	bf00      	nop

08000aac <__aeabi_fsub>:
 8000aac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ab0 <__addsf3>:
 8000ab0:	0042      	lsls	r2, r0, #1
 8000ab2:	bf1f      	itttt	ne
 8000ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab8:	ea92 0f03 	teqne	r2, r3
 8000abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac4:	d06a      	beq.n	8000b9c <__addsf3+0xec>
 8000ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ace:	bfc1      	itttt	gt
 8000ad0:	18d2      	addgt	r2, r2, r3
 8000ad2:	4041      	eorgt	r1, r0
 8000ad4:	4048      	eorgt	r0, r1
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	bfb8      	it	lt
 8000ada:	425b      	neglt	r3, r3
 8000adc:	2b19      	cmp	r3, #25
 8000ade:	bf88      	it	hi
 8000ae0:	4770      	bxhi	lr
 8000ae2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000af6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000afa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4249      	negne	r1, r1
 8000b02:	ea92 0f03 	teq	r2, r3
 8000b06:	d03f      	beq.n	8000b88 <__addsf3+0xd8>
 8000b08:	f1a2 0201 	sub.w	r2, r2, #1
 8000b0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b10:	eb10 000c 	adds.w	r0, r0, ip
 8000b14:	f1c3 0320 	rsb	r3, r3, #32
 8000b18:	fa01 f103 	lsl.w	r1, r1, r3
 8000b1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__addsf3+0x78>
 8000b22:	4249      	negs	r1, r1
 8000b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b2c:	d313      	bcc.n	8000b56 <__addsf3+0xa6>
 8000b2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b32:	d306      	bcc.n	8000b42 <__addsf3+0x92>
 8000b34:	0840      	lsrs	r0, r0, #1
 8000b36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3a:	f102 0201 	add.w	r2, r2, #1
 8000b3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b40:	d251      	bcs.n	8000be6 <__addsf3+0x136>
 8000b42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	ea40 0003 	orr.w	r0, r0, r3
 8000b54:	4770      	bx	lr
 8000b56:	0049      	lsls	r1, r1, #1
 8000b58:	eb40 0000 	adc.w	r0, r0, r0
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b64:	d2ed      	bcs.n	8000b42 <__addsf3+0x92>
 8000b66:	fab0 fc80 	clz	ip, r0
 8000b6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b76:	bfaa      	itet	ge
 8000b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b7c:	4252      	neglt	r2, r2
 8000b7e:	4318      	orrge	r0, r3
 8000b80:	bfbc      	itt	lt
 8000b82:	40d0      	lsrlt	r0, r2
 8000b84:	4318      	orrlt	r0, r3
 8000b86:	4770      	bx	lr
 8000b88:	f092 0f00 	teq	r2, #0
 8000b8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b90:	bf06      	itte	eq
 8000b92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b96:	3201      	addeq	r2, #1
 8000b98:	3b01      	subne	r3, #1
 8000b9a:	e7b5      	b.n	8000b08 <__addsf3+0x58>
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d021      	beq.n	8000bf0 <__addsf3+0x140>
 8000bac:	ea92 0f03 	teq	r2, r3
 8000bb0:	d004      	beq.n	8000bbc <__addsf3+0x10c>
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	4608      	moveq	r0, r1
 8000bba:	4770      	bx	lr
 8000bbc:	ea90 0f01 	teq	r0, r1
 8000bc0:	bf1c      	itt	ne
 8000bc2:	2000      	movne	r0, #0
 8000bc4:	4770      	bxne	lr
 8000bc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bca:	d104      	bne.n	8000bd6 <__addsf3+0x126>
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bda:	bf3c      	itt	cc
 8000bdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000be0:	4770      	bxcc	lr
 8000be2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	4770      	bx	lr
 8000bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf4:	bf16      	itet	ne
 8000bf6:	4608      	movne	r0, r1
 8000bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bfc:	4601      	movne	r1, r0
 8000bfe:	0242      	lsls	r2, r0, #9
 8000c00:	bf06      	itte	eq
 8000c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c06:	ea90 0f01 	teqeq	r0, r1
 8000c0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_ui2f>:
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e004      	b.n	8000c20 <__aeabi_i2f+0x8>
 8000c16:	bf00      	nop

08000c18 <__aeabi_i2f>:
 8000c18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	bf48      	it	mi
 8000c1e:	4240      	negmi	r0, r0
 8000c20:	ea5f 0c00 	movs.w	ip, r0
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0000 	mov.w	r0, #0
 8000c32:	e01c      	b.n	8000c6e <__aeabi_l2f+0x2a>

08000c34 <__aeabi_ul2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e00a      	b.n	8000c58 <__aeabi_l2f+0x14>
 8000c42:	bf00      	nop

08000c44 <__aeabi_l2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__aeabi_l2f+0x14>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	ea5f 0c01 	movs.w	ip, r1
 8000c5c:	bf02      	ittt	eq
 8000c5e:	4684      	moveq	ip, r0
 8000c60:	4601      	moveq	r1, r0
 8000c62:	2000      	moveq	r0, #0
 8000c64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c68:	bf08      	it	eq
 8000c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c72:	fabc f28c 	clz	r2, ip
 8000c76:	3a08      	subs	r2, #8
 8000c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c7c:	db10      	blt.n	8000ca0 <__aeabi_l2f+0x5c>
 8000c7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c82:	4463      	add	r3, ip
 8000c84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c90:	fa20 f202 	lsr.w	r2, r0, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	f020 0001 	biceq.w	r0, r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	f102 0220 	add.w	r2, r2, #32
 8000ca4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_uldivmod>:
 8000cc0:	b953      	cbnz	r3, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc2:	b94a      	cbnz	r2, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	2800      	cmpeq	r0, #0
 8000cca:	bf1c      	itt	ne
 8000ccc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd4:	f000 b96a 	b.w	8000fac <__aeabi_idiv0>
 8000cd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce0:	f000 f806 	bl	8000cf0 <__udivmoddi4>
 8000ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cec:	b004      	add	sp, #16
 8000cee:	4770      	bx	lr

08000cf0 <__udivmoddi4>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	9d08      	ldr	r5, [sp, #32]
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14e      	bne.n	8000d9a <__udivmoddi4+0xaa>
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	458c      	cmp	ip, r1
 8000d00:	4686      	mov	lr, r0
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	d962      	bls.n	8000dce <__udivmoddi4+0xde>
 8000d08:	b14a      	cbz	r2, 8000d1e <__udivmoddi4+0x2e>
 8000d0a:	f1c2 0320 	rsb	r3, r2, #32
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	fa20 f303 	lsr.w	r3, r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f f68c 	uxth.w	r6, ip
 8000d26:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2e:	fb07 1114 	mls	r1, r7, r4, r1
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb04 f106 	mul.w	r1, r4, r6
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d90a      	bls.n	8000d54 <__udivmoddi4+0x64>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d46:	f080 8112 	bcs.w	8000f6e <__udivmoddi4+0x27e>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 810f 	bls.w	8000f6e <__udivmoddi4+0x27e>
 8000d50:	3c02      	subs	r4, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1a59      	subs	r1, r3, r1
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5e:	fb07 1110 	mls	r1, r7, r0, r1
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f606 	mul.w	r6, r0, r6
 8000d6a:	429e      	cmp	r6, r3
 8000d6c:	d90a      	bls.n	8000d84 <__udivmoddi4+0x94>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d76:	f080 80fc 	bcs.w	8000f72 <__udivmoddi4+0x282>
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	f240 80f9 	bls.w	8000f72 <__udivmoddi4+0x282>
 8000d80:	4463      	add	r3, ip
 8000d82:	3802      	subs	r0, #2
 8000d84:	1b9b      	subs	r3, r3, r6
 8000d86:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	b11d      	cbz	r5, 8000d96 <__udivmoddi4+0xa6>
 8000d8e:	40d3      	lsrs	r3, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	e9c5 3200 	strd	r3, r2, [r5]
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d905      	bls.n	8000daa <__udivmoddi4+0xba>
 8000d9e:	b10d      	cbz	r5, 8000da4 <__udivmoddi4+0xb4>
 8000da0:	e9c5 0100 	strd	r0, r1, [r5]
 8000da4:	2100      	movs	r1, #0
 8000da6:	4608      	mov	r0, r1
 8000da8:	e7f5      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000daa:	fab3 f183 	clz	r1, r3
 8000dae:	2900      	cmp	r1, #0
 8000db0:	d146      	bne.n	8000e40 <__udivmoddi4+0x150>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xcc>
 8000db6:	4290      	cmp	r0, r2
 8000db8:	f0c0 80f0 	bcc.w	8000f9c <__udivmoddi4+0x2ac>
 8000dbc:	1a86      	subs	r6, r0, r2
 8000dbe:	eb64 0303 	sbc.w	r3, r4, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	d0e6      	beq.n	8000d96 <__udivmoddi4+0xa6>
 8000dc8:	e9c5 6300 	strd	r6, r3, [r5]
 8000dcc:	e7e3      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000dce:	2a00      	cmp	r2, #0
 8000dd0:	f040 8090 	bne.w	8000ef4 <__udivmoddi4+0x204>
 8000dd4:	eba1 040c 	sub.w	r4, r1, ip
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa1f f78c 	uxth.w	r7, ip
 8000de0:	2101      	movs	r1, #1
 8000de2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dea:	fb08 4416 	mls	r4, r8, r6, r4
 8000dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df2:	fb07 f006 	mul.w	r0, r7, r6
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x11c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x11a>
 8000e04:	4298      	cmp	r0, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2b4>
 8000e0a:	4626      	mov	r6, r4
 8000e0c:	1a1c      	subs	r4, r3, r0
 8000e0e:	fa1f f38e 	uxth.w	r3, lr
 8000e12:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e16:	fb08 4410 	mls	r4, r8, r0, r4
 8000e1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1e:	fb00 f707 	mul.w	r7, r0, r7
 8000e22:	429f      	cmp	r7, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x148>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x146>
 8000e30:	429f      	cmp	r7, r3
 8000e32:	f200 80b0 	bhi.w	8000f96 <__udivmoddi4+0x2a6>
 8000e36:	4620      	mov	r0, r4
 8000e38:	1bdb      	subs	r3, r3, r7
 8000e3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3e:	e7a5      	b.n	8000d8c <__udivmoddi4+0x9c>
 8000e40:	f1c1 0620 	rsb	r6, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e50:	fa04 f301 	lsl.w	r3, r4, r1
 8000e54:	ea43 030c 	orr.w	r3, r3, ip
 8000e58:	40f4      	lsrs	r4, r6
 8000e5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5e:	0c38      	lsrs	r0, r7, #16
 8000e60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e64:	fbb4 fef0 	udiv	lr, r4, r0
 8000e68:	fa1f fc87 	uxth.w	ip, r7
 8000e6c:	fb00 441e 	mls	r4, r0, lr, r4
 8000e70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e74:	fb0e f90c 	mul.w	r9, lr, ip
 8000e78:	45a1      	cmp	r9, r4
 8000e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x1a6>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e86:	f080 8084 	bcs.w	8000f92 <__udivmoddi4+0x2a2>
 8000e8a:	45a1      	cmp	r9, r4
 8000e8c:	f240 8081 	bls.w	8000f92 <__udivmoddi4+0x2a2>
 8000e90:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	eba4 0409 	sub.w	r4, r4, r9
 8000e9a:	fa1f f983 	uxth.w	r9, r3
 8000e9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ea2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eaa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x1d2>
 8000eb2:	193c      	adds	r4, r7, r4
 8000eb4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb8:	d267      	bcs.n	8000f8a <__udivmoddi4+0x29a>
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d965      	bls.n	8000f8a <__udivmoddi4+0x29a>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec6:	fba0 9302 	umull	r9, r3, r0, r2
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	429c      	cmp	r4, r3
 8000ed0:	46ce      	mov	lr, r9
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	d351      	bcc.n	8000f7a <__udivmoddi4+0x28a>
 8000ed6:	d04e      	beq.n	8000f76 <__udivmoddi4+0x286>
 8000ed8:	b155      	cbz	r5, 8000ef0 <__udivmoddi4+0x200>
 8000eda:	ebb8 030e 	subs.w	r3, r8, lr
 8000ede:	eb64 040c 	sbc.w	r4, r4, ip
 8000ee2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee6:	40cb      	lsrs	r3, r1
 8000ee8:	431e      	orrs	r6, r3
 8000eea:	40cc      	lsrs	r4, r1
 8000eec:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	e750      	b.n	8000d96 <__udivmoddi4+0xa6>
 8000ef4:	f1c2 0320 	rsb	r3, r2, #32
 8000ef8:	fa20 f103 	lsr.w	r1, r0, r3
 8000efc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f00:	fa24 f303 	lsr.w	r3, r4, r3
 8000f04:	4094      	lsls	r4, r2
 8000f06:	430c      	orrs	r4, r1
 8000f08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f0c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f18:	fb08 3110 	mls	r1, r8, r0, r3
 8000f1c:	0c23      	lsrs	r3, r4, #16
 8000f1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f22:	fb00 f107 	mul.w	r1, r0, r7
 8000f26:	4299      	cmp	r1, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x24c>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f32:	d22c      	bcs.n	8000f8e <__udivmoddi4+0x29e>
 8000f34:	4299      	cmp	r1, r3
 8000f36:	d92a      	bls.n	8000f8e <__udivmoddi4+0x29e>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	1a5b      	subs	r3, r3, r1
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f44:	fb08 3311 	mls	r3, r8, r1, r3
 8000f48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f4c:	fb01 f307 	mul.w	r3, r1, r7
 8000f50:	42a3      	cmp	r3, r4
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x276>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f5c:	d213      	bcs.n	8000f86 <__udivmoddi4+0x296>
 8000f5e:	42a3      	cmp	r3, r4
 8000f60:	d911      	bls.n	8000f86 <__udivmoddi4+0x296>
 8000f62:	3902      	subs	r1, #2
 8000f64:	4464      	add	r4, ip
 8000f66:	1ae4      	subs	r4, r4, r3
 8000f68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f6c:	e739      	b.n	8000de2 <__udivmoddi4+0xf2>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	e6f0      	b.n	8000d54 <__udivmoddi4+0x64>
 8000f72:	4608      	mov	r0, r1
 8000f74:	e706      	b.n	8000d84 <__udivmoddi4+0x94>
 8000f76:	45c8      	cmp	r8, r9
 8000f78:	d2ae      	bcs.n	8000ed8 <__udivmoddi4+0x1e8>
 8000f7a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f82:	3801      	subs	r0, #1
 8000f84:	e7a8      	b.n	8000ed8 <__udivmoddi4+0x1e8>
 8000f86:	4631      	mov	r1, r6
 8000f88:	e7ed      	b.n	8000f66 <__udivmoddi4+0x276>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	e799      	b.n	8000ec2 <__udivmoddi4+0x1d2>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e7d4      	b.n	8000f3c <__udivmoddi4+0x24c>
 8000f92:	46d6      	mov	lr, sl
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1a6>
 8000f96:	4463      	add	r3, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e74d      	b.n	8000e38 <__udivmoddi4+0x148>
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e70f      	b.n	8000dc4 <__udivmoddi4+0xd4>
 8000fa4:	3e02      	subs	r6, #2
 8000fa6:	4463      	add	r3, ip
 8000fa8:	e730      	b.n	8000e0c <__udivmoddi4+0x11c>
 8000faa:	bf00      	nop

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <modbus_1t5_Timeout+0x3c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <modbus_1t5_Timeout+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <modbus_1t5_Timeout+0x3c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <modbus_1t5_Timeout+0x3c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000234 	.word	0x20000234

08000ff0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <modbus_3t5_Timeout+0x1c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	755a      	strb	r2, [r3, #21]

}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000234 	.word	0x20000234

08001010 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f007 ff87 	bl	8008f2c <HAL_UART_GetError>
 800101e:	4603      	mov	r3, r0
 8001020:	2b20      	cmp	r3, #32
 8001022:	d101      	bne.n	8001028 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001024:	f7ff ffc4 	bl	8000fb0 <modbus_1t5_Timeout>

	}
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800103a:	4a25      	ldr	r2, [pc, #148]	@ (80010d0 <Modbus_init+0xa0>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <Modbus_init+0xa0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <Modbus_init+0xa4>)
 800104e:	210e      	movs	r1, #14
 8001050:	4618      	mov	r0, r3
 8001052:	f005 ffb5 	bl	8006fc0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2110      	movs	r1, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f007 ff0f 	bl	8008e80 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f007 ff26 	bl	8008eb8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <Modbus_init+0xa8>)
 8001072:	2104      	movs	r1, #4
 8001074:	4618      	mov	r0, r3
 8001076:	f007 f9ed 	bl	8008454 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <Modbus_init+0xa0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <Modbus_init+0xa0>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <Modbus_init+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 800108c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001090:	4413      	add	r3, r2
 8001092:	3302      	adds	r3, #2
 8001094:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001098:	4619      	mov	r1, r3
 800109a:	f007 fb15 	bl	80086c8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <Modbus_init+0xa0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10c      	bne.n	80010c8 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <Modbus_init+0xa0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 fc6d 	bl	8005994 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <Modbus_init+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 f9b8 	bl	8006438 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000234 	.word	0x20000234
 80010d4:	08000ff1 	.word	0x08000ff1
 80010d8:	08001011 	.word	0x08001011

080010dc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80010e8:	23ff      	movs	r3, #255	@ 0xff
 80010ea:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80010ec:	23ff      	movs	r3, #255	@ 0xff
 80010ee:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80010f0:	e013      	b.n	800111a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	4053      	eors	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001102:	4a0f      	ldr	r2, [pc, #60]	@ (8001140 <CRC16+0x64>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4413      	add	r3, r2
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	4053      	eors	r3, r2
 800110e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001110:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <CRC16+0x68>)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800111a:	883b      	ldrh	r3, [r7, #0]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	803a      	strh	r2, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e6      	bne.n	80010f2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	b29b      	uxth	r3, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000100 	.word	0x20000100
 8001144:	20000000 	.word	0x20000000

08001148 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800114e:	4b7e      	ldr	r3, [pc, #504]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	7ddb      	ldrb	r3, [r3, #23]
 8001154:	3b01      	subs	r3, #1
 8001156:	2b03      	cmp	r3, #3
 8001158:	d80a      	bhi.n	8001170 <Modbus_Protocal_Worker+0x28>
 800115a:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <Modbus_Protocal_Worker+0x18>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	0800117b 	.word	0x0800117b
 8001164:	0800130f 	.word	0x0800130f
 8001168:	08001207 	.word	0x08001207
 800116c:	0800124b 	.word	0x0800124b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001170:	4b75      	ldr	r3, [pc, #468]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	75da      	strb	r2, [r3, #23]
		break;
 8001178:	e0e1      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800117a:	4b73      	ldr	r3, [pc, #460]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001186:	4b70      	ldr	r3, [pc, #448]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2202      	movs	r2, #2
 800118c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800118e:	f000 f9cd 	bl	800152c <Modbus_Emission>
 8001192:	e018      	b.n	80011c6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001194:	4b6c      	ldr	r3, [pc, #432]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800119e:	4b6a      	ldr	r3, [pc, #424]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d00b      	beq.n	80011c6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80011ae:	4b66      	ldr	r3, [pc, #408]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80011b6:	4b64      	ldr	r3, [pc, #400]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80011be:	4b62      	ldr	r3, [pc, #392]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2203      	movs	r2, #3
 80011c4:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80011c6:	4b60      	ldr	r3, [pc, #384]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	f040 80ad 	bne.w	8001330 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80011d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80011e0:	4b59      	ldr	r3, [pc, #356]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80011e6:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80011f2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80011f6:	4413      	add	r3, r2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011fe:	4619      	mov	r1, r3
 8001200:	f007 fa62 	bl	80086c8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001204:	e094      	b.n	8001330 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001206:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7d1b      	ldrb	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8091 	beq.w	8001334 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001212:	4b4d      	ldr	r3, [pc, #308]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22fe      	movs	r2, #254	@ 0xfe
 8001218:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800121a:	4b4b      	ldr	r3, [pc, #300]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001224:	4b48      	ldr	r3, [pc, #288]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001234:	4b44      	ldr	r3, [pc, #272]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001236:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001238:	1a8a      	subs	r2, r1, r2
 800123a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800123c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001240:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2204      	movs	r2, #4
 8001246:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001248:	e074      	b.n	8001334 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001252:	f113 0f02 	cmn.w	r3, #2
 8001256:	d150      	bne.n	80012fa <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001258:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001260:	4b39      	ldr	r3, [pc, #228]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001268:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001270:	3b02      	subs	r3, #2
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f7ff ff31 	bl	80010dc <CRC16>
 800127a:	4603      	mov	r3, r0
 800127c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800127e:	793a      	ldrb	r2, [r7, #4]
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800128c:	3b02      	subs	r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001294:	429a      	cmp	r2, r3
 8001296:	d10c      	bne.n	80012b2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001298:	797a      	ldrb	r2, [r7, #5]
 800129a:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012a6:	3b01      	subs	r3, #1
 80012a8:	440b      	add	r3, r1
 80012aa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d004      	beq.n	80012bc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	759a      	strb	r2, [r3, #22]
				break;
 80012ba:	e040      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d113      	bne.n	80012f6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80012de:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80012e8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80012ea:	461a      	mov	r2, r3
 80012ec:	f008 ffa8 	bl	800a240 <memcpy>

			//execute command
			Modbus_frame_response();
 80012f0:	f000 f904 	bl	80014fc <Modbus_frame_response>
 80012f4:	e001      	b.n	80012fa <Modbus_Protocal_Worker+0x1b2>
				break;
 80012f6:	bf00      	nop
					}
		break;


	}
}
 80012f8:	e021      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7d5b      	ldrb	r3, [r3, #21]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d019      	beq.n	8001338 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	75da      	strb	r2, [r3, #23]
		break;
 800130c:	e014      	b.n	8001338 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001318:	2b20      	cmp	r3, #32
 800131a:	d10f      	bne.n	800133c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Modbus_Protocal_Worker+0x200>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	75da      	strb	r2, [r3, #23]
		break;
 800132e:	e005      	b.n	800133c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <Modbus_Protocal_Worker+0x1f6>
		break;
 800133c:	bf00      	nop
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000234 	.word	0x20000234

0800134c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <modbusWrite1Register+0x7c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7e5b      	ldrb	r3, [r3, #25]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b29b      	uxth	r3, r3
 800135c:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <modbusWrite1Register+0x7c>)
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	7e92      	ldrb	r2, [r2, #26]
 8001362:	4413      	add	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <modbusWrite1Register+0x7c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d903      	bls.n	800137a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001372:	2002      	movs	r0, #2
 8001374:	f000 f8a0 	bl	80014b8 <ModbusErrorReply>
			 return;
 8001378:	e023      	b.n	80013c2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <modbusWrite1Register+0x7c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <modbusWrite1Register+0x7c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	440b      	add	r3, r1
 800138a:	7ed2      	ldrb	r2, [r2, #27]
 800138c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <modbusWrite1Register+0x7c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <modbusWrite1Register+0x7c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	440b      	add	r3, r1
 800139e:	7f12      	ldrb	r2, [r2, #28]
 80013a0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <modbusWrite1Register+0x7c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <modbusWrite1Register+0x7c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80013b0:	2208      	movs	r2, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	f008 ff44 	bl	800a240 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <modbusWrite1Register+0x7c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2205      	movs	r2, #5
 80013be:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000234 	.word	0x20000234

080013cc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80013d2:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <modbusRead1Register+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	7edb      	ldrb	r3, [r3, #27]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4a35      	ldr	r2, [pc, #212]	@ (80014b4 <modbusRead1Register+0xe8>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	7f12      	ldrb	r2, [r2, #28]
 80013e2:	4413      	add	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <modbusRead1Register+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7e5b      	ldrb	r3, [r3, #25]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4a30      	ldr	r2, [pc, #192]	@ (80014b4 <modbusRead1Register+0xe8>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	7e92      	ldrb	r2, [r2, #26]
 80013f6:	4413      	add	r3, r2
 80013f8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <modbusRead1Register+0x3a>
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b7d      	cmp	r3, #125	@ 0x7d
 8001404:	d903      	bls.n	800140e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001406:	2003      	movs	r0, #3
 8001408:	f000 f856 	bl	80014b8 <ModbusErrorReply>
		 return;
 800140c:	e04e      	b.n	80014ac <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800140e:	88ba      	ldrh	r2, [r7, #4]
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d808      	bhi.n	800142c <modbusRead1Register+0x60>
 800141a:	88ba      	ldrh	r2, [r7, #4]
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4413      	add	r3, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	429a      	cmp	r2, r3
 800142a:	d903      	bls.n	8001434 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800142c:	2002      	movs	r0, #2
 800142e:	f000 f843 	bl	80014b8 <ModbusErrorReply>
		 return;
 8001432:	e03b      	b.n	80014ac <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2203      	movs	r2, #3
 800143a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0052      	lsls	r2, r2, #1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800144e:	2400      	movs	r4, #0
 8001450:	e020      	b.n	8001494 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	4423      	add	r3, r4
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	18d1      	adds	r1, r2, r3
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	1c63      	adds	r3, r4, #1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	7849      	ldrb	r1, [r1, #1]
 800146a:	4413      	add	r3, r2
 800146c:	460a      	mov	r2, r1
 800146e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	88bb      	ldrh	r3, [r7, #4]
 800147a:	4423      	add	r3, r4
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	18d1      	adds	r1, r2, r3
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <modbusRead1Register+0xe8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	0063      	lsls	r3, r4, #1
 8001486:	3303      	adds	r3, #3
 8001488:	7809      	ldrb	r1, [r1, #0]
 800148a:	4413      	add	r3, r2
 800148c:	460a      	mov	r2, r1
 800148e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001492:	3401      	adds	r4, #1
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	429c      	cmp	r4, r3
 8001498:	dbdb      	blt.n	8001452 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	3301      	adds	r3, #1
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <modbusRead1Register+0xe8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0052      	lsls	r2, r2, #1
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000234 	.word	0x20000234

080014b8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <ModbusErrorReply+0x40>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	7e1a      	ldrb	r2, [r3, #24]
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <ModbusErrorReply+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <ModbusErrorReply+0x40>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <ModbusErrorReply+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2202      	movs	r2, #2
 80014e6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000234 	.word	0x20000234

080014fc <Modbus_frame_response>:

void Modbus_frame_response()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <Modbus_frame_response+0x2c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	7e1b      	ldrb	r3, [r3, #24]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d004      	beq.n	8001514 <Modbus_frame_response+0x18>
 800150a:	2b06      	cmp	r3, #6
 800150c:	d105      	bne.n	800151a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800150e:	f7ff ff1d 	bl	800134c <modbusWrite1Register>
		break;
 8001512:	e006      	b.n	8001522 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001514:	f7ff ff5a 	bl	80013cc <modbusRead1Register>
		break;
 8001518:	e003      	b.n	8001522 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ffcc 	bl	80014b8 <ModbusErrorReply>
		break;
 8001520:	bf00      	nop

	}
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000234 	.word	0x20000234

0800152c <Modbus_Emission>:

void Modbus_Emission()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <Modbus_Emission+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153c:	2b20      	cmp	r3, #32
 800153e:	d15d      	bne.n	80015fc <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <Modbus_Emission+0xe8>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <Modbus_Emission+0xe8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <Modbus_Emission+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001556:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001558:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <Modbus_Emission+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001560:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <Modbus_Emission+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001568:	461a      	mov	r2, r3
 800156a:	f008 fe69 	bl	800a240 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800156e:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <Modbus_Emission+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001576:	461a      	mov	r2, r3
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <Modbus_Emission+0xe8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3203      	adds	r2, #3
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001584:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <Modbus_Emission+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <Modbus_Emission+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001594:	3b02      	subs	r3, #2
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fd9f 	bl	80010dc <CRC16>
 800159e:	4603      	mov	r3, r0
 80015a0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <Modbus_Emission+0xe8>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <Modbus_Emission+0xe8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015ae:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80015b0:	7939      	ldrb	r1, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	460a      	mov	r2, r1
 80015b6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <Modbus_Emission+0xe8>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <Modbus_Emission+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015c6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80015c8:	7979      	ldrb	r1, [r7, #5]
 80015ca:	4413      	add	r3, r2
 80015cc:	460a      	mov	r2, r1
 80015ce:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <Modbus_Emission+0xe8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d10d      	bne.n	80015fc <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <Modbus_Emission+0xe8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <Modbus_Emission+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <Modbus_Emission+0xe8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80015f2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80015f6:	461a      	mov	r2, r3
 80015f8:	f006 ffe6 	bl	80085c8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <Modbus_Emission+0xe8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <Modbus_Emission+0xe8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	755a      	strb	r2, [r3, #21]

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000234 	.word	0x20000234

08001618 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
}
 8001620:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <__NVIC_SystemReset+0x24>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800162a:	4904      	ldr	r1, [pc, #16]	@ (800163c <__NVIC_SystemReset+0x24>)
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_SystemReset+0x28>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <__NVIC_SystemReset+0x20>
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	05fa0004 	.word	0x05fa0004
 8001644:	00000000 	.word	0x00000000

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f002 fa15 	bl	8003a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 fdfa 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f001 f9c4 	bl	80029e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800165c:	f001 f974 	bl	8002948 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001660:	f001 f8d8 	bl	8002814 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001664:	f001 f922 	bl	80028ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001668:	f000 fe3c 	bl	80022e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800166c:	f000 ff0e 	bl	800248c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001670:	f000 ff60 	bl	8002534 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001674:	f001 f822 	bl	80026bc <MX_TIM5_Init>
  MX_TIM16_Init();
 8001678:	f001 f8a6 	bl	80027c8 <MX_TIM16_Init>
  MX_TIM4_Init();
 800167c:	f000 ffd0 	bl	8002620 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001680:	f001 f86c 	bl	800275c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ///TRAJECTORY
  PID.Kp = 6.1;
 8001684:	4baa      	ldr	r3, [pc, #680]	@ (8001930 <main+0x2e8>)
 8001686:	4aab      	ldr	r2, [pc, #684]	@ (8001934 <main+0x2ec>)
 8001688:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.001;
 800168a:	4ba9      	ldr	r3, [pc, #676]	@ (8001930 <main+0x2e8>)
 800168c:	4aaa      	ldr	r2, [pc, #680]	@ (8001938 <main+0x2f0>)
 800168e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.01;
 8001690:	4ba7      	ldr	r3, [pc, #668]	@ (8001930 <main+0x2e8>)
 8001692:	4aaa      	ldr	r2, [pc, #680]	@ (800193c <main+0x2f4>)
 8001694:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 8001696:	2100      	movs	r1, #0
 8001698:	48a5      	ldr	r0, [pc, #660]	@ (8001930 <main+0x2e8>)
 800169a:	f008 fd6f 	bl	800a17c <arm_pid_init_f32>
  // @User: Setup UART 1 for communication with joy stick
  HAL_UART_Receive_DMA(&huart1, joystickPayload, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	49a7      	ldr	r1, [pc, #668]	@ (8001940 <main+0x2f8>)
 80016a2:	48a8      	ldr	r0, [pc, #672]	@ (8001944 <main+0x2fc>)
 80016a4:	f007 f810 	bl	80086c8 <HAL_UART_Receive_DMA>

  // @User: Setup UART 2 for communication with Base system
  HAL_TIM_Base_Start_IT(&htim5); //open Timer 5 (interrupt)
 80016a8:	48a7      	ldr	r0, [pc, #668]	@ (8001948 <main+0x300>)
 80016aa:	f004 f973 	bl	8005994 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80016ae:	4ba7      	ldr	r3, [pc, #668]	@ (800194c <main+0x304>)
 80016b0:	4aa7      	ldr	r2, [pc, #668]	@ (8001950 <main+0x308>)
 80016b2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80016b4:	4ba5      	ldr	r3, [pc, #660]	@ (800194c <main+0x304>)
 80016b6:	4aa7      	ldr	r2, [pc, #668]	@ (8001954 <main+0x30c>)
 80016b8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016ba:	4ba4      	ldr	r3, [pc, #656]	@ (800194c <main+0x304>)
 80016bc:	2215      	movs	r2, #21
 80016be:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80016c0:	4ba2      	ldr	r3, [pc, #648]	@ (800194c <main+0x304>)
 80016c2:	22c8      	movs	r2, #200	@ 0xc8
 80016c4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80016c6:	49a4      	ldr	r1, [pc, #656]	@ (8001958 <main+0x310>)
 80016c8:	48a0      	ldr	r0, [pc, #640]	@ (800194c <main+0x304>)
 80016ca:	f7ff fcb1 	bl	8001030 <Modbus_init>
  reed = 0;
 80016ce:	4ba3      	ldr	r3, [pc, #652]	@ (800195c <main+0x314>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]

  shelfPos[0] = 1;
 80016d4:	4ba2      	ldr	r3, [pc, #648]	@ (8001960 <main+0x318>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	801a      	strh	r2, [r3, #0]
  shelfPos[1] = 2;
 80016da:	4ba1      	ldr	r3, [pc, #644]	@ (8001960 <main+0x318>)
 80016dc:	2202      	movs	r2, #2
 80016de:	805a      	strh	r2, [r3, #2]
  shelfPos[2] = 3;
 80016e0:	4b9f      	ldr	r3, [pc, #636]	@ (8001960 <main+0x318>)
 80016e2:	2203      	movs	r2, #3
 80016e4:	809a      	strh	r2, [r3, #4]
  shelfPos[3] = 4;
 80016e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001960 <main+0x318>)
 80016e8:	2204      	movs	r2, #4
 80016ea:	80da      	strh	r2, [r3, #6]
  shelfPos[4] = 5;
 80016ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001960 <main+0x318>)
 80016ee:	2205      	movs	r2, #5
 80016f0:	811a      	strh	r2, [r3, #8]

  // @User: Setup Timer 1 for Motor drive
  HAL_TIM_Base_Start(&htim1);
 80016f2:	489c      	ldr	r0, [pc, #624]	@ (8001964 <main+0x31c>)
 80016f4:	f004 f8de 	bl	80058b4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016f8:	2100      	movs	r1, #0
 80016fa:	489a      	ldr	r0, [pc, #616]	@ (8001964 <main+0x31c>)
 80016fc:	f004 fa60 	bl	8005bc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001700:	2104      	movs	r1, #4
 8001702:	4898      	ldr	r0, [pc, #608]	@ (8001964 <main+0x31c>)
 8001704:	f004 fa5c 	bl	8005bc0 <HAL_TIM_PWM_Start>

  // @User: Setup Timer 2 as encoder interface
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001708:	213c      	movs	r1, #60	@ 0x3c
 800170a:	4897      	ldr	r0, [pc, #604]	@ (8001968 <main+0x320>)
 800170c:	f004 ffd6 	bl	80066bc <HAL_TIM_Encoder_Start>


  // @User: Setup Timer 3 for sending led data
  HAL_TIM_Base_Start(&htim3);
 8001710:	4896      	ldr	r0, [pc, #600]	@ (800196c <main+0x324>)
 8001712:	f004 f8cf 	bl	80058b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001716:	4896      	ldr	r0, [pc, #600]	@ (8001970 <main+0x328>)
 8001718:	f004 f93c 	bl	8005994 <HAL_TIM_Base_Start_IT>
//  else if (position_goal < 300)
//  {
//	  pos_err = position_goal;
//  }

  	pick[0] = 20;
 800171c:	4b95      	ldr	r3, [pc, #596]	@ (8001974 <main+0x32c>)
 800171e:	2214      	movs	r2, #20
 8001720:	801a      	strh	r2, [r3, #0]
  	pick[1] = 570;
 8001722:	4b94      	ldr	r3, [pc, #592]	@ (8001974 <main+0x32c>)
 8001724:	f240 223a 	movw	r2, #570	@ 0x23a
 8001728:	805a      	strh	r2, [r3, #2]
  	pick[2] = 435;
 800172a:	4b92      	ldr	r3, [pc, #584]	@ (8001974 <main+0x32c>)
 800172c:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8001730:	809a      	strh	r2, [r3, #4]
  	pick[3] = 317;
 8001732:	4b90      	ldr	r3, [pc, #576]	@ (8001974 <main+0x32c>)
 8001734:	f240 123d 	movw	r2, #317	@ 0x13d
 8001738:	80da      	strh	r2, [r3, #6]
  	pick[4] = 160;
 800173a:	4b8e      	ldr	r3, [pc, #568]	@ (8001974 <main+0x32c>)
 800173c:	22a0      	movs	r2, #160	@ 0xa0
 800173e:	811a      	strh	r2, [r3, #8]


  	place[0] = 570;
 8001740:	4b8d      	ldr	r3, [pc, #564]	@ (8001978 <main+0x330>)
 8001742:	f240 223a 	movw	r2, #570	@ 0x23a
 8001746:	801a      	strh	r2, [r3, #0]
  	place[1] = 435;
 8001748:	4b8b      	ldr	r3, [pc, #556]	@ (8001978 <main+0x330>)
 800174a:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800174e:	805a      	strh	r2, [r3, #2]
  	place[2] = 317;
 8001750:	4b89      	ldr	r3, [pc, #548]	@ (8001978 <main+0x330>)
 8001752:	f240 123d 	movw	r2, #317	@ 0x13d
 8001756:	809a      	strh	r2, [r3, #4]
  	place[3] = 160;
 8001758:	4b87      	ldr	r3, [pc, #540]	@ (8001978 <main+0x330>)
 800175a:	22a0      	movs	r2, #160	@ 0xa0
 800175c:	80da      	strh	r2, [r3, #6]
  	place[4] = 0;
 800175e:	4b86      	ldr	r3, [pc, #536]	@ (8001978 <main+0x330>)
 8001760:	2200      	movs	r2, #0
 8001762:	811a      	strh	r2, [r3, #8]


  	  	  buf[0] = 3;
 8001764:	4b85      	ldr	r3, [pc, #532]	@ (800197c <main+0x334>)
 8001766:	2203      	movs	r2, #3
 8001768:	701a      	strb	r2, [r3, #0]
  		  L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 800176a:	2204      	movs	r2, #4
 800176c:	497f      	ldr	r1, [pc, #508]	@ (800196c <main+0x324>)
 800176e:	4883      	ldr	r0, [pc, #524]	@ (800197c <main+0x334>)
 8001770:	f002 f876 	bl	8003860 <updateLED>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b81      	ldr	r3, [pc, #516]	@ (8001980 <main+0x338>)
 800177a:	701a      	strb	r2, [r3, #0]
  		  uint8_t result = HomeZ();
 800177c:	f002 f916 	bl	80039ac <HomeZ>
 8001780:	4603      	mov	r3, r0
 8001782:	717b      	strb	r3, [r7, #5]
  		  HAL_Delay(2000);
 8001784:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001788:	f002 f9ea 	bl	8003b60 <HAL_Delay>
  		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800178c:	4b76      	ldr	r3, [pc, #472]	@ (8001968 <main+0x320>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
  		  generate_trapezoidal_velocity_profile(time_op,16.0);
 8001794:	4b7b      	ldr	r3, [pc, #492]	@ (8001984 <main+0x33c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 8001928 <main+0x2e0>
 80017a6:	ec43 2b10 	vmov	d0, r2, r3
 80017aa:	f001 f9db 	bl	8002b64 <generate_trapezoidal_velocity_profile>
  		  Home = 0;
 80017ae:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <main+0x340>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
  		  rou = 0;
 80017b4:	4b75      	ldr	r3, [pc, #468]	@ (800198c <main+0x344>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]
    /* USER CODE BEGIN 3 */

//	  uint8_t result = HomeZ();

	  static uint64_t timestamps =0;
	  if (rou >= 2 && end == 0)
 80017ba:	4b74      	ldr	r3, [pc, #464]	@ (800198c <main+0x344>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d90b      	bls.n	80017da <main+0x192>
 80017c2:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <main+0x348>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <main+0x192>
	  {
		  currentTime = micros();
 80017ca:	f001 fc8d 	bl	80030e8 <micros>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4970      	ldr	r1, [pc, #448]	@ (8001994 <main+0x34c>)
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
 80017d8:	e015      	b.n	8001806 <main+0x1be>
	  }
	  else if (end == 1)
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <main+0x348>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d111      	bne.n	8001806 <main+0x1be>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 80017e2:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <main+0x328>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
		  currentTime = 0;
 80017ea:	496a      	ldr	r1, [pc, #424]	@ (8001994 <main+0x34c>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
		  _micros = 0;
 80017f8:	4967      	ldr	r1, [pc, #412]	@ (8001998 <main+0x350>)
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
//		  end = 0;
	  }
	  if(currentTime > timestamps && fin == 1)
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <main+0x34c>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	4963      	ldr	r1, [pc, #396]	@ (800199c <main+0x354>)
 800180e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001812:	4290      	cmp	r0, r2
 8001814:	eb71 0303 	sbcs.w	r3, r1, r3
 8001818:	d213      	bcs.n	8001842 <main+0x1fa>
 800181a:	4b61      	ldr	r3, [pc, #388]	@ (80019a0 <main+0x358>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10f      	bne.n	8001842 <main+0x1fa>
	  {
	  timestamps =currentTime + 250000000;//us
 8001822:	4b5c      	ldr	r3, [pc, #368]	@ (8001994 <main+0x34c>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	495e      	ldr	r1, [pc, #376]	@ (80019a4 <main+0x35c>)
 800182a:	1854      	adds	r4, r2, r1
 800182c:	f143 0500 	adc.w	r5, r3, #0
 8001830:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <main+0x354>)
 8001832:	e9c3 4500 	strd	r4, r5, [r3]
	  Mode = 1;
 8001836:	4b5c      	ldr	r3, [pc, #368]	@ (80019a8 <main+0x360>)
 8001838:	2201      	movs	r2, #1
 800183a:	801a      	strh	r2, [r3, #0]
	  fin = 0;
 800183c:	4b58      	ldr	r3, [pc, #352]	@ (80019a0 <main+0x358>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
//	  err_g =  (position_goal * err);
//
//	  pos_err = (position_goal - err_g)+14;
//
//
	  if (Mode == 1 && rou == 20)
 8001842:	4b59      	ldr	r3, [pc, #356]	@ (80019a8 <main+0x360>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d121      	bne.n	800188e <main+0x246>
 800184a:	4b50      	ldr	r3, [pc, #320]	@ (800198c <main+0x344>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b14      	cmp	r3, #20
 8001850:	d11d      	bne.n	800188e <main+0x246>
	 	  {
	 		  generate_trapezoidal_velocity_profile(time_op, pick[0]+16.0);
 8001852:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <main+0x33c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe42 	bl	80004e0 <__aeabi_f2d>
 800185c:	4680      	mov	r8, r0
 800185e:	4689      	mov	r9, r1
 8001860:	4b44      	ldr	r3, [pc, #272]	@ (8001974 <main+0x32c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe29 	bl	80004bc <__aeabi_i2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <main+0x364>)
 8001870:	f7fe fcd8 	bl	8000224 <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	ec43 2b17 	vmov	d7, r2, r3
 800187c:	eeb0 1a47 	vmov.f32	s2, s14
 8001880:	eef0 1a67 	vmov.f32	s3, s15
 8001884:	ec49 8b10 	vmov	d0, r8, r9
 8001888:	f001 f96c 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 800188c:	e19c      	b.n	8001bc8 <main+0x580>

	 	  }

	  else if (Mode == 1 && rou == 21)
 800188e:	4b46      	ldr	r3, [pc, #280]	@ (80019a8 <main+0x360>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d121      	bne.n	80018da <main+0x292>
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <main+0x344>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	2b15      	cmp	r3, #21
 800189c:	d11d      	bne.n	80018da <main+0x292>
	  	 	  {
	  	 		  generate_trapezoidal_velocity_profile(time_op, place[0]+16.0);
 800189e:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <main+0x33c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe1c 	bl	80004e0 <__aeabi_f2d>
 80018a8:	4680      	mov	r8, r0
 80018aa:	4689      	mov	r9, r1
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <main+0x330>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe03 	bl	80004bc <__aeabi_i2d>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <main+0x364>)
 80018bc:	f7fe fcb2 	bl	8000224 <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	ec43 2b17 	vmov	d7, r2, r3
 80018c8:	eeb0 1a47 	vmov.f32	s2, s14
 80018cc:	eef0 1a67 	vmov.f32	s3, s15
 80018d0:	ec49 8b10 	vmov	d0, r8, r9
 80018d4:	f001 f946 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 80018d8:	e176      	b.n	8001bc8 <main+0x580>

	  	 	  }
	  else if (Mode == 1 && rou == 22)
 80018da:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <main+0x360>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d166      	bne.n	80019b0 <main+0x368>
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <main+0x344>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	2b16      	cmp	r3, #22
 80018e8:	d162      	bne.n	80019b0 <main+0x368>
	  	  	 	  {
	  	  	 		  generate_trapezoidal_velocity_profile(time_op, pick[1]+16.0);
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <main+0x33c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fdf6 	bl	80004e0 <__aeabi_f2d>
 80018f4:	4680      	mov	r8, r0
 80018f6:	4689      	mov	r9, r1
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <main+0x32c>)
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fddd 	bl	80004bc <__aeabi_i2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <main+0x364>)
 8001908:	f7fe fc8c 	bl	8000224 <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	ec43 2b17 	vmov	d7, r2, r3
 8001914:	eeb0 1a47 	vmov.f32	s2, s14
 8001918:	eef0 1a67 	vmov.f32	s3, s15
 800191c:	ec49 8b10 	vmov	d0, r8, r9
 8001920:	f001 f920 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001924:	e150      	b.n	8001bc8 <main+0x580>
 8001926:	bf00      	nop
 8001928:	00000000 	.word	0x00000000
 800192c:	40300000 	.word	0x40300000
 8001930:	200011c8 	.word	0x200011c8
 8001934:	40c33333 	.word	0x40c33333
 8001938:	3a83126f 	.word	0x3a83126f
 800193c:	3c23d70a 	.word	0x3c23d70a
 8001940:	20000ae4 	.word	0x20000ae4
 8001944:	2000082c 	.word	0x2000082c
 8001948:	20000568 	.word	0x20000568
 800194c:	20000af4 	.word	0x20000af4
 8001950:	200008f8 	.word	0x200008f8
 8001954:	20000700 	.word	0x20000700
 8001958:	20000fd4 	.word	0x20000fd4
 800195c:	20000fd0 	.word	0x20000fd0
 8001960:	20001164 	.word	0x20001164
 8001964:	20000238 	.word	0x20000238
 8001968:	20000304 	.word	0x20000304
 800196c:	200003d0 	.word	0x200003d0
 8001970:	20000634 	.word	0x20000634
 8001974:	20001178 	.word	0x20001178
 8001978:	20001184 	.word	0x20001184
 800197c:	20000208 	.word	0x20000208
 8001980:	200011f6 	.word	0x200011f6
 8001984:	20000200 	.word	0x20000200
 8001988:	200011be 	.word	0x200011be
 800198c:	200011f4 	.word	0x200011f4
 8001990:	20001200 	.word	0x20001200
 8001994:	200011f8 	.word	0x200011f8
 8001998:	20001208 	.word	0x20001208
 800199c:	20001210 	.word	0x20001210
 80019a0:	200011f7 	.word	0x200011f7
 80019a4:	0ee6b280 	.word	0x0ee6b280
 80019a8:	200011bc 	.word	0x200011bc
 80019ac:	40300000 	.word	0x40300000

	  	  	 	  }
	  else if (Mode == 1 && rou == 23)
 80019b0:	4baf      	ldr	r3, [pc, #700]	@ (8001c70 <main+0x628>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d121      	bne.n	80019fc <main+0x3b4>
 80019b8:	4bae      	ldr	r3, [pc, #696]	@ (8001c74 <main+0x62c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b17      	cmp	r3, #23
 80019be:	d11d      	bne.n	80019fc <main+0x3b4>
	  	  	  	 	  {
	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, place[1]+16.0);
 80019c0:	4bad      	ldr	r3, [pc, #692]	@ (8001c78 <main+0x630>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd8b 	bl	80004e0 <__aeabi_f2d>
 80019ca:	4680      	mov	r8, r0
 80019cc:	4689      	mov	r9, r1
 80019ce:	4bab      	ldr	r3, [pc, #684]	@ (8001c7c <main+0x634>)
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd72 	bl	80004bc <__aeabi_i2d>
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001c80 <main+0x638>)
 80019de:	f7fe fc21 	bl	8000224 <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	ec43 2b17 	vmov	d7, r2, r3
 80019ea:	eeb0 1a47 	vmov.f32	s2, s14
 80019ee:	eef0 1a67 	vmov.f32	s3, s15
 80019f2:	ec49 8b10 	vmov	d0, r8, r9
 80019f6:	f001 f8b5 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 80019fa:	e0e5      	b.n	8001bc8 <main+0x580>

	  	  	  	 	  }
	  else if (Mode == 1 && rou == 24)
 80019fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001c70 <main+0x628>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d121      	bne.n	8001a48 <main+0x400>
 8001a04:	4b9b      	ldr	r3, [pc, #620]	@ (8001c74 <main+0x62c>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	2b18      	cmp	r3, #24
 8001a0a:	d11d      	bne.n	8001a48 <main+0x400>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, pick[2]+16.0);
 8001a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8001c78 <main+0x630>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd65 	bl	80004e0 <__aeabi_f2d>
 8001a16:	4680      	mov	r8, r0
 8001a18:	4689      	mov	r9, r1
 8001a1a:	4b9a      	ldr	r3, [pc, #616]	@ (8001c84 <main+0x63c>)
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd4c 	bl	80004bc <__aeabi_i2d>
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b95      	ldr	r3, [pc, #596]	@ (8001c80 <main+0x638>)
 8001a2a:	f7fe fbfb 	bl	8000224 <__adddf3>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ec43 2b17 	vmov	d7, r2, r3
 8001a36:	eeb0 1a47 	vmov.f32	s2, s14
 8001a3a:	eef0 1a67 	vmov.f32	s3, s15
 8001a3e:	ec49 8b10 	vmov	d0, r8, r9
 8001a42:	f001 f88f 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001a46:	e0bf      	b.n	8001bc8 <main+0x580>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 25)
 8001a48:	4b89      	ldr	r3, [pc, #548]	@ (8001c70 <main+0x628>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d121      	bne.n	8001a94 <main+0x44c>
 8001a50:	4b88      	ldr	r3, [pc, #544]	@ (8001c74 <main+0x62c>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	2b19      	cmp	r3, #25
 8001a56:	d11d      	bne.n	8001a94 <main+0x44c>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, place[2]+16.0);
 8001a58:	4b87      	ldr	r3, [pc, #540]	@ (8001c78 <main+0x630>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd3f 	bl	80004e0 <__aeabi_f2d>
 8001a62:	4680      	mov	r8, r0
 8001a64:	4689      	mov	r9, r1
 8001a66:	4b85      	ldr	r3, [pc, #532]	@ (8001c7c <main+0x634>)
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd26 	bl	80004bc <__aeabi_i2d>
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b82      	ldr	r3, [pc, #520]	@ (8001c80 <main+0x638>)
 8001a76:	f7fe fbd5 	bl	8000224 <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ec43 2b17 	vmov	d7, r2, r3
 8001a82:	eeb0 1a47 	vmov.f32	s2, s14
 8001a86:	eef0 1a67 	vmov.f32	s3, s15
 8001a8a:	ec49 8b10 	vmov	d0, r8, r9
 8001a8e:	f001 f869 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001a92:	e099      	b.n	8001bc8 <main+0x580>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 26)
 8001a94:	4b76      	ldr	r3, [pc, #472]	@ (8001c70 <main+0x628>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d121      	bne.n	8001ae0 <main+0x498>
 8001a9c:	4b75      	ldr	r3, [pc, #468]	@ (8001c74 <main+0x62c>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2b1a      	cmp	r3, #26
 8001aa2:	d11d      	bne.n	8001ae0 <main+0x498>
	  	  	  	  	 	  {
	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, pick[3]+16.0);
 8001aa4:	4b74      	ldr	r3, [pc, #464]	@ (8001c78 <main+0x630>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd19 	bl	80004e0 <__aeabi_f2d>
 8001aae:	4680      	mov	r8, r0
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <main+0x63c>)
 8001ab4:	88db      	ldrh	r3, [r3, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd00 	bl	80004bc <__aeabi_i2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <main+0x638>)
 8001ac2:	f7fe fbaf 	bl	8000224 <__adddf3>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ec43 2b17 	vmov	d7, r2, r3
 8001ace:	eeb0 1a47 	vmov.f32	s2, s14
 8001ad2:	eef0 1a67 	vmov.f32	s3, s15
 8001ad6:	ec49 8b10 	vmov	d0, r8, r9
 8001ada:	f001 f843 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001ade:	e073      	b.n	8001bc8 <main+0x580>

	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 27)
 8001ae0:	4b63      	ldr	r3, [pc, #396]	@ (8001c70 <main+0x628>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d121      	bne.n	8001b2c <main+0x4e4>
 8001ae8:	4b62      	ldr	r3, [pc, #392]	@ (8001c74 <main+0x62c>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b1b      	cmp	r3, #27
 8001aee:	d11d      	bne.n	8001b2c <main+0x4e4>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, place[3]+16.0);
 8001af0:	4b61      	ldr	r3, [pc, #388]	@ (8001c78 <main+0x630>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fcf3 	bl	80004e0 <__aeabi_f2d>
 8001afa:	4680      	mov	r8, r0
 8001afc:	4689      	mov	r9, r1
 8001afe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c7c <main+0x634>)
 8001b00:	88db      	ldrh	r3, [r3, #6]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fcda 	bl	80004bc <__aeabi_i2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <main+0x638>)
 8001b0e:	f7fe fb89 	bl	8000224 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ec43 2b17 	vmov	d7, r2, r3
 8001b1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b1e:	eef0 1a67 	vmov.f32	s3, s15
 8001b22:	ec49 8b10 	vmov	d0, r8, r9
 8001b26:	f001 f81d 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001b2a:	e04d      	b.n	8001bc8 <main+0x580>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 28)
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <main+0x628>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d121      	bne.n	8001b78 <main+0x530>
 8001b34:	4b4f      	ldr	r3, [pc, #316]	@ (8001c74 <main+0x62c>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	2b1c      	cmp	r3, #28
 8001b3a:	d11d      	bne.n	8001b78 <main+0x530>
	  	  	  	  	  	 	  {
	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, pick[4]+16.0);
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c78 <main+0x630>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fccd 	bl	80004e0 <__aeabi_f2d>
 8001b46:	4680      	mov	r8, r0
 8001b48:	4689      	mov	r9, r1
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c84 <main+0x63c>)
 8001b4c:	891b      	ldrh	r3, [r3, #8]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fcb4 	bl	80004bc <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b49      	ldr	r3, [pc, #292]	@ (8001c80 <main+0x638>)
 8001b5a:	f7fe fb63 	bl	8000224 <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ec43 2b17 	vmov	d7, r2, r3
 8001b66:	eeb0 1a47 	vmov.f32	s2, s14
 8001b6a:	eef0 1a67 	vmov.f32	s3, s15
 8001b6e:	ec49 8b10 	vmov	d0, r8, r9
 8001b72:	f000 fff7 	bl	8002b64 <generate_trapezoidal_velocity_profile>
 8001b76:	e027      	b.n	8001bc8 <main+0x580>

	  	  	  	  	  	 	  }
	  else if (Mode == 1 && rou == 29)
 8001b78:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <main+0x628>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d123      	bne.n	8001bc8 <main+0x580>
 8001b80:	4b3c      	ldr	r3, [pc, #240]	@ (8001c74 <main+0x62c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b1d      	cmp	r3, #29
 8001b86:	d11f      	bne.n	8001bc8 <main+0x580>
	  	  	  	  	  	  	 	  {
	  	  	  	  	  	  	 		  generate_trapezoidal_velocity_profile(time_op, place[4]+16.0);
 8001b88:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <main+0x630>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fca7 	bl	80004e0 <__aeabi_f2d>
 8001b92:	4680      	mov	r8, r0
 8001b94:	4689      	mov	r9, r1
 8001b96:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <main+0x634>)
 8001b98:	891b      	ldrh	r3, [r3, #8]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fc8e 	bl	80004bc <__aeabi_i2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <main+0x638>)
 8001ba6:	f7fe fb3d 	bl	8000224 <__adddf3>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ec43 2b17 	vmov	d7, r2, r3
 8001bb2:	eeb0 1a47 	vmov.f32	s2, s14
 8001bb6:	eef0 1a67 	vmov.f32	s3, s15
 8001bba:	ec49 8b10 	vmov	d0, r8, r9
 8001bbe:	f000 ffd1 	bl	8002b64 <generate_trapezoidal_velocity_profile>
	  	  	  	  	  	  	 		  end = 1;
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <main+0x640>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  	  	 	  }




	  if ( joystickPayload[0] == 0x80 )
 8001bc8:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <main+0x644>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d101      	bne.n	8001bd4 <main+0x58c>
	  {
		  NVIC_SystemReset();
 8001bd0:	f7ff fd22 	bl	8001618 <__NVIC_SystemReset>
//		    		  generate_trapezoidal_velocity_profile(time_op,16.0);
//		    		  Home = 0;
//		    		  rou = 0;
	  }

	  else if ( joystickPayload[0] == 0x40)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <main+0x644>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b40      	cmp	r3, #64	@ 0x40
 8001bda:	d120      	bne.n	8001c1e <main+0x5d6>
		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 0.1));
 8001bdc:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <main+0x630>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc7d 	bl	80004e0 <__aeabi_f2d>
 8001be6:	4680      	mov	r8, r0
 8001be8:	4689      	mov	r9, r1
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <main+0x648>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc76 	bl	80004e0 <__aeabi_f2d>
 8001bf4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001c68 <main+0x620>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fb13 	bl	8000224 <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	ec43 2b17 	vmov	d7, r2, r3
 8001c06:	eeb0 1a47 	vmov.f32	s2, s14
 8001c0a:	eef0 1a67 	vmov.f32	s3, s15
 8001c0e:	ec49 8b10 	vmov	d0, r8, r9
 8001c12:	f000 ffa7 	bl	8002b64 <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <main+0x644>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e100      	b.n	8001e20 <main+0x7d8>
		}
	  else if ( joystickPayload[0] == 0x41)
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <main+0x644>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b41      	cmp	r3, #65	@ 0x41
 8001c24:	d138      	bne.n	8001c98 <main+0x650>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 1.0));
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <main+0x630>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc58 	bl	80004e0 <__aeabi_f2d>
 8001c30:	4680      	mov	r8, r0
 8001c32:	4689      	mov	r9, r1
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <main+0x648>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc51 	bl	80004e0 <__aeabi_f2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <main+0x64c>)
 8001c44:	f7fe faee 	bl	8000224 <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b17 	vmov	d7, r2, r3
 8001c50:	eeb0 1a47 	vmov.f32	s2, s14
 8001c54:	eef0 1a67 	vmov.f32	s3, s15
 8001c58:	ec49 8b10 	vmov	d0, r8, r9
 8001c5c:	f000 ff82 	bl	8002b64 <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <main+0x644>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e0db      	b.n	8001e20 <main+0x7d8>
 8001c68:	9999999a 	.word	0x9999999a
 8001c6c:	3fb99999 	.word	0x3fb99999
 8001c70:	200011bc 	.word	0x200011bc
 8001c74:	200011f4 	.word	0x200011f4
 8001c78:	20000200 	.word	0x20000200
 8001c7c:	20001184 	.word	0x20001184
 8001c80:	40300000 	.word	0x40300000
 8001c84:	20001178 	.word	0x20001178
 8001c88:	20001200 	.word	0x20001200
 8001c8c:	20000ae4 	.word	0x20000ae4
 8001c90:	200011b8 	.word	0x200011b8
 8001c94:	3ff00000 	.word	0x3ff00000
	  		}
	  else if ( joystickPayload[0] == 0x42)
 8001c98:	4b49      	ldr	r3, [pc, #292]	@ (8001dc0 <main+0x778>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b42      	cmp	r3, #66	@ 0x42
 8001c9e:	d120      	bne.n	8001ce2 <main+0x69a>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 10.0));
 8001ca0:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <main+0x77c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc1b 	bl	80004e0 <__aeabi_f2d>
 8001caa:	4680      	mov	r8, r0
 8001cac:	4689      	mov	r9, r1
 8001cae:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <main+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc14 	bl	80004e0 <__aeabi_f2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <main+0x784>)
 8001cbe:	f7fe fab1 	bl	8000224 <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ec43 2b17 	vmov	d7, r2, r3
 8001cca:	eeb0 1a47 	vmov.f32	s2, s14
 8001cce:	eef0 1a67 	vmov.f32	s3, s15
 8001cd2:	ec49 8b10 	vmov	d0, r8, r9
 8001cd6:	f000 ff45 	bl	8002b64 <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001cda:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <main+0x778>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e09e      	b.n	8001e20 <main+0x7d8>
	  		}
	  else if ( joystickPayload[0] == 0x43)
 8001ce2:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <main+0x778>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b43      	cmp	r3, #67	@ 0x43
 8001ce8:	d120      	bne.n	8001d2c <main+0x6e4>
	  		{
		  generate_trapezoidal_velocity_profile(time_op, (position + 100.0));
 8001cea:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <main+0x77c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbf6 	bl	80004e0 <__aeabi_f2d>
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	4689      	mov	r9, r1
 8001cf8:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <main+0x780>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fbef 	bl	80004e0 <__aeabi_f2d>
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <main+0x788>)
 8001d08:	f7fe fa8c 	bl	8000224 <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b17 	vmov	d7, r2, r3
 8001d14:	eeb0 1a47 	vmov.f32	s2, s14
 8001d18:	eef0 1a67 	vmov.f32	s3, s15
 8001d1c:	ec49 8b10 	vmov	d0, r8, r9
 8001d20:	f000 ff20 	bl	8002b64 <generate_trapezoidal_velocity_profile>
		  joystickPayload[0] = 0 ;
 8001d24:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <main+0x778>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e079      	b.n	8001e20 <main+0x7d8>
//	  else if ( joystickPayload[0] == 0x00)
//	  		{
//		  generate_trapezoidal_velocity_profile(time_op, (position - 0.1));
//		  joystickPayload[0] = 0 ;
//	  		}
	  	  else if ( joystickPayload[0] == 0x01)
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <main+0x778>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d120      	bne.n	8001d76 <main+0x72e>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 1.0));
 8001d34:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <main+0x77c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fbd1 	bl	80004e0 <__aeabi_f2d>
 8001d3e:	4680      	mov	r8, r0
 8001d40:	4689      	mov	r9, r1
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <main+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbca 	bl	80004e0 <__aeabi_f2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <main+0x78c>)
 8001d52:	f7fe fa65 	bl	8000220 <__aeabi_dsub>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ec43 2b17 	vmov	d7, r2, r3
 8001d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8001d62:	eef0 1a67 	vmov.f32	s3, s15
 8001d66:	ec49 8b10 	vmov	d0, r8, r9
 8001d6a:	f000 fefb 	bl	8002b64 <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <main+0x778>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e054      	b.n	8001e20 <main+0x7d8>
	  	  		}
	  	  else if ( joystickPayload[0] == 0x02)
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <main+0x778>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d12c      	bne.n	8001dd8 <main+0x790>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 10.0));
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <main+0x77c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbac 	bl	80004e0 <__aeabi_f2d>
 8001d88:	4680      	mov	r8, r0
 8001d8a:	4689      	mov	r9, r1
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <main+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fba5 	bl	80004e0 <__aeabi_f2d>
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <main+0x784>)
 8001d9c:	f7fe fa40 	bl	8000220 <__aeabi_dsub>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b17 	vmov	d7, r2, r3
 8001da8:	eeb0 1a47 	vmov.f32	s2, s14
 8001dac:	eef0 1a67 	vmov.f32	s3, s15
 8001db0:	ec49 8b10 	vmov	d0, r8, r9
 8001db4:	f000 fed6 	bl	8002b64 <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001db8:	4b01      	ldr	r3, [pc, #4]	@ (8001dc0 <main+0x778>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e02f      	b.n	8001e20 <main+0x7d8>
 8001dc0:	20000ae4 	.word	0x20000ae4
 8001dc4:	20000200 	.word	0x20000200
 8001dc8:	200011b8 	.word	0x200011b8
 8001dcc:	40240000 	.word	0x40240000
 8001dd0:	40590000 	.word	0x40590000
 8001dd4:	3ff00000 	.word	0x3ff00000
	  	  		}
	  	  else if ( joystickPayload[0] == 0x03)
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd8 <main+0x990>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d11f      	bne.n	8001e20 <main+0x7d8>
	  	  		{
	  		generate_trapezoidal_velocity_profile(time_op, (position - 100.0));
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <main+0x994>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb7b 	bl	80004e0 <__aeabi_f2d>
 8001dea:	4680      	mov	r8, r0
 8001dec:	4689      	mov	r9, r1
 8001dee:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe0 <main+0x998>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb74 	bl	80004e0 <__aeabi_f2d>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b79      	ldr	r3, [pc, #484]	@ (8001fe4 <main+0x99c>)
 8001dfe:	f7fe fa0f 	bl	8000220 <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	ec43 2b17 	vmov	d7, r2, r3
 8001e0a:	eeb0 1a47 	vmov.f32	s2, s14
 8001e0e:	eef0 1a67 	vmov.f32	s3, s15
 8001e12:	ec49 8b10 	vmov	d0, r8, r9
 8001e16:	f000 fea5 	bl	8002b64 <generate_trapezoidal_velocity_profile>
	  		joystickPayload[0] = 0 ;
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd8 <main+0x990>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]




	  // TODO: Test encoder QEI, remove later
	  qeiRaw  = __HAL_TIM_GET_COUNTER(&htim2);
 8001e20:	4b71      	ldr	r3, [pc, #452]	@ (8001fe8 <main+0x9a0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	4a71      	ldr	r2, [pc, #452]	@ (8001fec <main+0x9a4>)
 8001e28:	6013      	str	r3, [r2, #0]
	  qeifloat = (__HAL_TIM_GET_COUNTER(&htim2))*(59.19/8192);
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <main+0x9a0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb33 	bl	800049c <__aeabi_ui2d>
 8001e36:	a366      	add	r3, pc, #408	@ (adr r3, 8001fd0 <main+0x988>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fba8 	bl	8000590 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fddc 	bl	8000a04 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a68      	ldr	r2, [pc, #416]	@ (8001ff0 <main+0x9a8>)
 8001e50:	6013      	str	r3, [r2, #0]

	  Modbus_Protocal_Worker();
 8001e52:	f7ff f979 	bl	8001148 <Modbus_Protocal_Worker>
	  vacuum = registerFrame[0x02].U16;
 8001e56:	4b67      	ldr	r3, [pc, #412]	@ (8001ff4 <main+0x9ac>)
 8001e58:	889b      	ldrh	r3, [r3, #4]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <main+0x9b0>)
 8001e5e:	701a      	strb	r2, [r3, #0]
	  gripper = registerFrame[0x03].U16;
 8001e60:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <main+0x9ac>)
 8001e62:	88db      	ldrh	r3, [r3, #6]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b65      	ldr	r3, [pc, #404]	@ (8001ffc <main+0x9b4>)
 8001e68:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x04].U16 = reed;
 8001e6a:	4b65      	ldr	r3, [pc, #404]	@ (8002000 <main+0x9b8>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <main+0x9ac>)
 8001e72:	811a      	strh	r2, [r3, #8]

	  ///*MODBUS PART
	  if(registerFrame[0x00].U16 != 22881){
 8001e74:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <main+0x9ac>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d009      	beq.n	8001e94 <main+0x84c>
		  registerFrame[0x00].U16 = 22881;
 8001e80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <main+0x9ac>)
 8001e82:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001e86:	801a      	strh	r2, [r3, #0]
		  deb++;
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <main+0x9bc>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b5c      	ldr	r3, [pc, #368]	@ (8002004 <main+0x9bc>)
 8001e92:	701a      	strb	r2, [r3, #0]
	  }


 	  static uint16_t timestamp = 0;
 	  //Set shelves
 	  if(registerFrame[0x01].U16 == 1)
 8001e94:	4b57      	ldr	r3, [pc, #348]	@ (8001ff4 <main+0x9ac>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d127      	bne.n	8001eec <main+0x8a4>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8001e9c:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <main+0x9ac>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 1;
 8001ea2:	4b54      	ldr	r3, [pc, #336]	@ (8001ff4 <main+0x9ac>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	841a      	strh	r2, [r3, #32]
 		  registerFrame[0x23].U16 = shelfPos[0];
 8001ea8:	4b57      	ldr	r3, [pc, #348]	@ (8002008 <main+0x9c0>)
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	4b51      	ldr	r3, [pc, #324]	@ (8001ff4 <main+0x9ac>)
 8001eae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 		  registerFrame[0x24].U16 = shelfPos[1];
 8001eb2:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <main+0x9c0>)
 8001eb4:	885a      	ldrh	r2, [r3, #2]
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <main+0x9ac>)
 8001eb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 		  registerFrame[0x25].U16 = shelfPos[2];
 8001ebc:	4b52      	ldr	r3, [pc, #328]	@ (8002008 <main+0x9c0>)
 8001ebe:	889a      	ldrh	r2, [r3, #4]
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff4 <main+0x9ac>)
 8001ec2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 		  registerFrame[0x26].U16 = shelfPos[3];
 8001ec6:	4b50      	ldr	r3, [pc, #320]	@ (8002008 <main+0x9c0>)
 8001ec8:	88da      	ldrh	r2, [r3, #6]
 8001eca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <main+0x9ac>)
 8001ecc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 		  registerFrame[0x27].U16 = shelfPos[4];
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8002008 <main+0x9c0>)
 8001ed2:	891a      	ldrh	r2, [r3, #8]
 8001ed4:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <main+0x9ac>)
 8001ed6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 		  //delay 2000ms
 		  timestamp = HAL_GetTick()+2000;
 8001eda:	f001 fe35 	bl	8003b48 <HAL_GetTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b48      	ldr	r3, [pc, #288]	@ (800200c <main+0x9c4>)
 8001eea:	801a      	strh	r2, [r3, #0]
 	  }
 	  if(HAL_GetTick() >= timestamp && (registerFrame[0x10].U16 == 1))
 8001eec:	f001 fe2c 	bl	8003b48 <HAL_GetTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a46      	ldr	r2, [pc, #280]	@ (800200c <main+0x9c4>)
 8001ef4:	8812      	ldrh	r2, [r2, #0]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d306      	bcc.n	8001f08 <main+0x8c0>
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <main+0x9ac>)
 8001efc:	8c1b      	ldrh	r3, [r3, #32]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <main+0x8c0>
 	  {
 		  registerFrame[0x10].U16 = 0;
 8001f02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <main+0x9ac>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	841a      	strh	r2, [r3, #32]
 	  }
 	  //Monkey_Home
 	  if(registerFrame[0x01].U16 == 2)
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <main+0x9ac>)
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d109      	bne.n	8001f24 <main+0x8dc>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8001f10:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <main+0x9ac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 2;
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <main+0x9ac>)
 8001f18:	2202      	movs	r2, #2
 8001f1a:	841a      	strh	r2, [r3, #32]
 		  setPos =  shelfPos[0];
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <main+0x9c0>)
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <main+0x9c8>)
 8001f22:	801a      	strh	r2, [r3, #0]
 	  }
 	  //point mode
 	  if(registerFrame[0x01].U16 == 8)
 8001f24:	4b33      	ldr	r3, [pc, #204]	@ (8001ff4 <main+0x9ac>)
 8001f26:	885b      	ldrh	r3, [r3, #2]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d10a      	bne.n	8001f42 <main+0x8fa>
 	  {
 		  registerFrame[0x01].U16 = 0;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <main+0x9ac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	805a      	strh	r2, [r3, #2]
 		  registerFrame[0x10].U16 = 16;
 8001f32:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <main+0x9ac>)
 8001f34:	2210      	movs	r2, #16
 8001f36:	841a      	strh	r2, [r3, #32]
 		  setPos =  registerFrame[0x30].U16;
 8001f38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <main+0x9ac>)
 8001f3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8001f3e:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <main+0x9c8>)
 8001f40:	801a      	strh	r2, [r3, #0]
 	  }
 	  //reset
 	  if(piingpong == 1 && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16) )//check piingpong status
 8001f42:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <main+0x9cc>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10a      	bne.n	8001f60 <main+0x918>
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <main+0x9ac>)
 8001f4c:	8c1b      	ldrh	r3, [r3, #32]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <main+0x912>
 8001f52:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <main+0x9ac>)
 8001f54:	8c1b      	ldrh	r3, [r3, #32]
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d102      	bne.n	8001f60 <main+0x918>
 	  {
 		  registerFrame[0x10].U16 = 0;
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <main+0x9ac>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	841a      	strh	r2, [r3, #32]
 	  }
 	  //jog mode
 	  if((registerFrame[0x01].U16 == 4))
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <main+0x9ac>)
 8001f62:	885b      	ldrh	r3, [r3, #2]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	f040 809d 	bne.w	80020a4 <main+0xa5c>
 	  {
 		  registerFrame[0x01].U16 = 0; //reset status
 8001f6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <main+0x9ac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	805a      	strh	r2, [r3, #2]

 	      temPick = (registerFrame[0x21].U16);
 8001f70:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <main+0x9ac>)
 8001f72:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001f76:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <main+0x9d0>)
 8001f78:	801a      	strh	r2, [r3, #0]
 	      temPlace = (registerFrame[0x22].U16);
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <main+0x9ac>)
 8001f7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001f80:	4b26      	ldr	r3, [pc, #152]	@ (800201c <main+0x9d4>)
 8001f82:	801a      	strh	r2, [r3, #0]
 	      rnd = 0;
 8001f84:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <main+0x9d8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 	      ////// Convert to string
 	      for(uint16_t i = 10000;i>=1;i/=10)
 8001f8a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f8e:	80fb      	strh	r3, [r7, #6]
 8001f90:	e082      	b.n	8002098 <main+0xa50>
 	      {
 	    	  if(temPick/i == 0 || temPick/i > 5 || temPlace/i == 0 || temPlace/i > 5) // check if 0 or > 5
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <main+0x9d0>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d814      	bhi.n	8001fc6 <main+0x97e>
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <main+0x9d0>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d80c      	bhi.n	8001fc6 <main+0x97e>
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <main+0x9d4>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d807      	bhi.n	8001fc6 <main+0x97e>
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <main+0x9d4>)
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d92e      	bls.n	8002024 <main+0x9dc>
 	    	  {
 	    		  rnd = 0;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <main+0x9d8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 	    		  break;
 8001fcc:	e121      	b.n	8002212 <main+0xbca>
 8001fce:	bf00      	nop
 8001fd0:	eb851eb8 	.word	0xeb851eb8
 8001fd4:	3f7d9851 	.word	0x3f7d9851
 8001fd8:	20000ae4 	.word	0x20000ae4
 8001fdc:	20000200 	.word	0x20000200
 8001fe0:	200011b8 	.word	0x200011b8
 8001fe4:	40590000 	.word	0x40590000
 8001fe8:	20000304 	.word	0x20000304
 8001fec:	20000ae8 	.word	0x20000ae8
 8001ff0:	20000aec 	.word	0x20000aec
 8001ff4:	20000fd4 	.word	0x20000fd4
 8001ff8:	20000fce 	.word	0x20000fce
 8001ffc:	20000fcf 	.word	0x20000fcf
 8002000:	20000fd0 	.word	0x20000fd0
 8002004:	20001170 	.word	0x20001170
 8002008:	20001164 	.word	0x20001164
 800200c:	20001218 	.word	0x20001218
 8002010:	2000116e 	.word	0x2000116e
 8002014:	20000fcc 	.word	0x20000fcc
 8002018:	20001172 	.word	0x20001172
 800201c:	20001174 	.word	0x20001174
 8002020:	2000118e 	.word	0x2000118e
 	    	  }
 	    	  pick[rnd] = temPick/i; // use this for pick
 8002024:	4b7c      	ldr	r3, [pc, #496]	@ (8002218 <main+0xbd0>)
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <main+0xbd4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b7a      	ldr	r3, [pc, #488]	@ (8002220 <main+0xbd8>)
 8002038:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  place[rnd] = temPlace/i; // use this for place
 800203c:	4b79      	ldr	r3, [pc, #484]	@ (8002224 <main+0xbdc>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	4b76      	ldr	r3, [pc, #472]	@ (800221c <main+0xbd4>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <main+0xbe0>)
 8002050:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 	    	  temPick = temPick%i;
 8002054:	4b70      	ldr	r3, [pc, #448]	@ (8002218 <main+0xbd0>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	88fa      	ldrh	r2, [r7, #6]
 800205a:	fbb3 f1f2 	udiv	r1, r3, r2
 800205e:	fb01 f202 	mul.w	r2, r1, r2
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <main+0xbd0>)
 8002068:	801a      	strh	r2, [r3, #0]
 	    	  temPlace = temPlace%i;
 800206a:	4b6e      	ldr	r3, [pc, #440]	@ (8002224 <main+0xbdc>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	fbb3 f1f2 	udiv	r1, r3, r2
 8002074:	fb01 f202 	mul.w	r2, r1, r2
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b69      	ldr	r3, [pc, #420]	@ (8002224 <main+0xbdc>)
 800207e:	801a      	strh	r2, [r3, #0]
 	    	  rnd++;
 8002080:	4b66      	ldr	r3, [pc, #408]	@ (800221c <main+0xbd4>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b64      	ldr	r3, [pc, #400]	@ (800221c <main+0xbd4>)
 800208a:	701a      	strb	r2, [r3, #0]
 	      for(uint16_t i = 10000;i>=1;i/=10)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4a67      	ldr	r2, [pc, #412]	@ (800222c <main+0xbe4>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	80fb      	strh	r3, [r7, #6]
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f47f af79 	bne.w	8001f92 <main+0x94a>
 80020a0:	f7ff bb8b 	b.w	80017ba <main+0x172>
 	      }
 	  }
 	  else if(rnd > 0) //  run Jog
 80020a4:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <main+0xbd4>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 809e 	beq.w	80021ea <main+0xba2>
 	  {
 	  		if(registerFrame[0x10].U16 == 0 && rnd == 5 && gripper == 0 && reed == 1 && vacuum == 0) // first rev
 80020ae:	4b60      	ldr	r3, [pc, #384]	@ (8002230 <main+0xbe8>)
 80020b0:	8c1b      	ldrh	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11f      	bne.n	80020f6 <main+0xaae>
 80020b6:	4b59      	ldr	r3, [pc, #356]	@ (800221c <main+0xbd4>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d11b      	bne.n	80020f6 <main+0xaae>
 80020be:	4b5d      	ldr	r3, [pc, #372]	@ (8002234 <main+0xbec>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d117      	bne.n	80020f6 <main+0xaae>
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <main+0xbf0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d113      	bne.n	80020f6 <main+0xaae>
 80020ce:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <main+0xbf4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <main+0xaae>
 	  		{
 	  			(registerFrame[0x10].U16) = 4; // Z-go pick
 80020d6:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <main+0xbe8>)
 80020d8:	2204      	movs	r2, #4
 80020da:	841a      	strh	r2, [r3, #32]
 	  			setPos = shelfPos[pick[5-rnd]-1];
 80020dc:	4b4f      	ldr	r3, [pc, #316]	@ (800221c <main+0xbd4>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f1c3 0305 	rsb	r3, r3, #5
 80020e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002220 <main+0xbd8>)
 80020e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	4a54      	ldr	r2, [pc, #336]	@ (8002240 <main+0xbf8>)
 80020ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020f2:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <main+0xbfc>)
 80020f4:	801a      	strh	r2, [r3, #0]
 	  		}
 	  		if((piingpong && registerFrame[0x10].U16 == 8)) // prev mode: place, do pick
 80020f6:	4b54      	ldr	r3, [pc, #336]	@ (8002248 <main+0xc00>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <main+0xb30>
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <main+0xbe8>)
 8002100:	8c1b      	ldrh	r3, [r3, #32]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d138      	bne.n	8002178 <main+0xb30>
 	  		{
 	  			///////place down

 	  			if(reed != 2){
 8002106:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <main+0xbf0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <main+0xace>
 	  				registerFrame[0x03].U16 = 1; // gripper forward
 800210e:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <main+0xbe8>)
 8002110:	2201      	movs	r2, #1
 8002112:	80da      	strh	r2, [r3, #6]
 8002114:	e005      	b.n	8002122 <main+0xada>
 	  			}
 	  			else //reached
 	  			{
 	  				registerFrame[0x02].U16 = 0; //vacuum off
 8002116:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <main+0xbe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	809a      	strh	r2, [r3, #4]
 	  					//Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 800211c:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <main+0xbe8>)
 800211e:	2200      	movs	r2, #0
 8002120:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish place -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8002122:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <main+0xbec>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d172      	bne.n	8002210 <main+0xbc8>
 800212a:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <main+0xbf0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d16e      	bne.n	8002210 <main+0xbc8>
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <main+0xbf4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d16a      	bne.n	8002210 <main+0xbc8>
 	  			{
 	  				rnd--;
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <main+0xbd4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	3b01      	subs	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b36      	ldr	r3, [pc, #216]	@ (800221c <main+0xbd4>)
 8002144:	701a      	strb	r2, [r3, #0]
 	  				if(rnd>0)
 8002146:	4b35      	ldr	r3, [pc, #212]	@ (800221c <main+0xbd4>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d010      	beq.n	8002170 <main+0xb28>
 	  				{
 	  					(registerFrame[0x10].U16) = 4; // Z-go pick
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <main+0xbe8>)
 8002150:	2204      	movs	r2, #4
 8002152:	841a      	strh	r2, [r3, #32]
 	  					setPos = shelfPos[pick[5-rnd]-1];
 8002154:	4b31      	ldr	r3, [pc, #196]	@ (800221c <main+0xbd4>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f1c3 0305 	rsb	r3, r3, #5
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <main+0xbd8>)
 800215e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a36      	ldr	r2, [pc, #216]	@ (8002240 <main+0xbf8>)
 8002166:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800216a:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <main+0xbfc>)
 800216c:	801a      	strh	r2, [r3, #0]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 800216e:	e04f      	b.n	8002210 <main+0xbc8>
 	  				}
 	  				else
 	  				{
 	  					(registerFrame[0x10].U16 = 0); // End Jogs
 8002170:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <main+0xbe8>)
 8002172:	2200      	movs	r2, #0
 8002174:	841a      	strh	r2, [r3, #32]
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8002176:	e04b      	b.n	8002210 <main+0xbc8>
 	  				}
 	  			}
 	  			//MoveTosetPos();
 	  		}
 	  		else if(piingpong && registerFrame[0x10].U16 == 4)// prev mode: pick, do place
 8002178:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <main+0xc00>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f43f ab1c 	beq.w	80017ba <main+0x172>
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <main+0xbe8>)
 8002184:	8c1b      	ldrh	r3, [r3, #32]
 8002186:	2b04      	cmp	r3, #4
 8002188:	f47f ab17 	bne.w	80017ba <main+0x172>
 	  		{
 	  			//////pick up
 	  			if(reed != 2)
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <main+0xbf0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d003      	beq.n	800219c <main+0xb54>
 	  			{
 	  				registerFrame[0x03].U16 = 1; //gripper forward
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <main+0xbe8>)
 8002196:	2201      	movs	r2, #1
 8002198:	80da      	strh	r2, [r3, #6]
 800219a:	e005      	b.n	80021a8 <main+0xb60>
 	  			}
 	  			else
 	  			{
 	  				registerFrame[0x02].U16 = 1; //vacuum on
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <main+0xbe8>)
 800219e:	2201      	movs	r2, #1
 80021a0:	809a      	strh	r2, [r3, #4]
 	  				// Delay a few sec
 	  				registerFrame[0x03].U16 = 0; //gripper backward
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <main+0xbe8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	80da      	strh	r2, [r3, #6]
 	  			}
 	  			///////finish pick -> move on
 	  			if(gripper == 0 && reed == 1 && vacuum == 1)
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <main+0xbec>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f ab04 	bne.w	80017ba <main+0x172>
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <main+0xbf0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	f47f aaff 	bne.w	80017ba <main+0x172>
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <main+0xbf4>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f47f aafa 	bne.w	80017ba <main+0x172>
 	  			{
 	  				(registerFrame[0x10].U16) = 8; // Z-go place
 80021c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <main+0xbe8>)
 80021c8:	2208      	movs	r2, #8
 80021ca:	841a      	strh	r2, [r3, #32]
 	  				setPos = shelfPos[place[5-rnd]-1];
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <main+0xbd4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f1c3 0305 	rsb	r3, r3, #5
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <main+0xbe0>)
 80021d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021da:	3b01      	subs	r3, #1
 80021dc:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <main+0xbf8>)
 80021de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <main+0xbfc>)
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	f7ff bae8 	b.w	80017ba <main+0x172>
 	  			}
 	  		}

 	  	}

 	  	else if(piingpong && (registerFrame[0x10].U16 == 2 || registerFrame[0x10].U16 == 16))
 80021ea:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <main+0xc00>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f43f aae3 	beq.w	80017ba <main+0x172>
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <main+0xbe8>)
 80021f6:	8c1b      	ldrh	r3, [r3, #32]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d004      	beq.n	8002206 <main+0xbbe>
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <main+0xbe8>)
 80021fe:	8c1b      	ldrh	r3, [r3, #32]
 8002200:	2b10      	cmp	r3, #16
 8002202:	f47f aada 	bne.w	80017ba <main+0x172>
 	  	{
 	  		//finish point & home mode
 	  		registerFrame[0x10].U16 = 0;
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <main+0xbe8>)
 8002208:	2200      	movs	r2, #0
 800220a:	841a      	strh	r2, [r3, #32]
 800220c:	f7ff bad5 	b.w	80017ba <main+0x172>
 	  			if(gripper == 0 && reed == 1 && vacuum == 0)
 8002210:	bf00      	nop
  {
 8002212:	f7ff bad2 	b.w	80017ba <main+0x172>
 8002216:	bf00      	nop
 8002218:	20001172 	.word	0x20001172
 800221c:	2000118e 	.word	0x2000118e
 8002220:	20001178 	.word	0x20001178
 8002224:	20001174 	.word	0x20001174
 8002228:	20001184 	.word	0x20001184
 800222c:	cccccccd 	.word	0xcccccccd
 8002230:	20000fd4 	.word	0x20000fd4
 8002234:	20000fcf 	.word	0x20000fcf
 8002238:	20000fd0 	.word	0x20000fd0
 800223c:	20000fce 	.word	0x20000fce
 8002240:	20001164 	.word	0x20001164
 8002244:	2000116e 	.word	0x2000116e
 8002248:	20000fcc 	.word	0x20000fcc

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b094      	sub	sp, #80	@ 0x50
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	2238      	movs	r2, #56	@ 0x38
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f007 ffc4 	bl	800a1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800226e:	2000      	movs	r0, #0
 8002270:	f002 fa8c 	bl	800478c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002282:	2302      	movs	r3, #2
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002286:	2302      	movs	r3, #2
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800228a:	2304      	movs	r3, #4
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800228e:	2355      	movs	r3, #85	@ 0x55
 8002290:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002292:	2302      	movs	r3, #2
 8002294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002296:	2302      	movs	r3, #2
 8002298:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fb26 	bl	80048f4 <HAL_RCC_OscConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022ae:	f000 ff35 	bl	800311c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	230f      	movs	r3, #15
 80022b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b6:	2303      	movs	r3, #3
 80022b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2104      	movs	r1, #4
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fe24 	bl	8004f18 <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022d6:	f000 ff21 	bl	800311c <Error_Handler>
  }
}
 80022da:	bf00      	nop
 80022dc:	3750      	adds	r7, #80	@ 0x50
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b09e      	sub	sp, #120	@ 0x78
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002304:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002310:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2234      	movs	r2, #52	@ 0x34
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f007 ff5c 	bl	800a1e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002330:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002332:	4a55      	ldr	r2, [pc, #340]	@ (8002488 <MX_TIM1_Init+0x1a4>)
 8002334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002336:	4b53      	ldr	r3, [pc, #332]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002338:	2201      	movs	r2, #1
 800233a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b51      	ldr	r3, [pc, #324]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002342:	4b50      	ldr	r3, [pc, #320]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002350:	4b4c      	ldr	r3, [pc, #304]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b4b      	ldr	r3, [pc, #300]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800235c:	4849      	ldr	r0, [pc, #292]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800235e:	f003 fa45 	bl	80057ec <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002368:	f000 fed8 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002370:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002376:	4619      	mov	r1, r3
 8002378:	4842      	ldr	r0, [pc, #264]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800237a:	f004 fcbb 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002384:	f000 feca 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002388:	483e      	ldr	r0, [pc, #248]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800238a:	f003 fbab 	bl	8005ae4 <HAL_TIM_PWM_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002394:	f000 fec2 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4836      	ldr	r0, [pc, #216]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 80023ac:	f005 fd56 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80023b6:	f000 feb1 	bl	800311c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80023ba:	2301      	movs	r3, #1
 80023bc:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80023be:	2301      	movs	r3, #1
 80023c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80023c2:	2301      	movs	r3, #1
 80023c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023ca:	461a      	mov	r2, r3
 80023cc:	2101      	movs	r1, #1
 80023ce:	482d      	ldr	r0, [pc, #180]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 80023d0:	f005 fe6e 	bl	80080b0 <HAL_TIMEx_ConfigBreakInput>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80023da:	f000 fe9f 	bl	800311c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023de:	2360      	movs	r3, #96	@ 0x60
 80023e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e6:	2300      	movs	r3, #0
 80023e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ea:	2300      	movs	r3, #0
 80023ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023fe:	2200      	movs	r2, #0
 8002400:	4619      	mov	r1, r3
 8002402:	4820      	ldr	r0, [pc, #128]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002404:	f004 fb62 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800240e:	f000 fe85 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002412:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002416:	2204      	movs	r2, #4
 8002418:	4619      	mov	r1, r3
 800241a:	481a      	ldr	r0, [pc, #104]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 800241c:	f004 fb56 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002426:	f000 fe79 	bl	800311c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800243a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002462:	463b      	mov	r3, r7
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002468:	f005 fd8e 	bl	8007f88 <HAL_TIMEx_ConfigBreakDeadTime>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8002472:	f000 fe53 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002476:	4803      	ldr	r0, [pc, #12]	@ (8002484 <MX_TIM1_Init+0x1a0>)
 8002478:	f000 ffc0 	bl	80033fc <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3778      	adds	r7, #120	@ 0x78
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000238 	.word	0x20000238
 8002488:	40012c00 	.word	0x40012c00

0800248c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	@ 0x30
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f007 fea4 	bl	800a1e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024d2:	2303      	movs	r3, #3
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 80024f2:	2302      	movs	r3, #2
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024fe:	f004 f829 	bl	8006554 <HAL_TIM_Encoder_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002508:	f000 fe08 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_TIM2_Init+0xa4>)
 800251a:	f005 fc9f 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002524:	f000 fdfa 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	@ 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000304 	.word	0x20000304

08002534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	463b      	mov	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <MX_TIM3_Init+0xe4>)
 8002568:	4a2c      	ldr	r2, [pc, #176]	@ (800261c <MX_TIM3_Init+0xe8>)
 800256a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <MX_TIM3_Init+0xe4>)
 800256e:	2201      	movs	r2, #1
 8002570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <MX_TIM3_Init+0xe4>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 106;
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <MX_TIM3_Init+0xe4>)
 800257a:	226a      	movs	r2, #106	@ 0x6a
 800257c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <MX_TIM3_Init+0xe4>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <MX_TIM3_Init+0xe4>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258a:	4823      	ldr	r0, [pc, #140]	@ (8002618 <MX_TIM3_Init+0xe4>)
 800258c:	f003 f92e 	bl	80057ec <HAL_TIM_Base_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002596:	f000 fdc1 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025a4:	4619      	mov	r1, r3
 80025a6:	481c      	ldr	r0, [pc, #112]	@ (8002618 <MX_TIM3_Init+0xe4>)
 80025a8:	f004 fba4 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025b2:	f000 fdb3 	bl	800311c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b6:	4818      	ldr	r0, [pc, #96]	@ (8002618 <MX_TIM3_Init+0xe4>)
 80025b8:	f003 fa94 	bl	8005ae4 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025c2:	f000 fdab 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4810      	ldr	r0, [pc, #64]	@ (8002618 <MX_TIM3_Init+0xe4>)
 80025d6:	f005 fc41 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025e0:	f000 fd9c 	bl	800311c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e4:	2360      	movs	r3, #96	@ 0x60
 80025e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2204      	movs	r2, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4807      	ldr	r0, [pc, #28]	@ (8002618 <MX_TIM3_Init+0xe4>)
 80025fc:	f004 fa66 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002606:	f000 fd89 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800260a:	4803      	ldr	r0, [pc, #12]	@ (8002618 <MX_TIM3_Init+0xe4>)
 800260c:	f000 fef6 	bl	80033fc <HAL_TIM_MspPostInit>

}
 8002610:	bf00      	nop
 8002612:	3738      	adds	r7, #56	@ 0x38
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200003d0 	.word	0x200003d0
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800263e:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002640:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <MX_TIM4_Init+0x98>)
 8002642:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002646:	22a9      	movs	r2, #169	@ 0xa9
 8002648:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <MX_TIM4_Init+0x94>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002652:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002656:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <MX_TIM4_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002664:	4813      	ldr	r0, [pc, #76]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002666:	f003 f8c1 	bl	80057ec <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002670:	f000 fd54 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <MX_TIM4_Init+0x94>)
 8002682:	f004 fb37 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800268c:	f000 fd46 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <MX_TIM4_Init+0x94>)
 800269e:	f005 fbdd 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026a8:	f000 fd38 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000049c 	.word	0x2000049c
 80026b8:	40000800 	.word	0x40000800

080026bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <MX_TIM5_Init+0x9c>)
 80026de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026e2:	f244 2267 	movw	r2, #16999	@ 0x4267
 80026e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026f0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80026f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <MX_TIM5_Init+0x98>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002702:	4814      	ldr	r0, [pc, #80]	@ (8002754 <MX_TIM5_Init+0x98>)
 8002704:	f003 f872 	bl	80057ec <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800270e:	f000 fd05 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4619      	mov	r1, r3
 800271e:	480d      	ldr	r0, [pc, #52]	@ (8002754 <MX_TIM5_Init+0x98>)
 8002720:	f004 fae8 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800272a:	f000 fcf7 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	@ (8002754 <MX_TIM5_Init+0x98>)
 800273c:	f005 fb8e 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002746:	f000 fce9 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000568 	.word	0x20000568
 8002758:	40000c00 	.word	0x40000c00

0800275c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800276c:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <MX_TIM7_Init+0x64>)
 800276e:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <MX_TIM7_Init+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <MX_TIM7_Init+0x64>)
 8002774:	22a9      	movs	r2, #169	@ 0xa9
 8002776:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <MX_TIM7_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <MX_TIM7_Init+0x64>)
 8002780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002784:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <MX_TIM7_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800278c:	480c      	ldr	r0, [pc, #48]	@ (80027c0 <MX_TIM7_Init+0x64>)
 800278e:	f003 f82d 	bl	80057ec <HAL_TIM_Base_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002798:	f000 fcc0 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <MX_TIM7_Init+0x64>)
 80027aa:	f005 fb57 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027b4:	f000 fcb2 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000634 	.word	0x20000634
 80027c4:	40001400 	.word	0x40001400

080027c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <MX_TIM16_Init+0x44>)
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <MX_TIM16_Init+0x48>)
 80027d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <MX_TIM16_Init+0x44>)
 80027d4:	22a9      	movs	r2, #169	@ 0xa9
 80027d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <MX_TIM16_Init+0x44>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <MX_TIM16_Init+0x44>)
 80027e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <MX_TIM16_Init+0x44>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80027ec:	4b07      	ldr	r3, [pc, #28]	@ (800280c <MX_TIM16_Init+0x44>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <MX_TIM16_Init+0x44>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80027f8:	4804      	ldr	r0, [pc, #16]	@ (800280c <MX_TIM16_Init+0x44>)
 80027fa:	f002 fff7 	bl	80057ec <HAL_TIM_Base_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002804:	f000 fc8a 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000700 	.word	0x20000700
 8002810:	40014400 	.word	0x40014400

08002814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 800281a:	4a23      	ldr	r2, [pc, #140]	@ (80028a8 <MX_USART1_UART_Init+0x94>)
 800281c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281e:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002826:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 800283a:	220c      	movs	r2, #12
 800283c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800285c:	4811      	ldr	r0, [pc, #68]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 800285e:	f005 fd99 	bl	8008394 <HAL_UART_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002868:	f000 fc58 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286c:	2100      	movs	r1, #0
 800286e:	480d      	ldr	r0, [pc, #52]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002870:	f007 fbb9 	bl	8009fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800287a:	f000 fc4f 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287e:	2100      	movs	r1, #0
 8002880:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002882:	f007 fbee 	bl	800a062 <HAL_UARTEx_SetRxFifoThreshold>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800288c:	f000 fc46 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <MX_USART1_UART_Init+0x90>)
 8002892:	f007 fb6f 	bl	8009f74 <HAL_UARTEx_DisableFifoMode>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800289c:	f000 fc3e 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2000082c 	.word	0x2000082c
 80028a8:	40013800 	.word	0x40013800

080028ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028b2:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <MX_USART2_UART_Init+0x98>)
 80028b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028b8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80028bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 80028fa:	f005 fd4b 	bl	8008394 <HAL_UART_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002904:	f000 fc0a 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800290c:	f007 fb6b 	bl	8009fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002916:	f000 fc01 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4808      	ldr	r0, [pc, #32]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800291e:	f007 fba0 	bl	800a062 <HAL_UARTEx_SetRxFifoThreshold>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002928:	f000 fbf8 	bl	800311c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_USART2_UART_Init+0x94>)
 800292e:	f007 fb21 	bl	8009f74 <HAL_UARTEx_DisableFifoMode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002938:	f000 fbf0 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200008f8 	.word	0x200008f8
 8002944:	40004400 	.word	0x40004400

08002948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800294e:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002952:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6493      	str	r3, [r2, #72]	@ 0x48
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <MX_DMA_Init+0x98>)
 800295c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <MX_DMA_Init+0x98>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6493      	str	r3, [r2, #72]	@ 0x48
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <MX_DMA_Init+0x98>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6493      	str	r3, [r2, #72]	@ 0x48
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MX_DMA_Init+0x98>)
 800298c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	200b      	movs	r0, #11
 800299c:	f001 f9dd 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029a0:	200b      	movs	r0, #11
 80029a2:	f001 f9f4 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	200c      	movs	r0, #12
 80029ac:	f001 f9d5 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80029b0:	200c      	movs	r0, #12
 80029b2:	f001 f9ec 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	200d      	movs	r0, #13
 80029bc:	f001 f9cd 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029c0:	200d      	movs	r0, #13
 80029c2:	f001 f9e4 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2039      	movs	r0, #57	@ 0x39
 80029cc:	f001 f9c5 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80029d0:	2039      	movs	r0, #57	@ 0x39
 80029d2:	f001 f9dc 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b57      	ldr	r3, [pc, #348]	@ (8002b58 <MX_GPIO_Init+0x174>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	4a56      	ldr	r2, [pc, #344]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a06:	4b54      	ldr	r3, [pc, #336]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	4b51      	ldr	r3, [pc, #324]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a16:	4a50      	ldr	r2, [pc, #320]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a36:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	4a44      	ldr	r2, [pc, #272]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4e:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <MX_GPIO_Init+0x174>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f240 4111 	movw	r1, #1041	@ 0x411
 8002a60:	483e      	ldr	r0, [pc, #248]	@ (8002b5c <MX_GPIO_Init+0x178>)
 8002a62:	f001 fe63 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	483d      	ldr	r0, [pc, #244]	@ (8002b60 <MX_GPIO_Init+0x17c>)
 8002a6c:	f001 fe5e 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	4836      	ldr	r0, [pc, #216]	@ (8002b60 <MX_GPIO_Init+0x17c>)
 8002a88:	f001 fcce 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa2:	f001 fcc1 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4;
 8002aa6:	f240 4311 	movw	r3, #1041	@ 0x411
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	4827      	ldr	r0, [pc, #156]	@ (8002b5c <MX_GPIO_Init+0x178>)
 8002ac0:	f001 fcb2 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4821      	ldr	r0, [pc, #132]	@ (8002b60 <MX_GPIO_Init+0x17c>)
 8002adc:	f001 fca4 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ae6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afa:	f001 fc95 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002afe:	2320      	movs	r3, #32
 8002b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4812      	ldr	r0, [pc, #72]	@ (8002b5c <MX_GPIO_Init+0x178>)
 8002b14:	f001 fc88 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b18:	2340      	movs	r3, #64	@ 0x40
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <MX_GPIO_Init+0x178>)
 8002b2c:	f001 fc7c 	bl	8004428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	2017      	movs	r0, #23
 8002b36:	f001 f910 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b3a:	2017      	movs	r0, #23
 8002b3c:	f001 f927 	bl	8003d8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	2028      	movs	r0, #40	@ 0x28
 8002b46:	f001 f908 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b4a:	2028      	movs	r0, #40	@ 0x28
 8002b4c:	f001 f91f 	bl	8003d8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000400 	.word	0x48000400
 8002b60:	48000800 	.word	0x48000800

08002b64 <generate_trapezoidal_velocity_profile>:

/* USER CODE BEGIN 4 */

///TRAJECTORY
void generate_trapezoidal_velocity_profile(double t2, double x2) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b6e:	ed87 1b00 	vstr	d1, [r7]
  // Total displacement and time interval
	total_displacement = x2 - qeifloat;
 8002b72:	4b26      	ldr	r3, [pc, #152]	@ (8002c0c <generate_trapezoidal_velocity_profile+0xa8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fcb2 	bl	80004e0 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b84:	f7fd fb4c 	bl	8000220 <__aeabi_dsub>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fd ff38 	bl	8000a04 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <generate_trapezoidal_velocity_profile+0xac>)
 8002b98:	6013      	str	r3, [r2, #0]
	total_time = t2;
 8002b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b9e:	f7fd ff31 	bl	8000a04 <__aeabi_d2f>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c14 <generate_trapezoidal_velocity_profile+0xb0>)
 8002ba6:	6013      	str	r3, [r2, #0]

  // Calculate optimal acceleration time (t_acc) - Assume a reasonable value
	t_acc = total_time / 4;  // This is an assumption; you can adjust it
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <generate_trapezoidal_velocity_profile+0xb0>)
 8002baa:	ed93 7a00 	vldr	s14, [r3]
 8002bae:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <generate_trapezoidal_velocity_profile+0xb4>)
 8002bb8:	edc3 7a00 	vstr	s15, [r3]

  // Remaining time for constant velocity phase
	t_const = total_time - 2 * t_acc;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <generate_trapezoidal_velocity_profile+0xb0>)
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <generate_trapezoidal_velocity_profile+0xb4>)
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <generate_trapezoidal_velocity_profile+0xb8>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]

  // Calculate peak velocity
	Peak = total_displacement / (t_acc + t_const);
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <generate_trapezoidal_velocity_profile+0xac>)
 8002bd8:	edd3 6a00 	vldr	s13, [r3]
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <generate_trapezoidal_velocity_profile+0xb4>)
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <generate_trapezoidal_velocity_profile+0xb8>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <generate_trapezoidal_velocity_profile+0xbc>)
 8002bf2:	edc3 7a00 	vstr	s15, [r3]

	HAL_TIM_Base_Start_IT(&htim4);
 8002bf6:	480b      	ldr	r0, [pc, #44]	@ (8002c24 <generate_trapezoidal_velocity_profile+0xc0>)
 8002bf8:	f002 fecc 	bl	8005994 <HAL_TIM_Base_Start_IT>

	Mode = 0;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <generate_trapezoidal_velocity_profile+0xc4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]

  }
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000aec 	.word	0x20000aec
 8002c10:	20001194 	.word	0x20001194
 8002c14:	20001198 	.word	0x20001198
 8002c18:	2000119c 	.word	0x2000119c
 8002c1c:	200011a0 	.word	0x200011a0
 8002c20:	200011a4 	.word	0x200011a4
 8002c24:	2000049c 	.word	0x2000049c
 8002c28:	200011bc 	.word	0x200011bc
 8002c2c:	00000000 	.word	0x00000000

08002c30 <generate_Velocity>:

void generate_Velocity()
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0

		t = (time_op) * i / num_points;
 8002c36:	4bb4      	ldr	r3, [pc, #720]	@ (8002f08 <generate_Velocity+0x2d8>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd fff8 	bl	8000c34 <__aeabi_ul2f>
 8002c44:	ee07 0a10 	vmov	s14, r0
 8002c48:	4bb0      	ldr	r3, [pc, #704]	@ (8002f0c <generate_Velocity+0x2dc>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c52:	4baf      	ldr	r3, [pc, #700]	@ (8002f10 <generate_Velocity+0x2e0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c62:	4bac      	ldr	r3, [pc, #688]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002c64:	edc3 7a00 	vstr	s15, [r3]
				        if (t < t_acc) {
 8002c68:	4baa      	ldr	r3, [pc, #680]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002c6a:	ed93 7a00 	vldr	s14, [r3]
 8002c6e:	4baa      	ldr	r3, [pc, #680]	@ (8002f18 <generate_Velocity+0x2e8>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	d510      	bpl.n	8002ca0 <generate_Velocity+0x70>
				          velocity = (Peak * (t / t_acc));
 8002c7e:	4ba5      	ldr	r3, [pc, #660]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002c80:	edd3 6a00 	vldr	s13, [r3]
 8002c84:	4ba4      	ldr	r3, [pc, #656]	@ (8002f18 <generate_Velocity+0x2e8>)
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002f1c <generate_Velocity+0x2ec>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c98:	4ba1      	ldr	r3, [pc, #644]	@ (8002f20 <generate_Velocity+0x2f0>)
 8002c9a:	edc3 7a00 	vstr	s15, [r3]
 8002c9e:	e034      	b.n	8002d0a <generate_Velocity+0xda>
				        } else if (t >= t_acc && t <+ t_acc + t_const) {
 8002ca0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002ca2:	ed93 7a00 	vldr	s14, [r3]
 8002ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8002f18 <generate_Velocity+0x2e8>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	db14      	blt.n	8002ce0 <generate_Velocity+0xb0>
 8002cb6:	4b98      	ldr	r3, [pc, #608]	@ (8002f18 <generate_Velocity+0x2e8>)
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	4b99      	ldr	r3, [pc, #612]	@ (8002f24 <generate_Velocity+0x2f4>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc6:	4b93      	ldr	r3, [pc, #588]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	dd04      	ble.n	8002ce0 <generate_Velocity+0xb0>
				          velocity = Peak;
 8002cd6:	4b91      	ldr	r3, [pc, #580]	@ (8002f1c <generate_Velocity+0x2ec>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a91      	ldr	r2, [pc, #580]	@ (8002f20 <generate_Velocity+0x2f0>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e014      	b.n	8002d0a <generate_Velocity+0xda>
				        } else {
				          velocity = (Peak * ((time_op - t) / t_acc));
 8002ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8002f0c <generate_Velocity+0x2dc>)
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f14 <generate_Velocity+0x2e4>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cf0:	4b89      	ldr	r3, [pc, #548]	@ (8002f18 <generate_Velocity+0x2e8>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfa:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <generate_Velocity+0x2ec>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	4b86      	ldr	r3, [pc, #536]	@ (8002f20 <generate_Velocity+0x2f0>)
 8002d06:	edc3 7a00 	vstr	s15, [r3]
				        }
				        position += velocity/1000.0;
 8002d0a:	4b87      	ldr	r3, [pc, #540]	@ (8002f28 <generate_Velocity+0x2f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fbe6 	bl	80004e0 <__aeabi_f2d>
 8002d14:	4604      	mov	r4, r0
 8002d16:	460d      	mov	r5, r1
 8002d18:	4b81      	ldr	r3, [pc, #516]	@ (8002f20 <generate_Velocity+0x2f0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fbdf 	bl	80004e0 <__aeabi_f2d>
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b81      	ldr	r3, [pc, #516]	@ (8002f2c <generate_Velocity+0x2fc>)
 8002d28:	f7fd fd5c 	bl	80007e4 <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4620      	mov	r0, r4
 8002d32:	4629      	mov	r1, r5
 8002d34:	f7fd fa76 	bl	8000224 <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd fe60 	bl	8000a04 <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a78      	ldr	r2, [pc, #480]	@ (8002f28 <generate_Velocity+0x2f8>)
 8002d48:	6013      	str	r3, [r2, #0]

				        position_now = position;
 8002d4a:	4b77      	ldr	r3, [pc, #476]	@ (8002f28 <generate_Velocity+0x2f8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a78      	ldr	r2, [pc, #480]	@ (8002f30 <generate_Velocity+0x300>)
 8002d50:	6013      	str	r3, [r2, #0]

				        Vfeedback = arm_pid_f32(&PID, position_now - qeifloat);
 8002d52:	4b77      	ldr	r3, [pc, #476]	@ (8002f30 <generate_Velocity+0x300>)
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	4b76      	ldr	r3, [pc, #472]	@ (8002f34 <generate_Velocity+0x304>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d62:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <generate_Velocity+0x308>)
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d74:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002d88:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f3c <generate_Velocity+0x30c>)
 8002dc6:	6013      	str	r3, [r2, #0]



				        BTempV = Vfeedback;
 8002dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8002f3c <generate_Velocity+0x30c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8002f40 <generate_Velocity+0x310>)
 8002dce:	6013      	str	r3, [r2, #0]

				        VInM = Vfeedback * (24.0/65535.0);
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <generate_Velocity+0x30c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb83 	bl	80004e0 <__aeabi_f2d>
 8002dda:	a347      	add	r3, pc, #284	@ (adr r3, 8002ef8 <generate_Velocity+0x2c8>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fbd6 	bl	8000590 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fe0a 	bl	8000a04 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <generate_Velocity+0x314>)
 8002df4:	6013      	str	r3, [r2, #0]
		//		        if (Vfeedback < 9830)
		//		        {
		//		        	Vfeedback = 9830;
		//		        }

				        zStop = 0;
 8002df6:	4b54      	ldr	r3, [pc, #336]	@ (8002f48 <generate_Velocity+0x318>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
				        pwmM = Vfeedback * (65535.0/24.0);
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f3c <generate_Velocity+0x30c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb6d 	bl	80004e0 <__aeabi_f2d>
 8002e06:	a33e      	add	r3, pc, #248	@ (adr r3, 8002f00 <generate_Velocity+0x2d0>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fbc0 	bl	8000590 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fdcc 	bl	80009b4 <__aeabi_d2iz>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f4c <generate_Velocity+0x31c>)
 8002e20:	6013      	str	r3, [r2, #0]

				        if(Vfeedback >= 0)
 8002e22:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <generate_Velocity+0x30c>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	db09      	blt.n	8002e46 <generate_Velocity+0x216>
				        {
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmM);
 8002e32:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <generate_Velocity+0x31c>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b46      	ldr	r3, [pc, #280]	@ (8002f50 <generate_Velocity+0x320>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002e3c:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <generate_Velocity+0x320>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e44:	e011      	b.n	8002e6a <generate_Velocity+0x23a>

				        }

				        else if (Vfeedback < 0)
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <generate_Velocity+0x30c>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	d509      	bpl.n	8002e6a <generate_Velocity+0x23a>
				        {

				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002e56:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <generate_Velocity+0x320>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmM*-1);
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <generate_Velocity+0x31c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	425a      	negs	r2, r3
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <generate_Velocity+0x320>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38



		//		        qei = PlantSimulation(Vfeeback);

				        if ( i >= time_op*1000)
 8002e6a:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <generate_Velocity+0x2d8>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fede 	bl	8000c34 <__aeabi_ul2f>
 8002e78:	ee06 0a90 	vmov	s13, r0
 8002e7c:	4b23      	ldr	r3, [pc, #140]	@ (8002f0c <generate_Velocity+0x2dc>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002f54 <generate_Velocity+0x324>
 8002e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	da00      	bge.n	8002e96 <generate_Velocity+0x266>
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);

				        }

}
 8002e94:	e02b      	b.n	8002eee <generate_Velocity+0x2be>
				        	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002e96:	4b30      	ldr	r3, [pc, #192]	@ (8002f58 <generate_Velocity+0x328>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
				        	HAL_TIM_Base_Stop_IT(&htim4);
 8002e9e:	482e      	ldr	r0, [pc, #184]	@ (8002f58 <generate_Velocity+0x328>)
 8002ea0:	f002 fdf0 	bl	8005a84 <HAL_TIM_Base_Stop_IT>
				        	rou += 1;
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <generate_Velocity+0x32c>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <generate_Velocity+0x32c>)
 8002eae:	801a      	strh	r2, [r3, #0]
				        	i = 0;
 8002eb0:	4915      	ldr	r1, [pc, #84]	@ (8002f08 <generate_Velocity+0x2d8>)
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9c1 2300 	strd	r2, r3, [r1]
				        	buf[0] = 2;
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <generate_Velocity+0x330>)
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	701a      	strb	r2, [r3, #0]
				        	L_State = updateLED(buf,&htim3,TIM_CHANNEL_2);
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	4927      	ldr	r1, [pc, #156]	@ (8002f64 <generate_Velocity+0x334>)
 8002ec8:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <generate_Velocity+0x330>)
 8002eca:	f000 fcc9 	bl	8003860 <updateLED>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <generate_Velocity+0x338>)
 8002ed4:	701a      	strb	r2, [r3, #0]
				        	fin = 1;
 8002ed6:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <generate_Velocity+0x33c>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8002edc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f50 <generate_Velocity+0x320>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ee4:	635a      	str	r2, [r3, #52]	@ 0x34
				        	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <generate_Velocity+0x320>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	00180018 	.word	0x00180018
 8002efc:	3f380018 	.word	0x3f380018
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40a55540 	.word	0x40a55540
 8002f08:	200011a8 	.word	0x200011a8
 8002f0c:	20000200 	.word	0x20000200
 8002f10:	20000204 	.word	0x20000204
 8002f14:	200011b0 	.word	0x200011b0
 8002f18:	2000119c 	.word	0x2000119c
 8002f1c:	200011a4 	.word	0x200011a4
 8002f20:	200011b4 	.word	0x200011b4
 8002f24:	200011a0 	.word	0x200011a0
 8002f28:	200011b8 	.word	0x200011b8
 8002f2c:	408f4000 	.word	0x408f4000
 8002f30:	20001190 	.word	0x20001190
 8002f34:	20000aec 	.word	0x20000aec
 8002f38:	200011c8 	.word	0x200011c8
 8002f3c:	200011c0 	.word	0x200011c0
 8002f40:	200011ec 	.word	0x200011ec
 8002f44:	200011c4 	.word	0x200011c4
 8002f48:	20000af0 	.word	0x20000af0
 8002f4c:	200011f0 	.word	0x200011f0
 8002f50:	20000238 	.word	0x20000238
 8002f54:	447a0000 	.word	0x447a0000
 8002f58:	2000049c 	.word	0x2000049c
 8002f5c:	200011f4 	.word	0x200011f4
 8002f60:	20000208 	.word	0x20000208
 8002f64:	200003d0 	.word	0x200003d0
 8002f68:	200011f6 	.word	0x200011f6
 8002f6c:	200011f7 	.word	0x200011f7

08002f70 <serviceMotor>:
 *		pwm: (unsigned 32-bit integer) Motor pwm value
 *		dir: (unsigned 8-bit integer) Motor direction
 *
 */

void serviceMotor(uint32_t pwm, uint8_t dir){
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]

	zStop = 0;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <serviceMotor+0x48>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
	if(dir){
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <serviceMotor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8002f88:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <serviceMotor+0x4c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <serviceMotor+0x4c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
	}
}
 8002f98:	e007      	b.n	8002faa <serviceMotor+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <serviceMotor+0x4c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <serviceMotor+0x4c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000af0 	.word	0x20000af0
 8002fbc:	20000238 	.word	0x20000238

08002fc0 <getZStop>:
 *		void
 *
 */


uint8_t getZStop(){
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
	return zStop;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <getZStop+0x14>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	20000af0 	.word	0x20000af0

08002fd8 <HAL_GPIO_EXTI_Callback>:

// @User : Stop motor when hit the end stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_10 ) && zStop== 0){
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_EXTI_Callback+0x18>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fee:	d117      	bne.n	8003020 <HAL_GPIO_EXTI_Callback+0x48>
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_GPIO_EXTI_Callback+0x54>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d112      	bne.n	8003020 <HAL_GPIO_EXTI_Callback+0x48>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_GPIO_EXTI_Callback+0x58>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_GPIO_EXTI_Callback+0x58>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38
		zStop = 1;
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_GPIO_EXTI_Callback+0x54>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003010:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
		qeifloat = 0;
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <HAL_GPIO_EXTI_Callback+0x60>)
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
	}

}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	20000af0 	.word	0x20000af0
 8003030:	20000238 	.word	0x20000238
 8003034:	20000304 	.word	0x20000304
 8003038:	20000aec 	.word	0x20000aec

0800303c <HAL_TIM_PWM_PulseFinishedCallback>:


// @User : Stop timer3 that send data to led
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d103      	bne.n	8003056 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 800304e:	2104      	movs	r1, #4
 8003050:	4804      	ldr	r0, [pc, #16]	@ (8003064 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003052:	f003 f8f3 	bl	800623c <HAL_TIM_PWM_Stop_DMA>
	}

}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40000400 	.word	0x40000400
 8003064:	200003d0 	.word	0x200003d0

08003068 <HAL_TIM_PeriodElapsedCallback>:

//Callback -> Timer finish
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d104      	bne.n	8003084 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		registerFrame[0x00].U16 = 22881; //send "Ya"
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800307c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003080:	801a      	strh	r2, [r3, #0]
	else if(htim == &htim7)
	{
	_micros += UINT16_MAX;
	}

}
 8003082:	e01f      	b.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim4)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a14      	ldr	r2, [pc, #80]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10c      	bne.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		i+=1;
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f112 0801 	adds.w	r8, r2, #1
 8003096:	f143 0900 	adc.w	r9, r3, #0
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800309c:	e9c3 8900 	strd	r8, r9, [r3]
		generate_Velocity();
 80030a0:	f7ff fdc6 	bl	8002c30 <generate_Velocity>
}
 80030a4:	e00e      	b.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10a      	bne.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x5c>
	_micros += UINT16_MAX;
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80030b8:	1854      	adds	r4, r2, r1
 80030ba:	f143 0500 	adc.w	r5, r3, #0
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80030c0:	e9c3 4500 	strd	r4, r5, [r3]
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030ce:	bf00      	nop
 80030d0:	20000568 	.word	0x20000568
 80030d4:	20000fd4 	.word	0x20000fd4
 80030d8:	2000049c 	.word	0x2000049c
 80030dc:	200011a8 	.word	0x200011a8
 80030e0:	20000634 	.word	0x20000634
 80030e4:	20001208 	.word	0x20001208

080030e8 <micros>:

uint64_t micros()
{
 80030e8:	b4b0      	push	{r4, r5, r7}
 80030ea:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim7)+_micros;
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <micros+0x2c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	4611      	mov	r1, r2
 80030f8:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <micros+0x30>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	1884      	adds	r4, r0, r2
 8003100:	eb41 0503 	adc.w	r5, r1, r3
 8003104:	4622      	mov	r2, r4
 8003106:	462b      	mov	r3, r5
}
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	bcb0      	pop	{r4, r5, r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000634 	.word	0x20000634
 8003118:	20001208 	.word	0x20001208

0800311c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <Error_Handler+0x8>

08003128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_MspInit+0x44>)
 8003130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003132:	4a0e      	ldr	r2, [pc, #56]	@ (800316c <HAL_MspInit+0x44>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6613      	str	r3, [r2, #96]	@ 0x60
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_MspInit+0x44>)
 800313c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_MspInit+0x44>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	4a08      	ldr	r2, [pc, #32]	@ (800316c <HAL_MspInit+0x44>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6593      	str	r3, [r2, #88]	@ 0x58
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_MspInit+0x44>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800315e:	f001 fbb9 	bl	80048d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	@ 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a72      	ldr	r2, [pc, #456]	@ (8003358 <HAL_TIM_Base_MspInit+0x1e8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d139      	bne.n	8003206 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003192:	4b72      	ldr	r3, [pc, #456]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003196:	4a71      	ldr	r2, [pc, #452]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800319c:	6613      	str	r3, [r2, #96]	@ 0x60
 800319e:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b6c      	ldr	r3, [pc, #432]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80031ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ae:	4a6b      	ldr	r2, [pc, #428]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b6:	4b69      	ldr	r3, [pc, #420]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031c2:	2340      	movs	r3, #64	@ 0x40
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c6:	2312      	movs	r3, #18
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031d2:	2306      	movs	r3, #6
 80031d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031e0:	f001 f922 	bl	8004428 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	2018      	movs	r0, #24
 80031ea:	f000 fdb6 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80031ee:	2018      	movs	r0, #24
 80031f0:	f000 fdcd 	bl	8003d8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	2019      	movs	r0, #25
 80031fa:	f000 fdae 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031fe:	2019      	movs	r0, #25
 8003200:	f000 fdc5 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003204:	e0a3      	b.n	800334e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a55      	ldr	r2, [pc, #340]	@ (8003360 <HAL_TIM_Base_MspInit+0x1f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d137      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003210:	4b52      	ldr	r3, [pc, #328]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	6593      	str	r3, [r2, #88]	@ 0x58
 800321c:	4b4f      	ldr	r3, [pc, #316]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Channel3;
 8003228:	4b4e      	ldr	r3, [pc, #312]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 800322a:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <HAL_TIM_Base_MspInit+0x1f8>)
 800322c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800322e:	4b4d      	ldr	r3, [pc, #308]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003230:	223e      	movs	r2, #62	@ 0x3e
 8003232:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003234:	4b4b      	ldr	r3, [pc, #300]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003236:	2210      	movs	r2, #16
 8003238:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800323a:	4b4a      	ldr	r3, [pc, #296]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 800323c:	2200      	movs	r2, #0
 800323e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003240:	4b48      	ldr	r3, [pc, #288]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003246:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800324c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800324e:	4b45      	ldr	r3, [pc, #276]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003254:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003256:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003258:	2200      	movs	r2, #0
 800325a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 800325e:	2200      	movs	r2, #0
 8003260:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003262:	4840      	ldr	r0, [pc, #256]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003264:	f000 fdae 	bl	8003dc4 <HAL_DMA_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 800326e:	f7ff ff55 	bl	800311c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a3b      	ldr	r2, [pc, #236]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
 8003278:	4a3a      	ldr	r2, [pc, #232]	@ (8003364 <HAL_TIM_Base_MspInit+0x1f4>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800327e:	e066      	b.n	800334e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a39      	ldr	r2, [pc, #228]	@ (800336c <HAL_TIM_Base_MspInit+0x1fc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d114      	bne.n	80032b4 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6593      	str	r3, [r2, #88]	@ 0x58
 8003296:	4b31      	ldr	r3, [pc, #196]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	201e      	movs	r0, #30
 80032a8:	f000 fd57 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032ac:	201e      	movs	r0, #30
 80032ae:	f000 fd6e 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 80032b2:	e04c      	b.n	800334e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM5)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003370 <HAL_TIM_Base_MspInit+0x200>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d114      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032be:	4b27      	ldr	r3, [pc, #156]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	4a26      	ldr	r2, [pc, #152]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2032      	movs	r0, #50	@ 0x32
 80032dc:	f000 fd3d 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032e0:	2032      	movs	r0, #50	@ 0x32
 80032e2:	f000 fd54 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 80032e6:	e032      	b.n	800334e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_TIM_Base_MspInit+0x204>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d114      	bne.n	800331c <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032f2:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	4a19      	ldr	r2, [pc, #100]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fe:	4b17      	ldr	r3, [pc, #92]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	2037      	movs	r0, #55	@ 0x37
 8003310:	f000 fd23 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003314:	2037      	movs	r0, #55	@ 0x37
 8003316:	f000 fd3a 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 800331a:	e018      	b.n	800334e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM16)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a15      	ldr	r2, [pc, #84]	@ (8003378 <HAL_TIM_Base_MspInit+0x208>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332a:	4a0c      	ldr	r2, [pc, #48]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 800332c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003330:	6613      	str	r3, [r2, #96]	@ 0x60
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_TIM_Base_MspInit+0x1ec>)
 8003334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2019      	movs	r0, #25
 8003344:	f000 fd09 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003348:	2019      	movs	r0, #25
 800334a:	f000 fd20 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3738      	adds	r7, #56	@ 0x38
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40021000 	.word	0x40021000
 8003360:	40000400 	.word	0x40000400
 8003364:	200007cc 	.word	0x200007cc
 8003368:	40020030 	.word	0x40020030
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40001400 	.word	0x40001400
 8003378:	40014400 	.word	0x40014400

0800337c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339c:	d128      	bne.n	80033f0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	4a0f      	ldr	r2, [pc, #60]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80033ce:	2322      	movs	r3, #34	@ 0x22
 80033d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033de:	2301      	movs	r3, #1
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ec:	f001 f81c 	bl	8004428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	@ 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_TIM_MspPostInit+0xac>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d11e      	bne.n	800345c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003436:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800343a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003448:	2306      	movs	r3, #6
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003456:	f000 ffe7 	bl	8004428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800345a:	e021      	b.n	80034a0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a13      	ldr	r2, [pc, #76]	@ (80034b0 <HAL_TIM_MspPostInit+0xb4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d11c      	bne.n	80034a0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003472:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <HAL_TIM_MspPostInit+0xb0>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800347e:	2310      	movs	r3, #16
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348e:	2302      	movs	r3, #2
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349c:	f000 ffc4 	bl	8004428 <HAL_GPIO_Init>
}
 80034a0:	bf00      	nop
 80034a2:	3728      	adds	r7, #40	@ 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40000400 	.word	0x40000400

080034b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b0a0      	sub	sp, #128	@ 0x80
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	2254      	movs	r2, #84	@ 0x54
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f006 fe87 	bl	800a1e8 <memset>
  if(huart->Instance==USART1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a80      	ldr	r2, [pc, #512]	@ (80036e0 <HAL_UART_MspInit+0x22c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d161      	bne.n	80035a8 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ec:	f107 0318 	add.w	r3, r7, #24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 ff2d 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034fc:	f7ff fe0e 	bl	800311c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003500:	4b78      	ldr	r3, [pc, #480]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 8003506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800350a:	6613      	str	r3, [r2, #96]	@ 0x60
 800350c:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 800350e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	4b72      	ldr	r3, [pc, #456]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351c:	4a71      	ldr	r2, [pc, #452]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003524:	4b6f      	ldr	r3, [pc, #444]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003530:	2330      	movs	r3, #48	@ 0x30
 8003532:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003540:	2307      	movs	r3, #7
 8003542:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003548:	4619      	mov	r1, r3
 800354a:	4867      	ldr	r0, [pc, #412]	@ (80036e8 <HAL_UART_MspInit+0x234>)
 800354c:	f000 ff6c 	bl	8004428 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel2;
 8003550:	4b66      	ldr	r3, [pc, #408]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003552:	4a67      	ldr	r2, [pc, #412]	@ (80036f0 <HAL_UART_MspInit+0x23c>)
 8003554:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003556:	4b65      	ldr	r3, [pc, #404]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003558:	2218      	movs	r2, #24
 800355a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355c:	4b63      	ldr	r3, [pc, #396]	@ (80036ec <HAL_UART_MspInit+0x238>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	4b62      	ldr	r3, [pc, #392]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003568:	4b60      	ldr	r3, [pc, #384]	@ (80036ec <HAL_UART_MspInit+0x238>)
 800356a:	2280      	movs	r2, #128	@ 0x80
 800356c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356e:	4b5f      	ldr	r3, [pc, #380]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003570:	2200      	movs	r2, #0
 8003572:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003574:	4b5d      	ldr	r3, [pc, #372]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003576:	2200      	movs	r2, #0
 8003578:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800357a:	4b5c      	ldr	r3, [pc, #368]	@ (80036ec <HAL_UART_MspInit+0x238>)
 800357c:	2220      	movs	r2, #32
 800357e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003580:	4b5a      	ldr	r3, [pc, #360]	@ (80036ec <HAL_UART_MspInit+0x238>)
 8003582:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003586:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003588:	4858      	ldr	r0, [pc, #352]	@ (80036ec <HAL_UART_MspInit+0x238>)
 800358a:	f000 fc1b 	bl	8003dc4 <HAL_DMA_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003594:	f7ff fdc2 	bl	800311c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a54      	ldr	r2, [pc, #336]	@ (80036ec <HAL_UART_MspInit+0x238>)
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035a0:	4a52      	ldr	r2, [pc, #328]	@ (80036ec <HAL_UART_MspInit+0x238>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035a6:	e097      	b.n	80036d8 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a51      	ldr	r2, [pc, #324]	@ (80036f4 <HAL_UART_MspInit+0x240>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f040 8092 	bne.w	80036d8 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035b4:	2302      	movs	r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035bc:	f107 0318 	add.w	r3, r7, #24
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 fec5 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 80035cc:	f7ff fda6 	bl	800311c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035d0:	4b44      	ldr	r3, [pc, #272]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	4a43      	ldr	r2, [pc, #268]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035da:	6593      	str	r3, [r2, #88]	@ 0x58
 80035dc:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	4b3e      	ldr	r3, [pc, #248]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ec:	4a3d      	ldr	r2, [pc, #244]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f4:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <HAL_UART_MspInit+0x230>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003600:	230c      	movs	r3, #12
 8003602:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	2300      	movs	r3, #0
 800360e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003610:	2307      	movs	r3, #7
 8003612:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003618:	4619      	mov	r1, r3
 800361a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800361e:	f000 ff03 	bl	8004428 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003622:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <HAL_UART_MspInit+0x248>)
 8003626:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003628:	4b33      	ldr	r3, [pc, #204]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 800362a:	221a      	movs	r2, #26
 800362c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362e:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800363a:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003640:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003646:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800364c:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003652:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003658:	4827      	ldr	r0, [pc, #156]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 800365a:	f000 fbb3 	bl	8003dc4 <HAL_DMA_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8003664:	f7ff fd5a 	bl	800311c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003670:	4a21      	ldr	r2, [pc, #132]	@ (80036f8 <HAL_UART_MspInit+0x244>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003676:	4b22      	ldr	r3, [pc, #136]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 8003678:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_UART_MspInit+0x250>)
 800367a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800367c:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 800367e:	221b      	movs	r2, #27
 8003680:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003682:	4b1f      	ldr	r3, [pc, #124]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 8003684:	2210      	movs	r2, #16
 8003686:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 8003690:	2280      	movs	r2, #128	@ 0x80
 8003692:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 8003696:	2200      	movs	r2, #0
 8003698:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036ac:	4814      	ldr	r0, [pc, #80]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 80036ae:	f000 fb89 	bl	8003dc4 <HAL_DMA_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_MspInit+0x208>
      Error_Handler();
 80036b8:	f7ff fd30 	bl	800311c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a10      	ldr	r2, [pc, #64]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 80036c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_UART_MspInit+0x24c>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2026      	movs	r0, #38	@ 0x26
 80036ce:	f000 fb44 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036d2:	2026      	movs	r0, #38	@ 0x26
 80036d4:	f000 fb5b 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 80036d8:	bf00      	nop
 80036da:	3780      	adds	r7, #128	@ 0x80
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40013800 	.word	0x40013800
 80036e4:	40021000 	.word	0x40021000
 80036e8:	48000800 	.word	0x48000800
 80036ec:	200009c4 	.word	0x200009c4
 80036f0:	4002041c 	.word	0x4002041c
 80036f4:	40004400 	.word	0x40004400
 80036f8:	20000a24 	.word	0x20000a24
 80036fc:	4002001c 	.word	0x4002001c
 8003700:	20000a84 	.word	0x20000a84
 8003704:	40020008 	.word	0x40020008

08003708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <NMI_Handler+0x4>

08003710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <HardFault_Handler+0x4>

08003718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <MemManage_Handler+0x4>

08003720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <BusFault_Handler+0x4>

08003728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <UsageFault_Handler+0x4>

08003730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800375e:	f000 f9e1 	bl	8003b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <DMA1_Channel1_IRQHandler+0x10>)
 800376e:	f000 fd0c 	bl	800418a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000a84 	.word	0x20000a84

0800377c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <DMA1_Channel2_IRQHandler+0x10>)
 8003782:	f000 fd02 	bl	800418a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000a24 	.word	0x20000a24

08003790 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003794:	4802      	ldr	r0, [pc, #8]	@ (80037a0 <DMA1_Channel3_IRQHandler+0x10>)
 8003796:	f000 fcf8 	bl	800418a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200007cc 	.word	0x200007cc

080037a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80037a8:	2020      	movs	r0, #32
 80037aa:	f000 ffd7 	bl	800475c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037b8:	4802      	ldr	r0, [pc, #8]	@ (80037c4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80037ba:	f003 f80d 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000238 	.word	0x20000238

080037c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037cc:	4803      	ldr	r0, [pc, #12]	@ (80037dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80037ce:	f003 f803 	bl	80067d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80037d2:	4803      	ldr	r0, [pc, #12]	@ (80037e0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80037d4:	f003 f800 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000238 	.word	0x20000238
 80037e0:	20000700 	.word	0x20000700

080037e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <TIM4_IRQHandler+0x10>)
 80037ea:	f002 fff5 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000049c 	.word	0x2000049c

080037f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <USART2_IRQHandler+0x10>)
 80037fe:	f004 ffaf 	bl	8008760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200008f8 	.word	0x200008f8

0800380c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003810:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003814:	f000 ffa2 	bl	800475c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003818:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800381c:	f000 ff9e 	bl	800475c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}

08003824 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003828:	4802      	ldr	r0, [pc, #8]	@ (8003834 <TIM5_IRQHandler+0x10>)
 800382a:	f002 ffd5 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000568 	.word	0x20000568

08003838 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800383c:	4802      	ldr	r0, [pc, #8]	@ (8003848 <TIM7_DAC_IRQHandler+0x10>)
 800383e:	f002 ffcb 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000634 	.word	0x20000634

0800384c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003850:	4802      	ldr	r0, [pc, #8]	@ (800385c <DMA2_Channel2_IRQHandler+0x10>)
 8003852:	f000 fc9a 	bl	800418a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200009c4 	.word	0x200009c4

08003860 <updateLED>:
 *	Constant:
 *		ledOn: (unsigned 16-bit integer array) Pulse that make respect completely LED on.
 *		ledOff: (unsigned 16-bit integer array) Pulse that make respect completely LED off.
 */

uint8_t updateLED(uint8_t* ledVal, TIM_HandleTypeDef* htim, uint32_t timCH){
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b09b      	sub	sp, #108	@ 0x6c
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]

	const uint16_t ledOn[8] = {72,72,72,72,72,72,72,72};
 800386c:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <updateLED+0x140>)
 800386e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t ledOff[8] = {34,34,34,34,34,34,34,34};
 8003878:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <updateLED+0x144>)
 800387a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800387e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Reset LED
	static uint16_t ledPayload[132];

	for (int i = 0; i < 3; i++){
 8003884:	2300      	movs	r3, #0
 8003886:	667b      	str	r3, [r7, #100]	@ 0x64
 8003888:	e076      	b.n	8003978 <updateLED+0x118>
		uint16_t ledBuff[24];
		switch(ledVal[i]) {
 800388a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d032      	beq.n	80038fc <updateLED+0x9c>
 8003896:	2b03      	cmp	r3, #3
 8003898:	dc46      	bgt.n	8003928 <updateLED+0xc8>
 800389a:	2b01      	cmp	r3, #1
 800389c:	d002      	beq.n	80038a4 <updateLED+0x44>
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d016      	beq.n	80038d0 <updateLED+0x70>
 80038a2:	e041      	b.n	8003928 <updateLED+0xc8>

		case 1:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 80038a4:	f107 0414 	add.w	r4, r7, #20
 80038a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOn, sizeof(ledOn));
 80038b2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80038b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 80038c0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80038c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 80038ce:	e041      	b.n	8003954 <updateLED+0xf4>

		case 2:
			(void)memcpy(&ledBuff[0], ledOn, sizeof(ledOn));
 80038d0:	f107 0414 	add.w	r4, r7, #20
 80038d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 80038de:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80038e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 80038ec:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80038f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80038f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 80038fa:	e02b      	b.n	8003954 <updateLED+0xf4>

		case 3:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 80038fc:	f107 0414 	add.w	r4, r7, #20
 8003900:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 800390a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800390e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOn, sizeof(ledOn));
 8003918:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800391c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003926:	e015      	b.n	8003954 <updateLED+0xf4>

		default:
			(void)memcpy(&ledBuff[0], ledOff, sizeof(ledOff));
 8003928:	f107 0414 	add.w	r4, r7, #20
 800392c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[8], ledOff, sizeof(ledOff));
 8003936:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800393a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800393e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			(void)memcpy(&ledBuff[16], ledOff, sizeof(ledOff));
 8003944:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003948:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800394c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800394e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			break;
 8003952:	bf00      	nop
		}

		(void)memcpy(&ledPayload[60+(i*24)], ledBuff, sizeof(ledBuff));
 8003954:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	333c      	adds	r3, #60	@ 0x3c
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <updateLED+0x148>)
 8003964:	4413      	add	r3, r2
 8003966:	f107 0114 	add.w	r1, r7, #20
 800396a:	2230      	movs	r2, #48	@ 0x30
 800396c:	4618      	mov	r0, r3
 800396e:	f006 fc67 	bl	800a240 <memcpy>
	for (int i = 0; i < 3; i++){
 8003972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003974:	3301      	adds	r3, #1
 8003976:	667b      	str	r3, [r7, #100]	@ 0x64
 8003978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397a:	2b02      	cmp	r3, #2
 800397c:	dd85      	ble.n	800388a <updateLED+0x2a>

	}

	(void)memset(ledPayload, 0, sizeof(uint16_t)*60);
 800397e:	2278      	movs	r2, #120	@ 0x78
 8003980:	2100      	movs	r1, #0
 8003982:	4809      	ldr	r0, [pc, #36]	@ (80039a8 <updateLED+0x148>)
 8003984:	f006 fc30 	bl	800a1e8 <memset>

	return HAL_TIM_PWM_Start_DMA(htim, timCH, ledPayload, 132);
 8003988:	2384      	movs	r3, #132	@ 0x84
 800398a:	4a07      	ldr	r2, [pc, #28]	@ (80039a8 <updateLED+0x148>)
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68b8      	ldr	r0, [r7, #8]
 8003990:	f002 fa28 	bl	8005de4 <HAL_TIM_PWM_Start_DMA>
 8003994:	4603      	mov	r3, r0

}
 8003996:	4618      	mov	r0, r3
 8003998:	376c      	adds	r7, #108	@ 0x6c
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}
 800399e:	bf00      	nop
 80039a0:	0800a274 	.word	0x0800a274
 80039a4:	0800a284 	.word	0x0800a284
 80039a8:	2000121c 	.word	0x2000121c

080039ac <HomeZ>:
 *		Timeout: (Unsigned 32-bit integer) blocking timeout if Z axis doesn't hit endstop.
 *
 *
 */

uint8_t HomeZ(){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0

	const uint32_t TimeoutConst = 15000;
 80039b2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80039b6:	60fb      	str	r3, [r7, #12]
	const uint32_t HomingSpeed = 3000;
 80039b8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80039bc:	60bb      	str	r3, [r7, #8]

	uint32_t Timeout = HAL_GetTick() + TimeoutConst;
 80039be:	f000 f8c3 	bl	8003b48 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	607b      	str	r3, [r7, #4]

	serviceMotor(HomingSpeed, 0);
 80039ca:	2100      	movs	r1, #0
 80039cc:	68b8      	ldr	r0, [r7, #8]
 80039ce:	f7ff facf 	bl	8002f70 <serviceMotor>

	while(HAL_GetTick() < Timeout){
 80039d2:	e00d      	b.n	80039f0 <HomeZ+0x44>
		if(getZStop() == 1){
 80039d4:	f7ff faf4 	bl	8002fc0 <getZStop>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d108      	bne.n	80039f0 <HomeZ+0x44>
			HAL_Delay(50);
 80039de:	2032      	movs	r0, #50	@ 0x32
 80039e0:	f000 f8be 	bl	8003b60 <HAL_Delay>
			serviceMotor(0, 0);
 80039e4:	2100      	movs	r1, #0
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7ff fac2 	bl	8002f70 <serviceMotor>
			return 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e006      	b.n	80039fe <HomeZ+0x52>
	while(HAL_GetTick() < Timeout){
 80039f0:	f000 f8aa 	bl	8003b48 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d8eb      	bhi.n	80039d4 <HomeZ+0x28>
		}

	}

//	serviceMotor(0, 0);
	return 1;
 80039fc:	2301      	movs	r3, #1

}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <SystemInit+0x20>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a12:	4a05      	ldr	r2, [pc, #20]	@ (8003a28 <SystemInit+0x20>)
 8003a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a2c:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a30:	f7ff ffea 	bl	8003a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a34:	480c      	ldr	r0, [pc, #48]	@ (8003a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a36:	490d      	ldr	r1, [pc, #52]	@ (8003a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a38:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <LoopForever+0xe>)
  movs r3, #0
 8003a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a3c:	e002      	b.n	8003a44 <LoopCopyDataInit>

08003a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a42:	3304      	adds	r3, #4

08003a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a48:	d3f9      	bcc.n	8003a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a78 <LoopForever+0x16>)
  movs r3, #0
 8003a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a50:	e001      	b.n	8003a56 <LoopFillZerobss>

08003a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a54:	3204      	adds	r2, #4

08003a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a58:	d3fb      	bcc.n	8003a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a5a:	f006 fbcd 	bl	800a1f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a5e:	f7fd fdf3 	bl	8001648 <main>

08003a62 <LoopForever>:

LoopForever:
    b LoopForever
 8003a62:	e7fe      	b.n	8003a62 <LoopForever>
  ldr   r0, =_estack
 8003a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a6c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003a70:	0800a2e4 	.word	0x0800a2e4
  ldr r2, =_sbss
 8003a74:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003a78:	20001328 	.word	0x20001328

08003a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a7c:	e7fe      	b.n	8003a7c <ADC1_2_IRQHandler>

08003a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a88:	2003      	movs	r0, #3
 8003a8a:	f000 f95b 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f000 f80e 	bl	8003ab0 <HAL_InitTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	71fb      	strb	r3, [r7, #7]
 8003a9e:	e001      	b.n	8003aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aa0:	f7ff fb42 	bl	8003128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aa4:	79fb      	ldrb	r3, [r7, #7]

}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003abc:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_InitTick+0x68>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d022      	beq.n	8003b0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ac4:	4b15      	ldr	r3, [pc, #84]	@ (8003b1c <HAL_InitTick+0x6c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <HAL_InitTick+0x68>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f966 	bl	8003daa <HAL_SYSTICK_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10f      	bne.n	8003b04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	d809      	bhi.n	8003afe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aea:	2200      	movs	r2, #0
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af2:	f000 f932 	bl	8003d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_InitTick+0x70>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e007      	b.n	8003b0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e004      	b.n	8003b0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e001      	b.n	8003b0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000214 	.word	0x20000214
 8003b1c:	2000020c 	.word	0x2000020c
 8003b20:	20000210 	.word	0x20000210

08003b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_IncTick+0x1c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_IncTick+0x20>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_IncTick+0x1c>)
 8003b34:	6013      	str	r3, [r2, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20001324 	.word	0x20001324
 8003b44:	20000214 	.word	0x20000214

08003b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	@ (8003b5c <HAL_GetTick+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20001324 	.word	0x20001324

08003b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff ffee 	bl	8003b48 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b78:	d004      	beq.n	8003b84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_Delay+0x40>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b84:	bf00      	nop
 8003b86:	f7ff ffdf 	bl	8003b48 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d8f7      	bhi.n	8003b86 <HAL_Delay+0x26>
  {
  }
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000214 	.word	0x20000214

08003ba4 <__NVIC_SetPriorityGrouping>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	@ (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	@ (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	@ (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	@ 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	210f      	movs	r1, #15
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff40 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff90 	bl	8003c98 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5f 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff33 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa4 	bl	8003d00 <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e08d      	b.n	8003ef2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_DMA_Init+0x138>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d80f      	bhi.n	8003e02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b45      	ldr	r3, [pc, #276]	@ (8003f00 <HAL_DMA_Init+0x13c>)
 8003dea:	4413      	add	r3, r2
 8003dec:	4a45      	ldr	r2, [pc, #276]	@ (8003f04 <HAL_DMA_Init+0x140>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	009a      	lsls	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a42      	ldr	r2, [pc, #264]	@ (8003f08 <HAL_DMA_Init+0x144>)
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e00:	e00e      	b.n	8003e20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b40      	ldr	r3, [pc, #256]	@ (8003f0c <HAL_DMA_Init+0x148>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f04 <HAL_DMA_Init+0x140>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f10 <HAL_DMA_Init+0x14c>)
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa76 	bl	8004364 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e80:	d102      	bne.n	8003e88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_DMA_Init+0x104>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d80c      	bhi.n	8003ec8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa96 	bl	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e008      	b.n	8003eda <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40020407 	.word	0x40020407
 8003f00:	bffdfff8 	.word	0xbffdfff8
 8003f04:	cccccccd 	.word	0xcccccccd
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	bffdfbf8 	.word	0xbffdfbf8
 8003f10:	40020400 	.word	0x40020400

08003f14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x20>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e066      	b.n	8004002 <HAL_DMA_Start_IT+0xee>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d155      	bne.n	8003ff4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f9bb 	bl	80042e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 020e 	orr.w	r2, r2, #14
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00f      	b.n	8003fac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 020a 	orr.w	r2, r2, #10
 8003faa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e005      	b.n	8004000 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d005      	beq.n	800402e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e037      	b.n	800409e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 020e 	bic.w	r2, r2, #14
 800403c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800404c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f003 021f 	and.w	r2, r3, #31
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800407a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004092:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800409c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d00d      	beq.n	80040f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	e047      	b.n	8004180 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020e 	bic.w	r2, r2, #14
 80040fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800411e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800413c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004154:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800415e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
    }
  }
  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2204      	movs	r2, #4
 80041ac:	409a      	lsls	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d026      	beq.n	8004204 <HAL_DMA_IRQHandler+0x7a>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d021      	beq.n	8004204 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f003 021f 	and.w	r2, r3, #31
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2104      	movs	r1, #4
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d071      	beq.n	80042de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004202:	e06c      	b.n	80042de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2202      	movs	r2, #2
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02e      	beq.n	8004276 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d029      	beq.n	8004276 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 020a 	bic.w	r2, r2, #10
 800423e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	f003 021f 	and.w	r2, r3, #31
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2102      	movs	r1, #2
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d038      	beq.n	80042de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004274:	e033      	b.n	80042de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2208      	movs	r2, #8
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02a      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d025      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 020e 	bic.w	r2, r2, #14
 80042a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
}
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004310:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b10      	cmp	r3, #16
 8004334:	d108      	bne.n	8004348 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004346:	e007      	b.n	8004358 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4b16      	ldr	r3, [pc, #88]	@ (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d802      	bhi.n	800437e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e001      	b.n	8004382 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004380:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3b08      	subs	r3, #8
 800438e:	4a12      	ldr	r2, [pc, #72]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	009a      	lsls	r2, r3, #2
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a0b      	ldr	r2, [pc, #44]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2201      	movs	r2, #1
 80043b8:	409a      	lsls	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40020407 	.word	0x40020407
 80043d0:	40020800 	.word	0x40020800
 80043d4:	40020820 	.word	0x40020820
 80043d8:	cccccccd 	.word	0xcccccccd
 80043dc:	40020880 	.word	0x40020880

080043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004402:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	1000823f 	.word	0x1000823f
 8004424:	40020940 	.word	0x40020940

08004428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004436:	e15a      	b.n	80046ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2101      	movs	r1, #1
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 814c 	beq.w	80046e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d005      	beq.n	8004468 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004464:	2b02      	cmp	r3, #2
 8004466:	d130      	bne.n	80044ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800449e:	2201      	movs	r2, #1
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0201 	and.w	r2, r3, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d017      	beq.n	8004506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d123      	bne.n	800455a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	08da      	lsrs	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3208      	adds	r2, #8
 800451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	220f      	movs	r2, #15
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	08da      	lsrs	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3208      	adds	r2, #8
 8004554:	6939      	ldr	r1, [r7, #16]
 8004556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0203 	and.w	r2, r3, #3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80a6 	beq.w	80046e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459c:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <HAL_GPIO_Init+0x2e4>)
 800459e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a0:	4a5a      	ldr	r2, [pc, #360]	@ (800470c <HAL_GPIO_Init+0x2e4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80045a8:	4b58      	ldr	r3, [pc, #352]	@ (800470c <HAL_GPIO_Init+0x2e4>)
 80045aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b4:	4a56      	ldr	r2, [pc, #344]	@ (8004710 <HAL_GPIO_Init+0x2e8>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	220f      	movs	r2, #15
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045de:	d01f      	beq.n	8004620 <HAL_GPIO_Init+0x1f8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004714 <HAL_GPIO_Init+0x2ec>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d019      	beq.n	800461c <HAL_GPIO_Init+0x1f4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_GPIO_Init+0x2f0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <HAL_GPIO_Init+0x1f0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a4a      	ldr	r2, [pc, #296]	@ (800471c <HAL_GPIO_Init+0x2f4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00d      	beq.n	8004614 <HAL_GPIO_Init+0x1ec>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a49      	ldr	r2, [pc, #292]	@ (8004720 <HAL_GPIO_Init+0x2f8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <HAL_GPIO_Init+0x1e8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a48      	ldr	r2, [pc, #288]	@ (8004724 <HAL_GPIO_Init+0x2fc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_GPIO_Init+0x1e4>
 8004608:	2305      	movs	r3, #5
 800460a:	e00a      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 800460c:	2306      	movs	r3, #6
 800460e:	e008      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 8004610:	2304      	movs	r3, #4
 8004612:	e006      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 8004614:	2303      	movs	r3, #3
 8004616:	e004      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 8004618:	2302      	movs	r3, #2
 800461a:	e002      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_GPIO_Init+0x1fa>
 8004620:	2300      	movs	r3, #0
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	f002 0203 	and.w	r2, r2, #3
 8004628:	0092      	lsls	r2, r2, #2
 800462a:	4093      	lsls	r3, r2
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004632:	4937      	ldr	r1, [pc, #220]	@ (8004710 <HAL_GPIO_Init+0x2e8>)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	3302      	adds	r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004640:	4b39      	ldr	r3, [pc, #228]	@ (8004728 <HAL_GPIO_Init+0x300>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004664:	4a30      	ldr	r2, [pc, #192]	@ (8004728 <HAL_GPIO_Init+0x300>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800466a:	4b2f      	ldr	r3, [pc, #188]	@ (8004728 <HAL_GPIO_Init+0x300>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800468e:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <HAL_GPIO_Init+0x300>)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_GPIO_Init+0x300>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	43db      	mvns	r3, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HAL_GPIO_Init+0x300>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046be:	4b1a      	ldr	r3, [pc, #104]	@ (8004728 <HAL_GPIO_Init+0x300>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046e2:	4a11      	ldr	r2, [pc, #68]	@ (8004728 <HAL_GPIO_Init+0x300>)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3301      	adds	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f47f ae9d 	bne.w	8004438 <HAL_GPIO_Init+0x10>
  }
}
 80046fe:	bf00      	nop
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40021000 	.word	0x40021000
 8004710:	40010000 	.word	0x40010000
 8004714:	48000400 	.word	0x48000400
 8004718:	48000800 	.word	0x48000800
 800471c:	48000c00 	.word	0x48000c00
 8004720:	48001000 	.word	0x48001000
 8004724:	48001400 	.word	0x48001400
 8004728:	40010400 	.word	0x40010400

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004748:	e002      	b.n	8004750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800474a:	887a      	ldrh	r2, [r7, #2]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004766:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004772:	4a05      	ldr	r2, [pc, #20]	@ (8004788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fc2c 	bl	8002fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40010400 	.word	0x40010400

0800478c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d141      	bne.n	800481e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800479a:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a6:	d131      	bne.n	800480c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a8:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ae:	4a46      	ldr	r2, [pc, #280]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b8:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047c0:	4a41      	ldr	r2, [pc, #260]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047c8:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2232      	movs	r2, #50	@ 0x32
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	4a3f      	ldr	r2, [pc, #252]	@ (80048d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	0c9b      	lsrs	r3, r3, #18
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047de:	e002      	b.n	80047e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e6:	4b38      	ldr	r3, [pc, #224]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d102      	bne.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f2      	bne.n	80047e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047fa:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004806:	d158      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e057      	b.n	80048bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800480c:	4b2e      	ldr	r3, [pc, #184]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004812:	4a2d      	ldr	r2, [pc, #180]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004818:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800481c:	e04d      	b.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d141      	bne.n	80048aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004826:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004832:	d131      	bne.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004834:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800483a:	4a23      	ldr	r2, [pc, #140]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004844:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004854:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2232      	movs	r2, #50	@ 0x32
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	0c9b      	lsrs	r3, r3, #18
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800486a:	e002      	b.n	8004872 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3b01      	subs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d102      	bne.n	8004886 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f2      	bne.n	800486c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004892:	d112      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e011      	b.n	80048bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489e:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048a8:	e007      	b.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048b2:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40007000 	.word	0x40007000
 80048cc:	2000020c 	.word	0x2000020c
 80048d0:	431bde83 	.word	0x431bde83

080048d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048d8:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a04      	ldr	r2, [pc, #16]	@ (80048f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048e2:	6093      	str	r3, [r2, #8]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40007000 	.word	0x40007000

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e2fe      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d075      	beq.n	80049fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004912:	4b97      	ldr	r3, [pc, #604]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491c:	4b94      	ldr	r3, [pc, #592]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d102      	bne.n	8004932 <HAL_RCC_OscConfig+0x3e>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d002      	beq.n	8004938 <HAL_RCC_OscConfig+0x44>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10b      	bne.n	8004950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	4b8d      	ldr	r3, [pc, #564]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d05b      	beq.n	80049fc <HAL_RCC_OscConfig+0x108>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d157      	bne.n	80049fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e2d9      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d106      	bne.n	8004968 <HAL_RCC_OscConfig+0x74>
 800495a:	4b85      	ldr	r3, [pc, #532]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a84      	ldr	r2, [pc, #528]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e01d      	b.n	80049a4 <HAL_RCC_OscConfig+0xb0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0x98>
 8004972:	4b7f      	ldr	r3, [pc, #508]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7e      	ldr	r2, [pc, #504]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7b      	ldr	r2, [pc, #492]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xb0>
 800498c:	4b78      	ldr	r3, [pc, #480]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a77      	ldr	r2, [pc, #476]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b75      	ldr	r3, [pc, #468]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a74      	ldr	r2, [pc, #464]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7ff f8cc 	bl	8003b48 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7ff f8c8 	bl	8003b48 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e29e      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0xc0>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7ff f8b8 	bl	8003b48 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7ff f8b4 	bl	8003b48 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	@ 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e28a      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ee:	4b60      	ldr	r3, [pc, #384]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0xe8>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d075      	beq.n	8004af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0a:	4b59      	ldr	r3, [pc, #356]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a14:	4b56      	ldr	r3, [pc, #344]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_OscConfig+0x136>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d002      	beq.n	8004a30 <HAL_RCC_OscConfig+0x13c>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d11f      	bne.n	8004a70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a30:	4b4f      	ldr	r3, [pc, #316]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x154>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e25d      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b49      	ldr	r3, [pc, #292]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	4946      	ldr	r1, [pc, #280]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a5c:	4b45      	ldr	r3, [pc, #276]	@ (8004b74 <HAL_RCC_OscConfig+0x280>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff f825 	bl	8003ab0 <HAL_InitTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d043      	beq.n	8004af4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e249      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d023      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b3d      	ldr	r3, [pc, #244]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7ff f860 	bl	8003b48 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7ff f85c 	bl	8003b48 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e232      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9e:	4b34      	ldr	r3, [pc, #208]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	492d      	ldr	r1, [pc, #180]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
 8004abe:	e01a      	b.n	8004af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7ff f83c 	bl	8003b48 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7ff f838 	bl	8003b48 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e20e      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae6:	4b22      	ldr	r3, [pc, #136]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1e0>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d041      	beq.n	8004b86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7ff f815 	bl	8003b48 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b22:	f7ff f811 	bl	8003b48 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e1e7      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b34:	4b0e      	ldr	r3, [pc, #56]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <HAL_RCC_OscConfig+0x22e>
 8004b42:	e020      	b.n	8004b86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4a:	4a09      	ldr	r2, [pc, #36]	@ (8004b70 <HAL_RCC_OscConfig+0x27c>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fe fff8 	bl	8003b48 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b5a:	e00d      	b.n	8004b78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fe fff4 	bl	8003b48 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d906      	bls.n	8004b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1ca      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b78:	4b8c      	ldr	r3, [pc, #560]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ea      	bne.n	8004b5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80a6 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b94:	2300      	movs	r3, #0
 8004b96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b98:	4b84      	ldr	r3, [pc, #528]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2b4>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x2b6>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bae:	4b7f      	ldr	r3, [pc, #508]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bba:	4b7c      	ldr	r3, [pc, #496]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bca:	4b79      	ldr	r3, [pc, #484]	@ (8004db0 <HAL_RCC_OscConfig+0x4bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d118      	bne.n	8004c08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd6:	4b76      	ldr	r3, [pc, #472]	@ (8004db0 <HAL_RCC_OscConfig+0x4bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a75      	ldr	r2, [pc, #468]	@ (8004db0 <HAL_RCC_OscConfig+0x4bc>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fe ffb1 	bl	8003b48 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fe ffad 	bl	8003b48 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e183      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8004db0 <HAL_RCC_OscConfig+0x4bc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d108      	bne.n	8004c22 <HAL_RCC_OscConfig+0x32e>
 8004c10:	4b66      	ldr	r3, [pc, #408]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	4a65      	ldr	r2, [pc, #404]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c20:	e024      	b.n	8004c6c <HAL_RCC_OscConfig+0x378>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d110      	bne.n	8004c4c <HAL_RCC_OscConfig+0x358>
 8004c2a:	4b60      	ldr	r3, [pc, #384]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	4a5e      	ldr	r2, [pc, #376]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c40:	4a5a      	ldr	r2, [pc, #360]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c4a:	e00f      	b.n	8004c6c <HAL_RCC_OscConfig+0x378>
 8004c4c:	4b57      	ldr	r3, [pc, #348]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	4a56      	ldr	r2, [pc, #344]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c5c:	4b53      	ldr	r3, [pc, #332]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	4a52      	ldr	r2, [pc, #328]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fe ff68 	bl	8003b48 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe ff64 	bl	8003b48 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e138      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c92:	4b46      	ldr	r3, [pc, #280]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ed      	beq.n	8004c7c <HAL_RCC_OscConfig+0x388>
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fe ff51 	bl	8003b48 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004caa:	f7fe ff4d 	bl	8003b48 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e121      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ed      	bne.n	8004caa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d105      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd4:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd8:	4a34      	ldr	r2, [pc, #208]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01c      	beq.n	8004d2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fe ff20 	bl	8003b48 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d0c:	f7fe ff1c 	bl	8003b48 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0f2      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d1e:	4b23      	ldr	r3, [pc, #140]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <HAL_RCC_OscConfig+0x418>
 8004d2c:	e01b      	b.n	8004d66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fe ff03 	bl	8003b48 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d46:	f7fe feff 	bl	8003b48 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e0d5      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d58:	4b14      	ldr	r3, [pc, #80]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ef      	bne.n	8004d46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80c9 	beq.w	8004f02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d70:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	f000 8083 	beq.w	8004e84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d15e      	bne.n	8004e44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <HAL_RCC_OscConfig+0x4b8>)
 8004d8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fe fed9 	bl	8003b48 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d98:	e00c      	b.n	8004db4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fe fed5 	bl	8003b48 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d905      	bls.n	8004db4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0ab      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db4:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ec      	bne.n	8004d9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc0:	4b52      	ldr	r3, [pc, #328]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	4b52      	ldr	r3, [pc, #328]	@ (8004f10 <HAL_RCC_OscConfig+0x61c>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6a11      	ldr	r1, [r2, #32]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004dda:	0212      	lsls	r2, r2, #8
 8004ddc:	4311      	orrs	r1, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0552      	lsls	r2, r2, #21
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dee:	0852      	lsrs	r2, r2, #1
 8004df0:	3a01      	subs	r2, #1
 8004df2:	0652      	lsls	r2, r2, #25
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dfa:	06d2      	lsls	r2, r2, #27
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	4943      	ldr	r1, [pc, #268]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a40      	ldr	r2, [pc, #256]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e10:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fe94 	bl	8003b48 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fe fe90 	bl	8003b48 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e066      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	4b35      	ldr	r3, [pc, #212]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0x530>
 8004e42:	e05e      	b.n	8004f02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e44:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a30      	ldr	r2, [pc, #192]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fe fe7a 	bl	8003b48 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe fe76 	bl	8003b48 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e04c      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6a:	4b28      	ldr	r3, [pc, #160]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e76:	4b25      	ldr	r3, [pc, #148]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	4924      	ldr	r1, [pc, #144]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e7c:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <HAL_RCC_OscConfig+0x620>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60cb      	str	r3, [r1, #12]
 8004e82:	e03e      	b.n	8004f02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e039      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e90:	4b1e      	ldr	r3, [pc, #120]	@ (8004f0c <HAL_RCC_OscConfig+0x618>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d12c      	bne.n	8004efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d123      	bne.n	8004efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d11b      	bne.n	8004efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d113      	bne.n	8004efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d109      	bne.n	8004efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d001      	beq.n	8004f02 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	019f800c 	.word	0x019f800c
 8004f14:	feeefffc 	.word	0xfeeefffc

08004f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e11e      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b91      	ldr	r3, [pc, #580]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d910      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b8e      	ldr	r3, [pc, #568]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 020f 	bic.w	r2, r3, #15
 8004f46:	498c      	ldr	r1, [pc, #560]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b8a      	ldr	r3, [pc, #552]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e106      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d073      	beq.n	8005054 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d129      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f74:	4b81      	ldr	r3, [pc, #516]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0f4      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f84:	f000 f99e 	bl	80052c4 <RCC_GetSysClockFreqFromPLLSource>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4a7c      	ldr	r2, [pc, #496]	@ (8005180 <HAL_RCC_ClockConfig+0x268>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d93f      	bls.n	8005012 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f92:	4b7a      	ldr	r3, [pc, #488]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d033      	beq.n	8005012 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12f      	bne.n	8005012 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fb2:	4b72      	ldr	r3, [pc, #456]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fba:	4a70      	ldr	r2, [pc, #448]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e024      	b.n	8005012 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0c6      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe0:	4b66      	ldr	r3, [pc, #408]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0be      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ff0:	f000 f8ce 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4a61      	ldr	r2, [pc, #388]	@ (8005180 <HAL_RCC_ClockConfig+0x268>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d909      	bls.n	8005012 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005006:	4a5d      	ldr	r2, [pc, #372]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b5a      	ldr	r3, [pc, #360]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4957      	ldr	r1, [pc, #348]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005024:	f7fe fd90 	bl	8003b48 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fe fd8c 	bl	8003b48 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e095      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b4e      	ldr	r3, [pc, #312]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d023      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800506c:	4b43      	ldr	r3, [pc, #268]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4a42      	ldr	r2, [pc, #264]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005076:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005084:	4b3d      	ldr	r3, [pc, #244]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800508c:	4a3b      	ldr	r2, [pc, #236]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 800508e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b39      	ldr	r3, [pc, #228]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4936      	ldr	r1, [pc, #216]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
 80050a6:	e008      	b.n	80050ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b80      	cmp	r3, #128	@ 0x80
 80050ac:	d105      	bne.n	80050ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050ae:	4b33      	ldr	r3, [pc, #204]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a32      	ldr	r2, [pc, #200]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 80050b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d21d      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 020f 	bic.w	r2, r3, #15
 80050d0:	4929      	ldr	r1, [pc, #164]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050d8:	f7fe fd36 	bl	8003b48 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fe fd32 	bl	8003b48 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e03b      	b.n	800516e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b20      	ldr	r3, [pc, #128]	@ (8005178 <HAL_RCC_ClockConfig+0x260>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d1ed      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4917      	ldr	r1, [pc, #92]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512e:	4b13      	ldr	r3, [pc, #76]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490f      	ldr	r1, [pc, #60]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005142:	f000 f825 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <HAL_RCC_ClockConfig+0x264>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490c      	ldr	r1, [pc, #48]	@ (8005184 <HAL_RCC_ClockConfig+0x26c>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <HAL_RCC_ClockConfig+0x270>)
 8005160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005162:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <HAL_RCC_ClockConfig+0x274>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fca2 	bl	8003ab0 <HAL_InitTick>
 800516c:	4603      	mov	r3, r0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40022000 	.word	0x40022000
 800517c:	40021000 	.word	0x40021000
 8005180:	04c4b400 	.word	0x04c4b400
 8005184:	0800a294 	.word	0x0800a294
 8005188:	2000020c 	.word	0x2000020c
 800518c:	20000210 	.word	0x20000210

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005196:	4b2c      	ldr	r3, [pc, #176]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d102      	bne.n	80051a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051a2:	4b2a      	ldr	r3, [pc, #168]	@ (800524c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e047      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051a8:	4b27      	ldr	r3, [pc, #156]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d102      	bne.n	80051ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051b4:	4b26      	ldr	r3, [pc, #152]	@ (8005250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e03e      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ba:	4b23      	ldr	r3, [pc, #140]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	d136      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	3301      	adds	r3, #1
 80051dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d10c      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ee:	68d2      	ldr	r2, [r2, #12]
 80051f0:	0a12      	lsrs	r2, r2, #8
 80051f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	617b      	str	r3, [r7, #20]
      break;
 80051fc:	e00c      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051fe:	4a13      	ldr	r2, [pc, #76]	@ (800524c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	4a10      	ldr	r2, [pc, #64]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005208:	68d2      	ldr	r2, [r2, #12]
 800520a:	0a12      	lsrs	r2, r2, #8
 800520c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
      break;
 8005216:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0e5b      	lsrs	r3, r3, #25
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	3301      	adds	r3, #1
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e001      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005238:	693b      	ldr	r3, [r7, #16]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	00f42400 	.word	0x00f42400
 8005250:	016e3600 	.word	0x016e3600

08005254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005258:	4b03      	ldr	r3, [pc, #12]	@ (8005268 <HAL_RCC_GetHCLKFreq+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	2000020c 	.word	0x2000020c

0800526c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005270:	f7ff fff0 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4904      	ldr	r1, [pc, #16]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	0800a2a4 	.word	0x0800a2a4

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800529c:	f7ff ffda 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0adb      	lsrs	r3, r3, #11
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4904      	ldr	r1, [pc, #16]	@ (80052c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	0800a2a4 	.word	0x0800a2a4

080052c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d10c      	bne.n	8005302 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e8:	4a17      	ldr	r2, [pc, #92]	@ (8005348 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f2:	68d2      	ldr	r2, [r2, #12]
 80052f4:	0a12      	lsrs	r2, r2, #8
 80052f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	617b      	str	r3, [r7, #20]
    break;
 8005300:	e00c      	b.n	800531c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005302:	4a12      	ldr	r2, [pc, #72]	@ (800534c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	4a0e      	ldr	r2, [pc, #56]	@ (8005344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	0a12      	lsrs	r2, r2, #8
 8005310:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
    break;
 800531a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800531c:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0e5b      	lsrs	r3, r3, #25
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	3301      	adds	r3, #1
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005336:	687b      	ldr	r3, [r7, #4]
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40021000 	.word	0x40021000
 8005348:	016e3600 	.word	0x016e3600
 800534c:	00f42400 	.word	0x00f42400

08005350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005358:	2300      	movs	r3, #0
 800535a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800535c:	2300      	movs	r3, #0
 800535e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8098 	beq.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005372:	4b43      	ldr	r3, [pc, #268]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	4b40      	ldr	r3, [pc, #256]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	4a3f      	ldr	r2, [pc, #252]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005388:	6593      	str	r3, [r2, #88]	@ 0x58
 800538a:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005396:	2301      	movs	r3, #1
 8005398:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800539a:	4b3a      	ldr	r3, [pc, #232]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a39      	ldr	r2, [pc, #228]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053a6:	f7fe fbcf 	bl	8003b48 <HAL_GetTick>
 80053aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ac:	e009      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ae:	f7fe fbcb 	bl	8003b48 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d902      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	74fb      	strb	r3, [r7, #19]
        break;
 80053c0:	e005      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c2:	4b30      	ldr	r3, [pc, #192]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ef      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d159      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01e      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d019      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053f0:	4b23      	ldr	r3, [pc, #140]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053fc:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	4a1f      	ldr	r2, [pc, #124]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800540c:	4b1c      	ldr	r3, [pc, #112]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800541c:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d016      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fe fb8b 	bl	8003b48 <HAL_GetTick>
 8005432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005434:	e00b      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fe fb87 	bl	8003b48 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d902      	bls.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	74fb      	strb	r3, [r7, #19]
            break;
 800544c:	e006      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ec      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	4903      	ldr	r1, [pc, #12]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005478:	e008      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	74bb      	strb	r3, [r7, #18]
 800547e:	e005      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005480:	40021000 	.word	0x40021000
 8005484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800548c:	7c7b      	ldrb	r3, [r7, #17]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005492:	4ba7      	ldr	r3, [pc, #668]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	4aa6      	ldr	r2, [pc, #664]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054aa:	4ba1      	ldr	r3, [pc, #644]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	f023 0203 	bic.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	499d      	ldr	r1, [pc, #628]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054cc:	4b98      	ldr	r3, [pc, #608]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f023 020c 	bic.w	r2, r3, #12
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	4995      	ldr	r1, [pc, #596]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ee:	4b90      	ldr	r3, [pc, #576]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	498c      	ldr	r1, [pc, #560]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005510:	4b87      	ldr	r3, [pc, #540]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4984      	ldr	r1, [pc, #528]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005532:	4b7f      	ldr	r3, [pc, #508]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	497b      	ldr	r1, [pc, #492]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005554:	4b76      	ldr	r3, [pc, #472]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4973      	ldr	r1, [pc, #460]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005576:	4b6e      	ldr	r3, [pc, #440]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	496a      	ldr	r1, [pc, #424]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005598:	4b65      	ldr	r3, [pc, #404]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4962      	ldr	r1, [pc, #392]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	4959      	ldr	r1, [pc, #356]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055dc:	4b54      	ldr	r3, [pc, #336]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e2:	f023 0203 	bic.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	4951      	ldr	r1, [pc, #324]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005604:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	4948      	ldr	r1, [pc, #288]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005620:	4b43      	ldr	r3, [pc, #268]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	4940      	ldr	r1, [pc, #256]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005640:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a3a      	ldr	r2, [pc, #232]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005658:	4b35      	ldr	r3, [pc, #212]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	4932      	ldr	r1, [pc, #200]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005690:	4b27      	ldr	r3, [pc, #156]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	4924      	ldr	r1, [pc, #144]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d6:	4916      	ldr	r1, [pc, #88]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a10      	ldr	r2, [pc, #64]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d019      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	4908      	ldr	r1, [pc, #32]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800571e:	d109      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b03      	ldr	r3, [pc, #12]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a02      	ldr	r2, [pc, #8]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005740:	4b29      	ldr	r3, [pc, #164]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005746:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	4926      	ldr	r1, [pc, #152]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005760:	4b21      	ldr	r3, [pc, #132]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a20      	ldr	r2, [pc, #128]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005786:	4918      	ldr	r1, [pc, #96]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d105      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005798:	4b13      	ldr	r3, [pc, #76]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057b0:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057be:	490a      	ldr	r1, [pc, #40]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ce:	d105      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000

080057ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e054      	b.n	80058a8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d111      	bne.n	800582e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f002 faac 	bl	8007d70 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a23      	ldr	r2, [pc, #140]	@ (80058b0 <HAL_TIM_Base_Init+0xc4>)
 8005824:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f001 fdf5 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08003171 	.word	0x08003171

080058b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d001      	beq.n	80058cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04c      	b.n	8005966 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a26      	ldr	r2, [pc, #152]	@ (8005974 <HAL_TIM_Base_Start+0xc0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <HAL_TIM_Base_Start+0xc4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a21      	ldr	r2, [pc, #132]	@ (800597c <HAL_TIM_Base_Start+0xc8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1f      	ldr	r2, [pc, #124]	@ (8005980 <HAL_TIM_Base_Start+0xcc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <HAL_TIM_Base_Start+0xd0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <HAL_TIM_Base_Start+0xd4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <HAL_TIM_Base_Start+0xd8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d115      	bne.n	8005950 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <HAL_TIM_Base_Start+0xdc>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d015      	beq.n	8005962 <HAL_TIM_Base_Start+0xae>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593c:	d011      	beq.n	8005962 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e008      	b.n	8005962 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40014000 	.word	0x40014000
 800598c:	40015000 	.word	0x40015000
 8005990:	00010007 	.word	0x00010007

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e054      	b.n	8005a56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a26      	ldr	r2, [pc, #152]	@ (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d6:	d01d      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	@ (8005a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a70 <HAL_TIM_Base_Start_IT+0xdc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005a74 <HAL_TIM_Base_Start_IT+0xe0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	@ (8005a78 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x80>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_TIM_Base_Start_IT+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d115      	bne.n	8005a40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	4b19      	ldr	r3, [pc, #100]	@ (8005a80 <HAL_TIM_Base_Start_IT+0xec>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d015      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d011      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e008      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e000      	b.n	8005a54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40015000 	.word	0x40015000
 8005a80:	00010007 	.word	0x00010007

08005a84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10f      	bne.n	8005acc <HAL_TIM_Base_Stop_IT+0x48>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_Base_Stop_IT+0x48>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e054      	b.n	8005ba0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d111      	bne.n	8005b26 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f002 f930 	bl	8007d70 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a23      	ldr	r2, [pc, #140]	@ (8005ba8 <HAL_TIM_PWM_Init+0xc4>)
 8005b1c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f001 fc79 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	08005bad 	.word	0x08005bad

08005bac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <HAL_TIM_PWM_Start+0x24>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e03c      	b.n	8005c5e <HAL_TIM_PWM_Start+0x9e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d109      	bne.n	8005bfe <HAL_TIM_PWM_Start+0x3e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e02f      	b.n	8005c5e <HAL_TIM_PWM_Start+0x9e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d109      	bne.n	8005c18 <HAL_TIM_PWM_Start+0x58>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e022      	b.n	8005c5e <HAL_TIM_PWM_Start+0x9e>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b0c      	cmp	r3, #12
 8005c1c:	d109      	bne.n	8005c32 <HAL_TIM_PWM_Start+0x72>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	bf14      	ite	ne
 8005c2a:	2301      	movne	r3, #1
 8005c2c:	2300      	moveq	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e015      	b.n	8005c5e <HAL_TIM_PWM_Start+0x9e>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d109      	bne.n	8005c4c <HAL_TIM_PWM_Start+0x8c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	e008      	b.n	8005c5e <HAL_TIM_PWM_Start+0x9e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	bf14      	ite	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	2300      	moveq	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0a6      	b.n	8005db4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xb6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c74:	e023      	b.n	8005cbe <HAL_TIM_PWM_Start+0xfe>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xc6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c84:	e01b      	b.n	8005cbe <HAL_TIM_PWM_Start+0xfe>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c94:	e013      	b.n	8005cbe <HAL_TIM_PWM_Start+0xfe>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0xe6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ca4:	e00b      	b.n	8005cbe <HAL_TIM_PWM_Start+0xfe>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xf6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb4:	e003      	b.n	8005cbe <HAL_TIM_PWM_Start+0xfe>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f002 f82c 	bl	8007d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8005dbc <HAL_TIM_PWM_Start+0x1fc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x148>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a39      	ldr	r2, [pc, #228]	@ (8005dc0 <HAL_TIM_PWM_Start+0x200>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x148>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a37      	ldr	r2, [pc, #220]	@ (8005dc4 <HAL_TIM_PWM_Start+0x204>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x148>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a36      	ldr	r2, [pc, #216]	@ (8005dc8 <HAL_TIM_PWM_Start+0x208>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x148>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	@ (8005dcc <HAL_TIM_PWM_Start+0x20c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_TIM_PWM_Start+0x148>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <HAL_TIM_PWM_Start+0x210>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_PWM_Start+0x14c>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_TIM_PWM_Start+0x14e>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a25      	ldr	r2, [pc, #148]	@ (8005dbc <HAL_TIM_PWM_Start+0x1fc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d34:	d01d      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a26      	ldr	r2, [pc, #152]	@ (8005dd4 <HAL_TIM_PWM_Start+0x214>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a24      	ldr	r2, [pc, #144]	@ (8005dd8 <HAL_TIM_PWM_Start+0x218>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a23      	ldr	r2, [pc, #140]	@ (8005ddc <HAL_TIM_PWM_Start+0x21c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a19      	ldr	r2, [pc, #100]	@ (8005dc0 <HAL_TIM_PWM_Start+0x200>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a18      	ldr	r2, [pc, #96]	@ (8005dc4 <HAL_TIM_PWM_Start+0x204>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIM_PWM_Start+0x1b2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIM_PWM_Start+0x210>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d115      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <HAL_TIM_PWM_Start+0x220>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b06      	cmp	r3, #6
 8005d82:	d015      	beq.n	8005db0 <HAL_TIM_PWM_Start+0x1f0>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8a:	d011      	beq.n	8005db0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	e008      	b.n	8005db0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e000      	b.n	8005db2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800
 8005dd0:	40015000 	.word	0x40015000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	00010007 	.word	0x00010007

08005de4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e03c      	b.n	8005e8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start_DMA+0x46>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e02f      	b.n	8005e8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start_DMA+0x60>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e022      	b.n	8005e8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b0c      	cmp	r3, #12
 8005e48:	d109      	bne.n	8005e5e <HAL_TIM_PWM_Start_DMA+0x7a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	e015      	b.n	8005e8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d109      	bne.n	8005e78 <HAL_TIM_PWM_Start_DMA+0x94>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e008      	b.n	8005e8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e1b5      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_TIM_PWM_Start_DMA+0xc8>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e03c      	b.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x142>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d109      	bne.n	8005ec6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e02f      	b.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x142>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d109      	bne.n	8005ee0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e022      	b.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x142>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d109      	bne.n	8005efa <HAL_TIM_PWM_Start_DMA+0x116>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	e015      	b.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x142>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d109      	bne.n	8005f14 <HAL_TIM_PWM_Start_DMA+0x130>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_PWM_Start_DMA+0x142>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d034      	beq.n	8005f94 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_TIM_PWM_Start_DMA+0x152>
 8005f30:	887b      	ldrh	r3, [r7, #2]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e161      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x166>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f48:	e026      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x176>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f58:	e01e      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x186>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f68:	e016      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b0c      	cmp	r3, #12
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x196>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f78:	e00e      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	e006      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f92:	e001      	b.n	8005f98 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e132      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	f200 80ae 	bhi.w	80060fc <HAL_TIM_PWM_Start_DMA+0x318>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	080060fd 	.word	0x080060fd
 8005fb0:	080060fd 	.word	0x080060fd
 8005fb4:	080060fd 	.word	0x080060fd
 8005fb8:	08006025 	.word	0x08006025
 8005fbc:	080060fd 	.word	0x080060fd
 8005fc0:	080060fd 	.word	0x080060fd
 8005fc4:	080060fd 	.word	0x080060fd
 8005fc8:	0800606d 	.word	0x0800606d
 8005fcc:	080060fd 	.word	0x080060fd
 8005fd0:	080060fd 	.word	0x080060fd
 8005fd4:	080060fd 	.word	0x080060fd
 8005fd8:	080060b5 	.word	0x080060b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	4a89      	ldr	r2, [pc, #548]	@ (8006208 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	4a88      	ldr	r2, [pc, #544]	@ (800620c <HAL_TIM_PWM_Start_DMA+0x428>)
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	4a87      	ldr	r2, [pc, #540]	@ (8006210 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005ff2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3334      	adds	r3, #52	@ 0x34
 8006000:	461a      	mov	r2, r3
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	f7fd ff86 	bl	8003f14 <HAL_DMA_Start_IT>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0f5      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006020:	60da      	str	r2, [r3, #12]
      break;
 8006022:	e06e      	b.n	8006102 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	4a77      	ldr	r2, [pc, #476]	@ (8006208 <HAL_TIM_PWM_Start_DMA+0x424>)
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	4a76      	ldr	r2, [pc, #472]	@ (800620c <HAL_TIM_PWM_Start_DMA+0x428>)
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	4a75      	ldr	r2, [pc, #468]	@ (8006210 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800603a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3338      	adds	r3, #56	@ 0x38
 8006048:	461a      	mov	r2, r3
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	f7fd ff62 	bl	8003f14 <HAL_DMA_Start_IT>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0d1      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006068:	60da      	str	r2, [r3, #12]
      break;
 800606a:	e04a      	b.n	8006102 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	4a65      	ldr	r2, [pc, #404]	@ (8006208 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	4a64      	ldr	r2, [pc, #400]	@ (800620c <HAL_TIM_PWM_Start_DMA+0x428>)
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	4a63      	ldr	r2, [pc, #396]	@ (8006210 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	333c      	adds	r3, #60	@ 0x3c
 8006090:	461a      	mov	r2, r3
 8006092:	887b      	ldrh	r3, [r7, #2]
 8006094:	f7fd ff3e 	bl	8003f14 <HAL_DMA_Start_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e0ad      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b0:	60da      	str	r2, [r3, #12]
      break;
 80060b2:	e026      	b.n	8006102 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	4a53      	ldr	r2, [pc, #332]	@ (8006208 <HAL_TIM_PWM_Start_DMA+0x424>)
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	4a52      	ldr	r2, [pc, #328]	@ (800620c <HAL_TIM_PWM_Start_DMA+0x428>)
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	4a51      	ldr	r2, [pc, #324]	@ (8006210 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80060ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3340      	adds	r3, #64	@ 0x40
 80060d8:	461a      	mov	r2, r3
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	f7fd ff1a 	bl	8003f14 <HAL_DMA_Start_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e089      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060f8:	60da      	str	r2, [r3, #12]
      break;
 80060fa:	e002      	b.n	8006102 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	bf00      	nop
  }

  if (status == HAL_OK)
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d179      	bne.n	80061fc <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fe07 	bl	8007d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3e      	ldr	r2, [pc, #248]	@ (8006214 <HAL_TIM_PWM_Start_DMA+0x430>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3c      	ldr	r2, [pc, #240]	@ (8006218 <HAL_TIM_PWM_Start_DMA+0x434>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIM_PWM_Start_DMA+0x36e>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3b      	ldr	r2, [pc, #236]	@ (800621c <HAL_TIM_PWM_Start_DMA+0x438>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a39      	ldr	r2, [pc, #228]	@ (8006220 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIM_PWM_Start_DMA+0x36e>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a38      	ldr	r2, [pc, #224]	@ (8006224 <HAL_TIM_PWM_Start_DMA+0x440>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a36      	ldr	r2, [pc, #216]	@ (8006228 <HAL_TIM_PWM_Start_DMA+0x444>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_Start_DMA+0x372>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <HAL_TIM_PWM_Start_DMA+0x374>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a28      	ldr	r2, [pc, #160]	@ (8006214 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d022      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d01d      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a29      	ldr	r2, [pc, #164]	@ (800622c <HAL_TIM_PWM_Start_DMA+0x448>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d018      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a28      	ldr	r2, [pc, #160]	@ (8006230 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d013      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a26      	ldr	r2, [pc, #152]	@ (8006234 <HAL_TIM_PWM_Start_DMA+0x450>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00e      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_TIM_PWM_Start_DMA+0x434>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d009      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <HAL_TIM_PWM_Start_DMA+0x438>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d004      	beq.n	80061bc <HAL_TIM_PWM_Start_DMA+0x3d8>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_TIM_PWM_Start_DMA+0x444>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d115      	bne.n	80061e8 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x454>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d015      	beq.n	80061fa <HAL_TIM_PWM_Start_DMA+0x416>
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d4:	d011      	beq.n	80061fa <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e6:	e008      	b.n	80061fa <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e000      	b.n	80061fc <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	08007317 	.word	0x08007317
 800620c:	080073c3 	.word	0x080073c3
 8006210:	08007281 	.word	0x08007281
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800
 8006228:	40015000 	.word	0x40015000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	00010007 	.word	0x00010007

0800623c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d855      	bhi.n	80062fc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006250:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800628d 	.word	0x0800628d
 800625c:	080062fd 	.word	0x080062fd
 8006260:	080062fd 	.word	0x080062fd
 8006264:	080062fd 	.word	0x080062fd
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062fd 	.word	0x080062fd
 8006270:	080062fd 	.word	0x080062fd
 8006274:	080062fd 	.word	0x080062fd
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062fd 	.word	0x080062fd
 8006280:	080062fd 	.word	0x080062fd
 8006284:	080062fd 	.word	0x080062fd
 8006288:	080062e1 	.word	0x080062e1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800629a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fd ff0b 	bl	80040bc <HAL_DMA_Abort_IT>
      break;
 80062a6:	e02c      	b.n	8006302 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fd fefd 	bl	80040bc <HAL_DMA_Abort_IT>
      break;
 80062c2:	e01e      	b.n	8006302 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fd feef 	bl	80040bc <HAL_DMA_Abort_IT>
      break;
 80062de:	e010      	b.n	8006302 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fd fee1 	bl	80040bc <HAL_DMA_Abort_IT>
      break;
 80062fa:	e002      	b.n	8006302 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	bf00      	nop
  }

  if (status == HAL_OK)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8086 	bne.w	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fd06 	bl	8007d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a40      	ldr	r2, [pc, #256]	@ (8006420 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3f      	ldr	r2, [pc, #252]	@ (8006424 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_TIM_PWM_Stop_DMA+0x118>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a3d      	ldr	r2, [pc, #244]	@ (8006428 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a3c      	ldr	r2, [pc, #240]	@ (800642c <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_TIM_PWM_Stop_DMA+0x118>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a3a      	ldr	r2, [pc, #232]	@ (8006430 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_TIM_PWM_Stop_DMA+0x118>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a39      	ldr	r2, [pc, #228]	@ (8006434 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_TIM_PWM_Stop_DMA+0x11e>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10f      	bne.n	800638e <HAL_TIM_PWM_Stop_DMA+0x152>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d107      	bne.n	800638e <HAL_TIM_PWM_Stop_DMA+0x152>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10f      	bne.n	80063be <HAL_TIM_PWM_Stop_DMA+0x182>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	f244 4344 	movw	r3, #17476	@ 0x4444
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <HAL_TIM_PWM_Stop_DMA+0x182>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Stop_DMA+0x192>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063cc:	e023      	b.n	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d104      	bne.n	80063de <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063dc:	e01b      	b.n	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ec:	e013      	b.n	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Stop_DMA+0x1c2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063fc:	e00b      	b.n	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b10      	cmp	r3, #16
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800640c:	e003      	b.n	8006416 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40013400 	.word	0x40013400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	40015000 	.word	0x40015000

08006438 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006460:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d108      	bne.n	800647a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d105      	bne.n	800647a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800646e:	7b7b      	ldrb	r3, [r7, #13]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d102      	bne.n	800647a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006474:	7b3b      	ldrb	r3, [r7, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d001      	beq.n	800647e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e059      	b.n	8006532 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0202 	orr.w	r2, r2, #2
 80064ac:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0204 	orr.w	r2, r2, #4
 80064bc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fc2c 	bl	8007d24 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2201      	movs	r2, #1
 80064d2:	2104      	movs	r1, #4
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fc25 	bl	8007d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a17      	ldr	r2, [pc, #92]	@ (800653c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_TIM_OnePulse_Start_IT+0xde>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a15      	ldr	r2, [pc, #84]	@ (8006540 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_TIM_OnePulse_Start_IT+0xde>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a14      	ldr	r2, [pc, #80]	@ (8006544 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIM_OnePulse_Start_IT+0xde>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a12      	ldr	r2, [pc, #72]	@ (8006548 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a11      	ldr	r2, [pc, #68]	@ (800654c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800652e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800
 8006550:	40015000 	.word	0x40015000

08006554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0a2      	b.n	80066ae <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d111      	bne.n	8006598 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fbf7 	bl	8007d70 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006586:	2b00      	cmp	r3, #0
 8006588:	d102      	bne.n	8006590 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a4a      	ldr	r2, [pc, #296]	@ (80066b8 <HAL_TIM_Encoder_Init+0x164>)
 800658e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f000 ff36 	bl	8007430 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ec:	f023 0303 	bic.w	r3, r3, #3
 80065f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	4313      	orrs	r3, r2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800660a:	f023 030c 	bic.w	r3, r3, #12
 800660e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	4313      	orrs	r3, r2
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	011a      	lsls	r2, r3, #4
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	4313      	orrs	r3, r2
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006648:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006650:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4313      	orrs	r3, r2
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	0800337d 	.word	0x0800337d

080066bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d110      	bne.n	800670e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d102      	bne.n	80066f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d001      	beq.n	80066fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e069      	b.n	80067d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800670c:	e031      	b.n	8006772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b04      	cmp	r3, #4
 8006712:	d110      	bne.n	8006736 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d102      	bne.n	8006720 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800671a:	7b3b      	ldrb	r3, [r7, #12]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d001      	beq.n	8006724 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e055      	b.n	80067d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006734:	e01d      	b.n	8006772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d108      	bne.n	800674e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d105      	bne.n	800674e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006742:	7b7b      	ldrb	r3, [r7, #13]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d102      	bne.n	800674e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006748:	7b3b      	ldrb	r3, [r7, #12]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d001      	beq.n	8006752 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e03e      	b.n	80067d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_TIM_Encoder_Start+0xc4>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b04      	cmp	r3, #4
 800677c:	d008      	beq.n	8006790 <HAL_TIM_Encoder_Start+0xd4>
 800677e:	e00f      	b.n	80067a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2201      	movs	r2, #1
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f001 facb 	bl	8007d24 <TIM_CCxChannelCmd>
      break;
 800678e:	e016      	b.n	80067be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2201      	movs	r2, #1
 8006796:	2104      	movs	r1, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f001 fac3 	bl	8007d24 <TIM_CCxChannelCmd>
      break;
 800679e:	e00e      	b.n	80067be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fabb 	bl	8007d24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	2104      	movs	r1, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 fab4 	bl	8007d24 <TIM_CCxChannelCmd>
      break;
 80067bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0201 	orr.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d026      	beq.n	8006848 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d021      	beq.n	8006848 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0202 	mvn.w	r2, #2
 800680c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
 800682c:	e009      	b.n	8006842 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d026      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d021      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0204 	mvn.w	r2, #4
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	e009      	b.n	800689a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d026      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d021      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0208 	mvn.w	r2, #8
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2204      	movs	r2, #4
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
 80068dc:	e009      	b.n	80068f2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d026      	beq.n	8006950 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	d021      	beq.n	8006950 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0210 	mvn.w	r2, #16
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2208      	movs	r2, #8
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
 8006934:	e009      	b.n	800694a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0201 	mvn.w	r2, #1
 800696c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f06f 0220 	mvn.w	r2, #32
 8006a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e0ff      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b14      	cmp	r3, #20
 8006af6:	f200 80f0 	bhi.w	8006cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006afa:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006cdb 	.word	0x08006cdb
 8006b08:	08006cdb 	.word	0x08006cdb
 8006b0c:	08006cdb 	.word	0x08006cdb
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006cdb 	.word	0x08006cdb
 8006b18:	08006cdb 	.word	0x08006cdb
 8006b1c:	08006cdb 	.word	0x08006cdb
 8006b20:	08006bd7 	.word	0x08006bd7
 8006b24:	08006cdb 	.word	0x08006cdb
 8006b28:	08006cdb 	.word	0x08006cdb
 8006b2c:	08006cdb 	.word	0x08006cdb
 8006b30:	08006c17 	.word	0x08006c17
 8006b34:	08006cdb 	.word	0x08006cdb
 8006b38:	08006cdb 	.word	0x08006cdb
 8006b3c:	08006cdb 	.word	0x08006cdb
 8006b40:	08006c59 	.word	0x08006c59
 8006b44:	08006cdb 	.word	0x08006cdb
 8006b48:	08006cdb 	.word	0x08006cdb
 8006b4c:	08006cdb 	.word	0x08006cdb
 8006b50:	08006c99 	.word	0x08006c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fd1c 	bl	8007598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0204 	bic.w	r2, r2, #4
 8006b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6999      	ldr	r1, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	619a      	str	r2, [r3, #24]
      break;
 8006b92:	e0a5      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fd96 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	021a      	lsls	r2, r3, #8
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	619a      	str	r2, [r3, #24]
      break;
 8006bd4:	e084      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fe09 	bl	80077f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0208 	orr.w	r2, r2, #8
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0204 	bic.w	r2, r2, #4
 8006c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69d9      	ldr	r1, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	61da      	str	r2, [r3, #28]
      break;
 8006c14:	e064      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fe7b 	bl	8007918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	61da      	str	r2, [r3, #28]
      break;
 8006c56:	e043      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 feee 	bl	8007a40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0204 	bic.w	r2, r2, #4
 8006c82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c96:	e023      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 ff38 	bl	8007b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cd8:	e002      	b.n	8006ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_ConfigClockSource+0x1c>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e0f6      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x20a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a6f      	ldr	r2, [pc, #444]	@ (8006f08 <HAL_TIM_ConfigClockSource+0x214>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f000 80c1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d50:	4a6d      	ldr	r2, [pc, #436]	@ (8006f08 <HAL_TIM_ConfigClockSource+0x214>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f200 80c6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d58:	4a6c      	ldr	r2, [pc, #432]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x218>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f000 80b9 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d60:	4a6a      	ldr	r2, [pc, #424]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x218>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f200 80be 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d68:	4a69      	ldr	r2, [pc, #420]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f000 80b1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d70:	4a67      	ldr	r2, [pc, #412]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f200 80b6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d78:	4a66      	ldr	r2, [pc, #408]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x220>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f000 80a9 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d80:	4a64      	ldr	r2, [pc, #400]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x220>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	f200 80ae 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d88:	4a63      	ldr	r2, [pc, #396]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x224>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f000 80a1 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006d90:	4a61      	ldr	r2, [pc, #388]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x224>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f200 80a6 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	4a60      	ldr	r2, [pc, #384]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x228>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 8099 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x228>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 809e 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006dac:	f000 8091 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006db4:	f200 8096 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dbc:	f000 8089 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc4:	f200 808e 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dcc:	d03e      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0x158>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd2:	f200 8087 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dda:	f000 8086 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1f6>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de2:	d87f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de4:	2b70      	cmp	r3, #112	@ 0x70
 8006de6:	d01a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x12a>
 8006de8:	2b70      	cmp	r3, #112	@ 0x70
 8006dea:	d87b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dec:	2b60      	cmp	r3, #96	@ 0x60
 8006dee:	d050      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x19e>
 8006df0:	2b60      	cmp	r3, #96	@ 0x60
 8006df2:	d877      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df4:	2b50      	cmp	r3, #80	@ 0x50
 8006df6:	d03c      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x17e>
 8006df8:	2b50      	cmp	r3, #80	@ 0x50
 8006dfa:	d873      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d058      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x1be>
 8006e00:	2b40      	cmp	r3, #64	@ 0x40
 8006e02:	d86f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e04:	2b30      	cmp	r3, #48	@ 0x30
 8006e06:	d064      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d86b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d060      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d867      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d05a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e2e:	f000 ff59 	bl	8007ce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04f      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	f000 ff42 	bl	8007ce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e03c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 feb4 	bl	8007bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	@ 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 ff0d 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8006e90:	e02c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fed3 	bl	8007c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	@ 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fefd 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e01c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fe94 	bl	8007bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	@ 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 feed 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e00c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 fee4 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 8006ee2:	e003      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	e000      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	00100070 	.word	0x00100070
 8006f0c:	00100060 	.word	0x00100060
 8006f10:	00100050 	.word	0x00100050
 8006f14:	00100040 	.word	0x00100040
 8006f18:	00100030 	.word	0x00100030
 8006f1c:	00100020 	.word	0x00100020

08006f20 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e14a      	b.n	8007272 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	f040 80dd 	bne.w	80071a4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	2b1f      	cmp	r3, #31
 8006fee:	f200 80d6 	bhi.w	800719e <HAL_TIM_RegisterCallback+0x1de>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_TIM_RegisterCallback+0x38>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007079 	.word	0x08007079
 8006ffc:	08007081 	.word	0x08007081
 8007000:	08007089 	.word	0x08007089
 8007004:	08007091 	.word	0x08007091
 8007008:	08007099 	.word	0x08007099
 800700c:	080070a1 	.word	0x080070a1
 8007010:	080070a9 	.word	0x080070a9
 8007014:	080070b1 	.word	0x080070b1
 8007018:	080070b9 	.word	0x080070b9
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c9 	.word	0x080070c9
 8007024:	080070d1 	.word	0x080070d1
 8007028:	080070d9 	.word	0x080070d9
 800702c:	080070e1 	.word	0x080070e1
 8007030:	080070eb 	.word	0x080070eb
 8007034:	080070f5 	.word	0x080070f5
 8007038:	080070ff 	.word	0x080070ff
 800703c:	08007109 	.word	0x08007109
 8007040:	08007113 	.word	0x08007113
 8007044:	0800711d 	.word	0x0800711d
 8007048:	08007127 	.word	0x08007127
 800704c:	08007131 	.word	0x08007131
 8007050:	0800713b 	.word	0x0800713b
 8007054:	08007145 	.word	0x08007145
 8007058:	0800714f 	.word	0x0800714f
 800705c:	08007159 	.word	0x08007159
 8007060:	08007163 	.word	0x08007163
 8007064:	0800716d 	.word	0x0800716d
 8007068:	08007177 	.word	0x08007177
 800706c:	08007181 	.word	0x08007181
 8007070:	0800718b 	.word	0x0800718b
 8007074:	08007195 	.word	0x08007195
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800707e:	e0f7      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007086:	e0f3      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800708e:	e0ef      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007096:	e0eb      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800709e:	e0e7      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80070a6:	e0e3      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80070ae:	e0df      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80070b6:	e0db      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80070be:	e0d7      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80070c6:	e0d3      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80070ce:	e0cf      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80070d6:	e0cb      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80070de:	e0c7      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80070e8:	e0c2      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80070f2:	e0bd      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80070fc:	e0b8      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007106:	e0b3      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007110:	e0ae      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800711a:	e0a9      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007124:	e0a4      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800712e:	e09f      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007138:	e09a      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007142:	e095      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800714c:	e090      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007156:	e08b      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007160:	e086      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800716a:	e081      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007174:	e07c      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800717e:	e077      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007188:	e072      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007192:	e06d      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800719c:	e068      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
        break;
 80071a2:	e065      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d15d      	bne.n	800726c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	2b0d      	cmp	r3, #13
 80071b4:	d857      	bhi.n	8007266 <HAL_TIM_RegisterCallback+0x2a6>
 80071b6:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <HAL_TIM_RegisterCallback+0x1fc>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071fd 	.word	0x080071fd
 80071c4:	08007205 	.word	0x08007205
 80071c8:	0800720d 	.word	0x0800720d
 80071cc:	08007215 	.word	0x08007215
 80071d0:	0800721d 	.word	0x0800721d
 80071d4:	08007225 	.word	0x08007225
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	08007235 	.word	0x08007235
 80071e0:	0800723d 	.word	0x0800723d
 80071e4:	08007245 	.word	0x08007245
 80071e8:	0800724d 	.word	0x0800724d
 80071ec:	08007255 	.word	0x08007255
 80071f0:	0800725d 	.word	0x0800725d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80071fa:	e039      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007202:	e035      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800720a:	e031      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007212:	e02d      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800721a:	e029      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007222:	e025      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800722a:	e021      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007232:	e01d      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800723a:	e019      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007242:	e015      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800724a:	e011      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007252:	e00d      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800725a:	e009      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007264:	e004      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
        break;
 800726a:	e001      	b.n	8007270 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d107      	bne.n	80072a8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a6:	e02a      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d107      	bne.n	80072c2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2202      	movs	r2, #2
 80072b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072c0:	e01d      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d107      	bne.n	80072dc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2204      	movs	r2, #4
 80072d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072da:	e010      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d107      	bne.n	80072f6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2208      	movs	r2, #8
 80072ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072f4:	e003      	b.n	80072fe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	771a      	strb	r2, [r3, #28]
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d10b      	bne.n	8007346 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d136      	bne.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007344:	e031      	b.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	429a      	cmp	r2, r3
 800734e:	d10b      	bne.n	8007368 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2202      	movs	r2, #2
 8007354:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d125      	bne.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007366:	e020      	b.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	d10b      	bne.n	800738a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2204      	movs	r2, #4
 8007376:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d114      	bne.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007388:	e00f      	b.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d10a      	bne.n	80073aa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2208      	movs	r2, #8
 8007398:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	771a      	strb	r2, [r3, #28]
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d103      	bne.n	80073e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	771a      	strb	r2, [r3, #28]
 80073e0:	e019      	b.n	8007416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d103      	bne.n	80073f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2202      	movs	r2, #2
 80073f0:	771a      	strb	r2, [r3, #28]
 80073f2:	e010      	b.n	8007416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d103      	bne.n	8007406 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2204      	movs	r2, #4
 8007402:	771a      	strb	r2, [r3, #28]
 8007404:	e007      	b.n	8007416 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d102      	bne.n	8007416 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2208      	movs	r2, #8
 8007414:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	771a      	strb	r2, [r3, #28]
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a4c      	ldr	r2, [pc, #304]	@ (8007574 <TIM_Base_SetConfig+0x144>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d017      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744e:	d013      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a49      	ldr	r2, [pc, #292]	@ (8007578 <TIM_Base_SetConfig+0x148>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00f      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a48      	ldr	r2, [pc, #288]	@ (800757c <TIM_Base_SetConfig+0x14c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a47      	ldr	r2, [pc, #284]	@ (8007580 <TIM_Base_SetConfig+0x150>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a46      	ldr	r2, [pc, #280]	@ (8007584 <TIM_Base_SetConfig+0x154>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_Base_SetConfig+0x48>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a45      	ldr	r2, [pc, #276]	@ (8007588 <TIM_Base_SetConfig+0x158>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d108      	bne.n	800748a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a39      	ldr	r2, [pc, #228]	@ (8007574 <TIM_Base_SetConfig+0x144>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d023      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007498:	d01f      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a36      	ldr	r2, [pc, #216]	@ (8007578 <TIM_Base_SetConfig+0x148>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a35      	ldr	r2, [pc, #212]	@ (800757c <TIM_Base_SetConfig+0x14c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d017      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a34      	ldr	r2, [pc, #208]	@ (8007580 <TIM_Base_SetConfig+0x150>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a33      	ldr	r2, [pc, #204]	@ (8007584 <TIM_Base_SetConfig+0x154>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a33      	ldr	r2, [pc, #204]	@ (800758c <TIM_Base_SetConfig+0x15c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a32      	ldr	r2, [pc, #200]	@ (8007590 <TIM_Base_SetConfig+0x160>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a31      	ldr	r2, [pc, #196]	@ (8007594 <TIM_Base_SetConfig+0x164>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_Base_SetConfig+0xaa>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007588 <TIM_Base_SetConfig+0x158>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a18      	ldr	r2, [pc, #96]	@ (8007574 <TIM_Base_SetConfig+0x144>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <TIM_Base_SetConfig+0x110>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1a      	ldr	r2, [pc, #104]	@ (8007584 <TIM_Base_SetConfig+0x154>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00f      	beq.n	8007540 <TIM_Base_SetConfig+0x110>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1a      	ldr	r2, [pc, #104]	@ (800758c <TIM_Base_SetConfig+0x15c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00b      	beq.n	8007540 <TIM_Base_SetConfig+0x110>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a19      	ldr	r2, [pc, #100]	@ (8007590 <TIM_Base_SetConfig+0x160>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <TIM_Base_SetConfig+0x110>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <TIM_Base_SetConfig+0x164>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_Base_SetConfig+0x110>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a13      	ldr	r2, [pc, #76]	@ (8007588 <TIM_Base_SetConfig+0x158>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d103      	bne.n	8007548 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d105      	bne.n	8007566 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f023 0201 	bic.w	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	611a      	str	r2, [r3, #16]
  }
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800
 8007580:	40000c00 	.word	0x40000c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40015000 	.word	0x40015000
 800758c:	40014000 	.word	0x40014000
 8007590:	40014400 	.word	0x40014400
 8007594:	40014800 	.word	0x40014800

08007598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f023 0201 	bic.w	r2, r3, #1
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0302 	bic.w	r3, r3, #2
 80075e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a30      	ldr	r2, [pc, #192]	@ (80076b4 <TIM_OC1_SetConfig+0x11c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d013      	beq.n	8007620 <TIM_OC1_SetConfig+0x88>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2f      	ldr	r2, [pc, #188]	@ (80076b8 <TIM_OC1_SetConfig+0x120>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00f      	beq.n	8007620 <TIM_OC1_SetConfig+0x88>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a2e      	ldr	r2, [pc, #184]	@ (80076bc <TIM_OC1_SetConfig+0x124>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00b      	beq.n	8007620 <TIM_OC1_SetConfig+0x88>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a2d      	ldr	r2, [pc, #180]	@ (80076c0 <TIM_OC1_SetConfig+0x128>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <TIM_OC1_SetConfig+0x88>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a2c      	ldr	r2, [pc, #176]	@ (80076c4 <TIM_OC1_SetConfig+0x12c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_OC1_SetConfig+0x88>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a2b      	ldr	r2, [pc, #172]	@ (80076c8 <TIM_OC1_SetConfig+0x130>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10c      	bne.n	800763a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f023 0308 	bic.w	r3, r3, #8
 8007626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 0304 	bic.w	r3, r3, #4
 8007638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <TIM_OC1_SetConfig+0x11c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <TIM_OC1_SetConfig+0xd2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <TIM_OC1_SetConfig+0x120>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_OC1_SetConfig+0xd2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <TIM_OC1_SetConfig+0x124>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_OC1_SetConfig+0xd2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1a      	ldr	r2, [pc, #104]	@ (80076c0 <TIM_OC1_SetConfig+0x128>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_OC1_SetConfig+0xd2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <TIM_OC1_SetConfig+0x12c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC1_SetConfig+0xd2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a18      	ldr	r2, [pc, #96]	@ (80076c8 <TIM_OC1_SetConfig+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d111      	bne.n	800768e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	621a      	str	r2, [r3, #32]
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800
 80076c8:	40015000 	.word	0x40015000

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0210 	bic.w	r2, r3, #16
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0320 	bic.w	r3, r3, #32
 800771a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a2c      	ldr	r2, [pc, #176]	@ (80077dc <TIM_OC2_SetConfig+0x110>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC2_SetConfig+0x74>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a2b      	ldr	r2, [pc, #172]	@ (80077e0 <TIM_OC2_SetConfig+0x114>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC2_SetConfig+0x74>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a2a      	ldr	r2, [pc, #168]	@ (80077e4 <TIM_OC2_SetConfig+0x118>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10d      	bne.n	800775c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800775a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a1f      	ldr	r2, [pc, #124]	@ (80077dc <TIM_OC2_SetConfig+0x110>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <TIM_OC2_SetConfig+0xc0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a1e      	ldr	r2, [pc, #120]	@ (80077e0 <TIM_OC2_SetConfig+0x114>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00f      	beq.n	800778c <TIM_OC2_SetConfig+0xc0>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a1e      	ldr	r2, [pc, #120]	@ (80077e8 <TIM_OC2_SetConfig+0x11c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00b      	beq.n	800778c <TIM_OC2_SetConfig+0xc0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a1d      	ldr	r2, [pc, #116]	@ (80077ec <TIM_OC2_SetConfig+0x120>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <TIM_OC2_SetConfig+0xc0>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a1c      	ldr	r2, [pc, #112]	@ (80077f0 <TIM_OC2_SetConfig+0x124>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d003      	beq.n	800778c <TIM_OC2_SetConfig+0xc0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a17      	ldr	r2, [pc, #92]	@ (80077e4 <TIM_OC2_SetConfig+0x118>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d113      	bne.n	80077b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800779a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40015000 	.word	0x40015000
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40014400 	.word	0x40014400
 80077f0:	40014800 	.word	0x40014800

080077f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2b      	ldr	r2, [pc, #172]	@ (8007900 <TIM_OC3_SetConfig+0x10c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d007      	beq.n	8007866 <TIM_OC3_SetConfig+0x72>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a2a      	ldr	r2, [pc, #168]	@ (8007904 <TIM_OC3_SetConfig+0x110>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_OC3_SetConfig+0x72>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a29      	ldr	r2, [pc, #164]	@ (8007908 <TIM_OC3_SetConfig+0x114>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d10d      	bne.n	8007882 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800786c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1e      	ldr	r2, [pc, #120]	@ (8007900 <TIM_OC3_SetConfig+0x10c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <TIM_OC3_SetConfig+0xbe>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1d      	ldr	r2, [pc, #116]	@ (8007904 <TIM_OC3_SetConfig+0x110>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_OC3_SetConfig+0xbe>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <TIM_OC3_SetConfig+0x118>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_OC3_SetConfig+0xbe>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1c      	ldr	r2, [pc, #112]	@ (8007910 <TIM_OC3_SetConfig+0x11c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_OC3_SetConfig+0xbe>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <TIM_OC3_SetConfig+0x120>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_OC3_SetConfig+0xbe>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a16      	ldr	r2, [pc, #88]	@ (8007908 <TIM_OC3_SetConfig+0x114>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d113      	bne.n	80078da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40013400 	.word	0x40013400
 8007908:	40015000 	.word	0x40015000
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800

08007918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	031b      	lsls	r3, r3, #12
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a2c      	ldr	r2, [pc, #176]	@ (8007a28 <TIM_OC4_SetConfig+0x110>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_OC4_SetConfig+0x74>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a2b      	ldr	r2, [pc, #172]	@ (8007a2c <TIM_OC4_SetConfig+0x114>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_OC4_SetConfig+0x74>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a2a      	ldr	r2, [pc, #168]	@ (8007a30 <TIM_OC4_SetConfig+0x118>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d10d      	bne.n	80079a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a28 <TIM_OC4_SetConfig+0x110>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <TIM_OC4_SetConfig+0xc0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a2c <TIM_OC4_SetConfig+0x114>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00f      	beq.n	80079d8 <TIM_OC4_SetConfig+0xc0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007a34 <TIM_OC4_SetConfig+0x11c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00b      	beq.n	80079d8 <TIM_OC4_SetConfig+0xc0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a38 <TIM_OC4_SetConfig+0x120>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d007      	beq.n	80079d8 <TIM_OC4_SetConfig+0xc0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a1c      	ldr	r2, [pc, #112]	@ (8007a3c <TIM_OC4_SetConfig+0x124>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_OC4_SetConfig+0xc0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a17      	ldr	r2, [pc, #92]	@ (8007a30 <TIM_OC4_SetConfig+0x118>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d113      	bne.n	8007a00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	019b      	lsls	r3, r3, #6
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	019b      	lsls	r3, r3, #6
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40012c00 	.word	0x40012c00
 8007a2c:	40013400 	.word	0x40013400
 8007a30:	40015000 	.word	0x40015000
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40014400 	.word	0x40014400
 8007a3c:	40014800 	.word	0x40014800

08007a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a19      	ldr	r2, [pc, #100]	@ (8007afc <TIM_OC5_SetConfig+0xbc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <TIM_OC5_SetConfig+0x82>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a18      	ldr	r2, [pc, #96]	@ (8007b00 <TIM_OC5_SetConfig+0xc0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00f      	beq.n	8007ac2 <TIM_OC5_SetConfig+0x82>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a17      	ldr	r2, [pc, #92]	@ (8007b04 <TIM_OC5_SetConfig+0xc4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00b      	beq.n	8007ac2 <TIM_OC5_SetConfig+0x82>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a16      	ldr	r2, [pc, #88]	@ (8007b08 <TIM_OC5_SetConfig+0xc8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d007      	beq.n	8007ac2 <TIM_OC5_SetConfig+0x82>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a15      	ldr	r2, [pc, #84]	@ (8007b0c <TIM_OC5_SetConfig+0xcc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d003      	beq.n	8007ac2 <TIM_OC5_SetConfig+0x82>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a14      	ldr	r2, [pc, #80]	@ (8007b10 <TIM_OC5_SetConfig+0xd0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d109      	bne.n	8007ad6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	621a      	str	r2, [r3, #32]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40013400 	.word	0x40013400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800
 8007b10:	40015000 	.word	0x40015000

08007b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	051b      	lsls	r3, r3, #20
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd4 <TIM_OC6_SetConfig+0xc0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <TIM_OC6_SetConfig+0x84>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a19      	ldr	r2, [pc, #100]	@ (8007bd8 <TIM_OC6_SetConfig+0xc4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_OC6_SetConfig+0x84>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a18      	ldr	r2, [pc, #96]	@ (8007bdc <TIM_OC6_SetConfig+0xc8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <TIM_OC6_SetConfig+0x84>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a17      	ldr	r2, [pc, #92]	@ (8007be0 <TIM_OC6_SetConfig+0xcc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_OC6_SetConfig+0x84>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a16      	ldr	r2, [pc, #88]	@ (8007be4 <TIM_OC6_SetConfig+0xd0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_OC6_SetConfig+0x84>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a15      	ldr	r2, [pc, #84]	@ (8007be8 <TIM_OC6_SetConfig+0xd4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d109      	bne.n	8007bac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000
 8007be0:	40014400 	.word	0x40014400
 8007be4:	40014800 	.word	0x40014800
 8007be8:	40015000 	.word	0x40015000

08007bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 030a 	bic.w	r3, r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	f023 0210 	bic.w	r2, r3, #16
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f043 0307 	orr.w	r3, r3, #7
 8007cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	609a      	str	r2, [r3, #8]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	021a      	lsls	r2, r3, #8
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	609a      	str	r2, [r3, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 031f 	and.w	r3, r3, #31
 8007d36:	2201      	movs	r2, #1
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	43db      	mvns	r3, r3
 8007d46:	401a      	ands	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1a      	ldr	r2, [r3, #32]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f003 031f 	and.w	r3, r3, #31
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
	...

08007d70 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a26      	ldr	r2, [pc, #152]	@ (8007e14 <TIM_ResetCallback+0xa4>)
 8007d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a25      	ldr	r2, [pc, #148]	@ (8007e18 <TIM_ResetCallback+0xa8>)
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a24      	ldr	r2, [pc, #144]	@ (8007e1c <TIM_ResetCallback+0xac>)
 8007d8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a23      	ldr	r2, [pc, #140]	@ (8007e20 <TIM_ResetCallback+0xb0>)
 8007d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a22      	ldr	r2, [pc, #136]	@ (8007e24 <TIM_ResetCallback+0xb4>)
 8007d9c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a21      	ldr	r2, [pc, #132]	@ (8007e28 <TIM_ResetCallback+0xb8>)
 8007da4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a20      	ldr	r2, [pc, #128]	@ (8007e2c <TIM_ResetCallback+0xbc>)
 8007dac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e30 <TIM_ResetCallback+0xc0>)
 8007db4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1e      	ldr	r2, [pc, #120]	@ (8007e34 <TIM_ResetCallback+0xc4>)
 8007dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e38 <TIM_ResetCallback+0xc8>)
 8007dc4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1c      	ldr	r2, [pc, #112]	@ (8007e3c <TIM_ResetCallback+0xcc>)
 8007dcc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e40 <TIM_ResetCallback+0xd0>)
 8007dd4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1a      	ldr	r2, [pc, #104]	@ (8007e44 <TIM_ResetCallback+0xd4>)
 8007ddc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a19      	ldr	r2, [pc, #100]	@ (8007e48 <TIM_ResetCallback+0xd8>)
 8007de4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a18      	ldr	r2, [pc, #96]	@ (8007e4c <TIM_ResetCallback+0xdc>)
 8007dec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a17      	ldr	r2, [pc, #92]	@ (8007e50 <TIM_ResetCallback+0xe0>)
 8007df4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	@ (8007e54 <TIM_ResetCallback+0xe4>)
 8007dfc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a15      	ldr	r2, [pc, #84]	@ (8007e58 <TIM_ResetCallback+0xe8>)
 8007e04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	08003069 	.word	0x08003069
 8007e18:	08006f21 	.word	0x08006f21
 8007e1c:	08006f85 	.word	0x08006f85
 8007e20:	08006f99 	.word	0x08006f99
 8007e24:	08006f49 	.word	0x08006f49
 8007e28:	08006f5d 	.word	0x08006f5d
 8007e2c:	08006f35 	.word	0x08006f35
 8007e30:	0800303d 	.word	0x0800303d
 8007e34:	08006f71 	.word	0x08006f71
 8007e38:	08006fad 	.word	0x08006fad
 8007e3c:	080082f5 	.word	0x080082f5
 8007e40:	08008309 	.word	0x08008309
 8007e44:	0800831d 	.word	0x0800831d
 8007e48:	08008331 	.word	0x08008331
 8007e4c:	08008345 	.word	0x08008345
 8007e50:	08008359 	.word	0x08008359
 8007e54:	0800836d 	.word	0x0800836d
 8007e58:	08008381 	.word	0x08008381

08007e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e074      	b.n	8007f5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a34      	ldr	r2, [pc, #208]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a33      	ldr	r2, [pc, #204]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a31      	ldr	r2, [pc, #196]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d108      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007eb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a21      	ldr	r2, [pc, #132]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d022      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef4:	d01d      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1f      	ldr	r2, [pc, #124]	@ (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d018      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1d      	ldr	r2, [pc, #116]	@ (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00e      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a15      	ldr	r2, [pc, #84]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d009      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d004      	beq.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d10c      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40013400 	.word	0x40013400
 8007f74:	40015000 	.word	0x40015000
 8007f78:	40000400 	.word	0x40000400
 8007f7c:	40000800 	.word	0x40000800
 8007f80:	40000c00 	.word	0x40000c00
 8007f84:	40014000 	.word	0x40014000

08007f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e078      	b.n	8008096 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1c      	ldr	r2, [pc, #112]	@ (80080a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d009      	beq.n	800804a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1b      	ldr	r2, [pc, #108]	@ (80080a8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a19      	ldr	r2, [pc, #100]	@ (80080ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d11c      	bne.n	8008084 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008054:	051b      	lsls	r3, r3, #20
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40013400 	.word	0x40013400
 80080ac:	40015000 	.word	0x40015000

080080b0 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b08b      	sub	sp, #44	@ 0x2c
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_TIMEx_ConfigBreakInput+0x20>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e10b      	b.n	80082e8 <HAL_TIMEx_ConfigBreakInput+0x238>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b80      	cmp	r3, #128	@ 0x80
 80080de:	f000 8096 	beq.w	800820e <HAL_TIMEx_ConfigBreakInput+0x15e>
 80080e2:	2b80      	cmp	r3, #128	@ 0x80
 80080e4:	f200 809c 	bhi.w	8008220 <HAL_TIMEx_ConfigBreakInput+0x170>
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	d849      	bhi.n	8008180 <HAL_TIMEx_ConfigBreakInput+0xd0>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8097 	beq.w	8008220 <HAL_TIMEx_ConfigBreakInput+0x170>
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b1f      	cmp	r3, #31
 80080f6:	f200 8093 	bhi.w	8008220 <HAL_TIMEx_ConfigBreakInput+0x170>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008187 	.word	0x08008187
 8008104:	0800819b 	.word	0x0800819b
 8008108:	08008221 	.word	0x08008221
 800810c:	080081af 	.word	0x080081af
 8008110:	08008221 	.word	0x08008221
 8008114:	08008221 	.word	0x08008221
 8008118:	08008221 	.word	0x08008221
 800811c:	080081c3 	.word	0x080081c3
 8008120:	08008221 	.word	0x08008221
 8008124:	08008221 	.word	0x08008221
 8008128:	08008221 	.word	0x08008221
 800812c:	08008221 	.word	0x08008221
 8008130:	08008221 	.word	0x08008221
 8008134:	08008221 	.word	0x08008221
 8008138:	08008221 	.word	0x08008221
 800813c:	080081d7 	.word	0x080081d7
 8008140:	08008221 	.word	0x08008221
 8008144:	08008221 	.word	0x08008221
 8008148:	08008221 	.word	0x08008221
 800814c:	08008221 	.word	0x08008221
 8008150:	08008221 	.word	0x08008221
 8008154:	08008221 	.word	0x08008221
 8008158:	08008221 	.word	0x08008221
 800815c:	08008221 	.word	0x08008221
 8008160:	08008221 	.word	0x08008221
 8008164:	08008221 	.word	0x08008221
 8008168:	08008221 	.word	0x08008221
 800816c:	08008221 	.word	0x08008221
 8008170:	08008221 	.word	0x08008221
 8008174:	08008221 	.word	0x08008221
 8008178:	08008221 	.word	0x08008221
 800817c:	080081eb 	.word	0x080081eb
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	d03b      	beq.n	80081fc <HAL_TIMEx_ConfigBreakInput+0x14c>
 8008184:	e04c      	b.n	8008220 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008186:	2301      	movs	r3, #1
 8008188:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800818e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008192:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008194:	2309      	movs	r3, #9
 8008196:	617b      	str	r3, [r7, #20]
      break;
 8008198:	e04b      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800819a:	2302      	movs	r3, #2
 800819c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800819e:	2301      	movs	r3, #1
 80081a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80081a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80081a8:	230a      	movs	r3, #10
 80081aa:	617b      	str	r3, [r7, #20]
      break;
 80081ac:	e041      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80081ae:	2304      	movs	r3, #4
 80081b0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80081b2:	2302      	movs	r3, #2
 80081b4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80081b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80081ba:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80081bc:	230b      	movs	r3, #11
 80081be:	617b      	str	r3, [r7, #20]
      break;
 80081c0:	e037      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80081c2:	2308      	movs	r3, #8
 80081c4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80081c6:	2303      	movs	r3, #3
 80081c8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80081ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081ce:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80081d0:	230c      	movs	r3, #12
 80081d2:	617b      	str	r3, [r7, #20]
      break;
 80081d4:	e02d      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80081d6:	2310      	movs	r3, #16
 80081d8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80081da:	2304      	movs	r3, #4
 80081dc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80081de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80081e2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80081e4:	230d      	movs	r3, #13
 80081e6:	617b      	str	r3, [r7, #20]
      break;
 80081e8:	e023      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 80081ea:	2320      	movs	r3, #32
 80081ec:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80081ee:	2305      	movs	r3, #5
 80081f0:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
      break;
 80081fa:	e01a      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80081fc:	2340      	movs	r3, #64	@ 0x40
 80081fe:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008200:	2306      	movs	r3, #6
 8008202:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]
      break;
 800820c:	e011      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800820e:	2380      	movs	r3, #128	@ 0x80
 8008210:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008212:	2307      	movs	r3, #7
 8008214:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
      break;
 800821e:	e008      	b.n	8008232 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
      break;
 8008230:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d003      	beq.n	8008240 <HAL_TIMEx_ConfigBreakInput+0x190>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d025      	beq.n	800828a <HAL_TIMEx_ConfigBreakInput+0x1da>
 800823e:	e049      	b.n	80082d4 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008246:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	43db      	mvns	r3, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4013      	ands	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	409a      	lsls	r2, r3
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	4013      	ands	r3, r2
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	43db      	mvns	r3, r3
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4013      	ands	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	409a      	lsls	r2, r3
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4013      	ands	r3, r2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008288:	e028      	b.n	80082dc <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008290:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	43db      	mvns	r3, r3
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4013      	ands	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	409a      	lsls	r2, r3
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	4013      	ands	r3, r2
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4013      	ands	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	409a      	lsls	r2, r3
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4013      	ands	r3, r2
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80082d2:	e003      	b.n	80082dc <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80082da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	372c      	adds	r7, #44	@ 0x2c
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e050      	b.n	8008448 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d114      	bne.n	80083da <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fdc5 	bl	8008f48 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d103      	bne.n	80083d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a21      	ldr	r2, [pc, #132]	@ (8008450 <HAL_UART_Init+0xbc>)
 80083cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2224      	movs	r2, #36	@ 0x24
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f8f2 	bl	80095e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fdf3 	bl	8008fec <UART_SetConfig>
 8008406:	4603      	mov	r3, r0
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e01b      	b.n	8008448 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800841e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800842e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f971 	bl	8009728 <UART_CheckIdleState>
 8008446:	4603      	mov	r3, r0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	080034b5 	.word	0x080034b5

08008454 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	460b      	mov	r3, r1
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d109      	bne.n	8008480 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e09c      	b.n	80085ba <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008486:	2b20      	cmp	r3, #32
 8008488:	d16c      	bne.n	8008564 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b0c      	cmp	r3, #12
 800848e:	d85e      	bhi.n	800854e <HAL_UART_RegisterCallback+0xfa>
 8008490:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <HAL_UART_RegisterCallback+0x44>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084cd 	.word	0x080084cd
 800849c:	080084d7 	.word	0x080084d7
 80084a0:	080084e1 	.word	0x080084e1
 80084a4:	080084eb 	.word	0x080084eb
 80084a8:	080084f5 	.word	0x080084f5
 80084ac:	080084ff 	.word	0x080084ff
 80084b0:	08008509 	.word	0x08008509
 80084b4:	08008513 	.word	0x08008513
 80084b8:	0800851d 	.word	0x0800851d
 80084bc:	08008527 	.word	0x08008527
 80084c0:	08008531 	.word	0x08008531
 80084c4:	0800853b 	.word	0x0800853b
 80084c8:	08008545 	.word	0x08008545
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80084d4:	e070      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80084de:	e06b      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80084e8:	e066      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80084f2:	e061      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80084fc:	e05c      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008506:	e057      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008510:	e052      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800851a:	e04d      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008524:	e048      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800852e:	e043      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008538:	e03e      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008542:	e039      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800854c:	e034      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008554:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	75fb      	strb	r3, [r7, #23]
        break;
 8008562:	e029      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	2b00      	cmp	r3, #0
 800856c:	d11a      	bne.n	80085a4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	2b0b      	cmp	r3, #11
 8008572:	d002      	beq.n	800857a <HAL_UART_RegisterCallback+0x126>
 8008574:	2b0c      	cmp	r3, #12
 8008576:	d005      	beq.n	8008584 <HAL_UART_RegisterCallback+0x130>
 8008578:	e009      	b.n	800858e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008582:	e019      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800858c:	e014      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
        break;
 80085a2:	e009      	b.n	80085b8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop

080085c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	@ 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d167      	bne.n	80086b0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_UART_Transmit_DMA+0x24>
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e060      	b.n	80086b2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	88fa      	ldrh	r2, [r7, #6]
 80085fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	88fa      	ldrh	r2, [r7, #6]
 8008602:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2221      	movs	r2, #33	@ 0x21
 8008612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d028      	beq.n	8008670 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008622:	4a26      	ldr	r2, [pc, #152]	@ (80086bc <HAL_UART_Transmit_DMA+0xf4>)
 8008624:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800862a:	4a25      	ldr	r2, [pc, #148]	@ (80086c0 <HAL_UART_Transmit_DMA+0xf8>)
 800862c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008632:	4a24      	ldr	r2, [pc, #144]	@ (80086c4 <HAL_UART_Transmit_DMA+0xfc>)
 8008634:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800863a:	2200      	movs	r2, #0
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008646:	4619      	mov	r1, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3328      	adds	r3, #40	@ 0x28
 800864e:	461a      	mov	r2, r3
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	f7fb fc5f 	bl	8003f14 <HAL_DMA_Start_IT>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2210      	movs	r2, #16
 8008660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e020      	b.n	80086b2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2240      	movs	r2, #64	@ 0x40
 8008676:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008698:	623a      	str	r2, [r7, #32]
 800869a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e5      	bne.n	8008678 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e000      	b.n	80086b2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80086b0:	2302      	movs	r3, #2
  }
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3728      	adds	r7, #40	@ 0x28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	08009bf3 	.word	0x08009bf3
 80086c0:	08009c91 	.word	0x08009c91
 80086c4:	08009e2b 	.word	0x08009e2b

080086c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	@ 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086dc:	2b20      	cmp	r3, #32
 80086de:	d137      	bne.n	8008750 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_UART_Receive_DMA+0x24>
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e030      	b.n	8008752 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <HAL_UART_Receive_DMA+0x94>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d01f      	beq.n	8008740 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d018      	beq.n	8008740 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	613b      	str	r3, [r7, #16]
   return(result);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	623b      	str	r3, [r7, #32]
 800872e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	61bb      	str	r3, [r7, #24]
   return(result);
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	461a      	mov	r2, r3
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 f906 	bl	8009958 <UART_Start_Receive_DMA>
 800874c:	4603      	mov	r3, r0
 800874e:	e000      	b.n	8008752 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3728      	adds	r7, #40	@ 0x28
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40008000 	.word	0x40008000

08008760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b0ba      	sub	sp, #232	@ 0xe8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800878a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800878e:	4013      	ands	r3, r2
 8008790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d11b      	bne.n	80087d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d015      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 82f3 	beq.w	8008db0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      }
      return;
 80087d2:	e2ed      	b.n	8008db0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8129 	beq.w	8008a30 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087e2:	4b90      	ldr	r3, [pc, #576]	@ (8008a24 <HAL_UART_IRQHandler+0x2c4>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087ee:	4b8e      	ldr	r3, [pc, #568]	@ (8008a28 <HAL_UART_IRQHandler+0x2c8>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 811c 	beq.w	8008a30 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d011      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2201      	movs	r2, #1
 8008816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
 8008834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2202      	movs	r2, #2
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2204      	movs	r2, #4
 8008876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887e:	f043 0202 	orr.w	r2, r3, #2
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b00      	cmp	r3, #0
 8008892:	d017      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088a4:	4b5f      	ldr	r3, [pc, #380]	@ (8008a24 <HAL_UART_IRQHandler+0x2c4>)
 80088a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ba:	f043 0208 	orr.w	r2, r3, #8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d012      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00c      	beq.n	80088f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8259 	beq.w	8008db4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d013      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894a:	2b40      	cmp	r3, #64	@ 0x40
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800894e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008952:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008956:	2b00      	cmp	r3, #0
 8008958:	d058      	beq.n	8008a0c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 f8e3 	bl	8009b26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	d148      	bne.n	8008a00 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800898c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800899a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800899e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1d9      	bne.n	800896e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d017      	beq.n	80089f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ca:	4a18      	ldr	r2, [pc, #96]	@ (8008a2c <HAL_UART_IRQHandler+0x2cc>)
 80089cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fb fb71 	bl	80040bc <HAL_DMA_Abort_IT>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01f      	beq.n	8008a20 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f2:	e015      	b.n	8008a20 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fe:	e00f      	b.n	8008a20 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0a:	e009      	b.n	8008a20 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a1e:	e1c9      	b.n	8008db4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a20:	bf00      	nop
    return;
 8008a22:	e1c7      	b.n	8008db4 <HAL_UART_IRQHandler+0x654>
 8008a24:	10000001 	.word	0x10000001
 8008a28:	04000120 	.word	0x04000120
 8008a2c:	08009eaf 	.word	0x08009eaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f040 8157 	bne.w	8008ce8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8150 	beq.w	8008ce8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8149 	beq.w	8008ce8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b40      	cmp	r3, #64	@ 0x40
 8008a6a:	f040 80bd 	bne.w	8008be8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8199 	beq.w	8008db8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a90:	429a      	cmp	r2, r3
 8008a92:	f080 8191 	bcs.w	8008db8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 8087 	bne.w	8008bc2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ae2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1da      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3308      	adds	r3, #8
 8008b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e1      	bne.n	8008afe <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3308      	adds	r3, #8
 8008b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e3      	bne.n	8008b3a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b90:	f023 0310 	bic.w	r3, r3, #16
 8008b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e4      	bne.n	8008b80 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fb fa24 	bl	800400a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008bda:	b292      	uxth	r2, r2
 8008bdc:	1a8a      	subs	r2, r1, r2
 8008bde:	b292      	uxth	r2, r2
 8008be0:	4611      	mov	r1, r2
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008be6:	e0e7      	b.n	8008db8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80d9 	beq.w	8008dbc <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80d4 	beq.w	8008dbc <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e4      	bne.n	8008c14 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	623b      	str	r3, [r7, #32]
   return(result);
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e1      	bne.n	8008c4a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0310 	bic.w	r3, r3, #16
 8008cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	69b9      	ldr	r1, [r7, #24]
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e4      	bne.n	8008c9a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008cdc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ce6:	e069      	b.n	8008dbc <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d010      	beq.n	8008d16 <HAL_UART_IRQHandler+0x5b6>
 8008cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d08:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d14:	e055      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d014      	beq.n	8008d4c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d03e      	beq.n	8008dc0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
    }
    return;
 8008d4a:	e039      	b.n	8008dc0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d009      	beq.n	8008d6c <HAL_UART_IRQHandler+0x60c>
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f8ba 	bl	8009ede <UART_EndTransmit_IT>
    return;
 8008d6a:	e02a      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <HAL_UART_IRQHandler+0x630>
 8008d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d8e:	e018      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d012      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x662>
 8008d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da0e      	bge.n	8008dc2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dae:	e008      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
      return;
 8008db0:	bf00      	nop
 8008db2:	e006      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
    return;
 8008db4:	bf00      	nop
 8008db6:	e004      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
      return;
 8008db8:	bf00      	nop
 8008dba:	e002      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
      return;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_UART_IRQHandler+0x662>
    return;
 8008dc0:	bf00      	nop
  }
}
 8008dc2:	37e8      	adds	r7, #232	@ 0xe8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a09      	ldr	r2, [pc, #36]	@ (8008eb4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d009      	beq.n	8008ea8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	615a      	str	r2, [r3, #20]
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	40008000 	.word	0x40008000

08008eb8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a18      	ldr	r2, [pc, #96]	@ (8008f28 <HAL_UART_EnableReceiverTimeout+0x70>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d027      	beq.n	8008f1a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d120      	bne.n	8008f16 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_UART_EnableReceiverTimeout+0x2a>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e01c      	b.n	8008f1c <HAL_UART_EnableReceiverTimeout+0x64>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2224      	movs	r2, #36	@ 0x24
 8008eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008f00:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e002      	b.n	8008f1c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008f16:	2302      	movs	r3, #2
 8008f18:	e000      	b.n	8008f1c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	40008000 	.word	0x40008000

08008f2c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1a      	ldr	r2, [pc, #104]	@ (8008fbc <UART_InitCallbacksToDefault+0x74>)
 8008f54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a19      	ldr	r2, [pc, #100]	@ (8008fc0 <UART_InitCallbacksToDefault+0x78>)
 8008f5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a18      	ldr	r2, [pc, #96]	@ (8008fc4 <UART_InitCallbacksToDefault+0x7c>)
 8008f64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a17      	ldr	r2, [pc, #92]	@ (8008fc8 <UART_InitCallbacksToDefault+0x80>)
 8008f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a16      	ldr	r2, [pc, #88]	@ (8008fcc <UART_InitCallbacksToDefault+0x84>)
 8008f74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a15      	ldr	r2, [pc, #84]	@ (8008fd0 <UART_InitCallbacksToDefault+0x88>)
 8008f7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a14      	ldr	r2, [pc, #80]	@ (8008fd4 <UART_InitCallbacksToDefault+0x8c>)
 8008f84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	@ (8008fd8 <UART_InitCallbacksToDefault+0x90>)
 8008f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a12      	ldr	r2, [pc, #72]	@ (8008fdc <UART_InitCallbacksToDefault+0x94>)
 8008f94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a11      	ldr	r2, [pc, #68]	@ (8008fe0 <UART_InitCallbacksToDefault+0x98>)
 8008f9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a10      	ldr	r2, [pc, #64]	@ (8008fe4 <UART_InitCallbacksToDefault+0x9c>)
 8008fa4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a0f      	ldr	r2, [pc, #60]	@ (8008fe8 <UART_InitCallbacksToDefault+0xa0>)
 8008fac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	08008ddd 	.word	0x08008ddd
 8008fc0:	08008dc9 	.word	0x08008dc9
 8008fc4:	08008e05 	.word	0x08008e05
 8008fc8:	08008df1 	.word	0x08008df1
 8008fcc:	08008e19 	.word	0x08008e19
 8008fd0:	08008e2d 	.word	0x08008e2d
 8008fd4:	08008e41 	.word	0x08008e41
 8008fd8:	08008e55 	.word	0x08008e55
 8008fdc:	08009f39 	.word	0x08009f39
 8008fe0:	08009f4d 	.word	0x08009f4d
 8008fe4:	08009f61 	.word	0x08009f61
 8008fe8:	08008e69 	.word	0x08008e69

08008fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff0:	b08c      	sub	sp, #48	@ 0x30
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	431a      	orrs	r2, r3
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	431a      	orrs	r2, r3
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	4313      	orrs	r3, r2
 8009012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4baa      	ldr	r3, [pc, #680]	@ (80092c4 <UART_SetConfig+0x2d8>)
 800901c:	4013      	ands	r3, r2
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	6812      	ldr	r2, [r2, #0]
 8009022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009024:	430b      	orrs	r3, r1
 8009026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a9f      	ldr	r2, [pc, #636]	@ (80092c8 <UART_SetConfig+0x2dc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d004      	beq.n	8009058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009054:	4313      	orrs	r3, r2
 8009056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009062:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	6812      	ldr	r2, [r2, #0]
 800906a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800906c:	430b      	orrs	r3, r1
 800906e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	f023 010f 	bic.w	r1, r3, #15
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a90      	ldr	r2, [pc, #576]	@ (80092cc <UART_SetConfig+0x2e0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d125      	bne.n	80090dc <UART_SetConfig+0xf0>
 8009090:	4b8f      	ldr	r3, [pc, #572]	@ (80092d0 <UART_SetConfig+0x2e4>)
 8009092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b03      	cmp	r3, #3
 800909c:	d81a      	bhi.n	80090d4 <UART_SetConfig+0xe8>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <UART_SetConfig+0xb8>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090b5 	.word	0x080090b5
 80090a8:	080090c5 	.word	0x080090c5
 80090ac:	080090bd 	.word	0x080090bd
 80090b0:	080090cd 	.word	0x080090cd
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ba:	e116      	b.n	80092ea <UART_SetConfig+0x2fe>
 80090bc:	2302      	movs	r3, #2
 80090be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c2:	e112      	b.n	80092ea <UART_SetConfig+0x2fe>
 80090c4:	2304      	movs	r3, #4
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ca:	e10e      	b.n	80092ea <UART_SetConfig+0x2fe>
 80090cc:	2308      	movs	r3, #8
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e10a      	b.n	80092ea <UART_SetConfig+0x2fe>
 80090d4:	2310      	movs	r3, #16
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e106      	b.n	80092ea <UART_SetConfig+0x2fe>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a7c      	ldr	r2, [pc, #496]	@ (80092d4 <UART_SetConfig+0x2e8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d138      	bne.n	8009158 <UART_SetConfig+0x16c>
 80090e6:	4b7a      	ldr	r3, [pc, #488]	@ (80092d0 <UART_SetConfig+0x2e4>)
 80090e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ec:	f003 030c 	and.w	r3, r3, #12
 80090f0:	2b0c      	cmp	r3, #12
 80090f2:	d82d      	bhi.n	8009150 <UART_SetConfig+0x164>
 80090f4:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <UART_SetConfig+0x110>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009131 	.word	0x08009131
 8009100:	08009151 	.word	0x08009151
 8009104:	08009151 	.word	0x08009151
 8009108:	08009151 	.word	0x08009151
 800910c:	08009141 	.word	0x08009141
 8009110:	08009151 	.word	0x08009151
 8009114:	08009151 	.word	0x08009151
 8009118:	08009151 	.word	0x08009151
 800911c:	08009139 	.word	0x08009139
 8009120:	08009151 	.word	0x08009151
 8009124:	08009151 	.word	0x08009151
 8009128:	08009151 	.word	0x08009151
 800912c:	08009149 	.word	0x08009149
 8009130:	2300      	movs	r3, #0
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009136:	e0d8      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913e:	e0d4      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009140:	2304      	movs	r3, #4
 8009142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009146:	e0d0      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009148:	2308      	movs	r3, #8
 800914a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914e:	e0cc      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009150:	2310      	movs	r3, #16
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009156:	e0c8      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a5e      	ldr	r2, [pc, #376]	@ (80092d8 <UART_SetConfig+0x2ec>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d125      	bne.n	80091ae <UART_SetConfig+0x1c2>
 8009162:	4b5b      	ldr	r3, [pc, #364]	@ (80092d0 <UART_SetConfig+0x2e4>)
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009168:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800916c:	2b30      	cmp	r3, #48	@ 0x30
 800916e:	d016      	beq.n	800919e <UART_SetConfig+0x1b2>
 8009170:	2b30      	cmp	r3, #48	@ 0x30
 8009172:	d818      	bhi.n	80091a6 <UART_SetConfig+0x1ba>
 8009174:	2b20      	cmp	r3, #32
 8009176:	d00a      	beq.n	800918e <UART_SetConfig+0x1a2>
 8009178:	2b20      	cmp	r3, #32
 800917a:	d814      	bhi.n	80091a6 <UART_SetConfig+0x1ba>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <UART_SetConfig+0x19a>
 8009180:	2b10      	cmp	r3, #16
 8009182:	d008      	beq.n	8009196 <UART_SetConfig+0x1aa>
 8009184:	e00f      	b.n	80091a6 <UART_SetConfig+0x1ba>
 8009186:	2300      	movs	r3, #0
 8009188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800918c:	e0ad      	b.n	80092ea <UART_SetConfig+0x2fe>
 800918e:	2302      	movs	r3, #2
 8009190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009194:	e0a9      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009196:	2304      	movs	r3, #4
 8009198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800919c:	e0a5      	b.n	80092ea <UART_SetConfig+0x2fe>
 800919e:	2308      	movs	r3, #8
 80091a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091a4:	e0a1      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091a6:	2310      	movs	r3, #16
 80091a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ac:	e09d      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a4a      	ldr	r2, [pc, #296]	@ (80092dc <UART_SetConfig+0x2f0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d125      	bne.n	8009204 <UART_SetConfig+0x218>
 80091b8:	4b45      	ldr	r3, [pc, #276]	@ (80092d0 <UART_SetConfig+0x2e4>)
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c4:	d016      	beq.n	80091f4 <UART_SetConfig+0x208>
 80091c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80091c8:	d818      	bhi.n	80091fc <UART_SetConfig+0x210>
 80091ca:	2b80      	cmp	r3, #128	@ 0x80
 80091cc:	d00a      	beq.n	80091e4 <UART_SetConfig+0x1f8>
 80091ce:	2b80      	cmp	r3, #128	@ 0x80
 80091d0:	d814      	bhi.n	80091fc <UART_SetConfig+0x210>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <UART_SetConfig+0x1f0>
 80091d6:	2b40      	cmp	r3, #64	@ 0x40
 80091d8:	d008      	beq.n	80091ec <UART_SetConfig+0x200>
 80091da:	e00f      	b.n	80091fc <UART_SetConfig+0x210>
 80091dc:	2300      	movs	r3, #0
 80091de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091e2:	e082      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091e4:	2302      	movs	r3, #2
 80091e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ea:	e07e      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091f2:	e07a      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091fa:	e076      	b.n	80092ea <UART_SetConfig+0x2fe>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009202:	e072      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a35      	ldr	r2, [pc, #212]	@ (80092e0 <UART_SetConfig+0x2f4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d12a      	bne.n	8009264 <UART_SetConfig+0x278>
 800920e:	4b30      	ldr	r3, [pc, #192]	@ (80092d0 <UART_SetConfig+0x2e4>)
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800921c:	d01a      	beq.n	8009254 <UART_SetConfig+0x268>
 800921e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009222:	d81b      	bhi.n	800925c <UART_SetConfig+0x270>
 8009224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009228:	d00c      	beq.n	8009244 <UART_SetConfig+0x258>
 800922a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800922e:	d815      	bhi.n	800925c <UART_SetConfig+0x270>
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <UART_SetConfig+0x250>
 8009234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009238:	d008      	beq.n	800924c <UART_SetConfig+0x260>
 800923a:	e00f      	b.n	800925c <UART_SetConfig+0x270>
 800923c:	2300      	movs	r3, #0
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009242:	e052      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009244:	2302      	movs	r3, #2
 8009246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800924a:	e04e      	b.n	80092ea <UART_SetConfig+0x2fe>
 800924c:	2304      	movs	r3, #4
 800924e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009252:	e04a      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009254:	2308      	movs	r3, #8
 8009256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800925a:	e046      	b.n	80092ea <UART_SetConfig+0x2fe>
 800925c:	2310      	movs	r3, #16
 800925e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009262:	e042      	b.n	80092ea <UART_SetConfig+0x2fe>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a17      	ldr	r2, [pc, #92]	@ (80092c8 <UART_SetConfig+0x2dc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d13a      	bne.n	80092e4 <UART_SetConfig+0x2f8>
 800926e:	4b18      	ldr	r3, [pc, #96]	@ (80092d0 <UART_SetConfig+0x2e4>)
 8009270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009274:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800927c:	d01a      	beq.n	80092b4 <UART_SetConfig+0x2c8>
 800927e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009282:	d81b      	bhi.n	80092bc <UART_SetConfig+0x2d0>
 8009284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009288:	d00c      	beq.n	80092a4 <UART_SetConfig+0x2b8>
 800928a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800928e:	d815      	bhi.n	80092bc <UART_SetConfig+0x2d0>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <UART_SetConfig+0x2b0>
 8009294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009298:	d008      	beq.n	80092ac <UART_SetConfig+0x2c0>
 800929a:	e00f      	b.n	80092bc <UART_SetConfig+0x2d0>
 800929c:	2300      	movs	r3, #0
 800929e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092a2:	e022      	b.n	80092ea <UART_SetConfig+0x2fe>
 80092a4:	2302      	movs	r3, #2
 80092a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092aa:	e01e      	b.n	80092ea <UART_SetConfig+0x2fe>
 80092ac:	2304      	movs	r3, #4
 80092ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092b2:	e01a      	b.n	80092ea <UART_SetConfig+0x2fe>
 80092b4:	2308      	movs	r3, #8
 80092b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ba:	e016      	b.n	80092ea <UART_SetConfig+0x2fe>
 80092bc:	2310      	movs	r3, #16
 80092be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092c2:	e012      	b.n	80092ea <UART_SetConfig+0x2fe>
 80092c4:	cfff69f3 	.word	0xcfff69f3
 80092c8:	40008000 	.word	0x40008000
 80092cc:	40013800 	.word	0x40013800
 80092d0:	40021000 	.word	0x40021000
 80092d4:	40004400 	.word	0x40004400
 80092d8:	40004800 	.word	0x40004800
 80092dc:	40004c00 	.word	0x40004c00
 80092e0:	40005000 	.word	0x40005000
 80092e4:	2310      	movs	r3, #16
 80092e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4aae      	ldr	r2, [pc, #696]	@ (80095a8 <UART_SetConfig+0x5bc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	f040 8097 	bne.w	8009424 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d823      	bhi.n	8009346 <UART_SetConfig+0x35a>
 80092fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009304 <UART_SetConfig+0x318>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009329 	.word	0x08009329
 8009308:	08009347 	.word	0x08009347
 800930c:	08009331 	.word	0x08009331
 8009310:	08009347 	.word	0x08009347
 8009314:	08009337 	.word	0x08009337
 8009318:	08009347 	.word	0x08009347
 800931c:	08009347 	.word	0x08009347
 8009320:	08009347 	.word	0x08009347
 8009324:	0800933f 	.word	0x0800933f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fb ffa0 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 800932c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800932e:	e010      	b.n	8009352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009330:	4b9e      	ldr	r3, [pc, #632]	@ (80095ac <UART_SetConfig+0x5c0>)
 8009332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009334:	e00d      	b.n	8009352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009336:	f7fb ff2b 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800933a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800933c:	e009      	b.n	8009352 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800933e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009344:	e005      	b.n	8009352 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8130 	beq.w	80095ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935e:	4a94      	ldr	r2, [pc, #592]	@ (80095b0 <UART_SetConfig+0x5c4>)
 8009360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009364:	461a      	mov	r2, r3
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	fbb3 f3f2 	udiv	r3, r3, r2
 800936c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	429a      	cmp	r2, r3
 800937c:	d305      	bcc.n	800938a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	429a      	cmp	r2, r3
 8009388:	d903      	bls.n	8009392 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009390:	e113      	b.n	80095ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	2200      	movs	r2, #0
 8009396:	60bb      	str	r3, [r7, #8]
 8009398:	60fa      	str	r2, [r7, #12]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939e:	4a84      	ldr	r2, [pc, #528]	@ (80095b0 <UART_SetConfig+0x5c4>)
 80093a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2200      	movs	r2, #0
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093b4:	f7f7 fc84 	bl	8000cc0 <__aeabi_uldivmod>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4610      	mov	r0, r2
 80093be:	4619      	mov	r1, r3
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	020b      	lsls	r3, r1, #8
 80093ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093ce:	0202      	lsls	r2, r0, #8
 80093d0:	6979      	ldr	r1, [r7, #20]
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	0849      	lsrs	r1, r1, #1
 80093d6:	2000      	movs	r0, #0
 80093d8:	460c      	mov	r4, r1
 80093da:	4605      	mov	r5, r0
 80093dc:	eb12 0804 	adds.w	r8, r2, r4
 80093e0:	eb43 0905 	adc.w	r9, r3, r5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	469a      	mov	sl, r3
 80093ec:	4693      	mov	fp, r2
 80093ee:	4652      	mov	r2, sl
 80093f0:	465b      	mov	r3, fp
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f7 fc63 	bl	8000cc0 <__aeabi_uldivmod>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4613      	mov	r3, r2
 8009400:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009408:	d308      	bcc.n	800941c <UART_SetConfig+0x430>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009410:	d204      	bcs.n	800941c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a3a      	ldr	r2, [r7, #32]
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	e0ce      	b.n	80095ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009422:	e0ca      	b.n	80095ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942c:	d166      	bne.n	80094fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800942e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009432:	2b08      	cmp	r3, #8
 8009434:	d827      	bhi.n	8009486 <UART_SetConfig+0x49a>
 8009436:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <UART_SetConfig+0x450>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009461 	.word	0x08009461
 8009440:	08009469 	.word	0x08009469
 8009444:	08009471 	.word	0x08009471
 8009448:	08009487 	.word	0x08009487
 800944c:	08009477 	.word	0x08009477
 8009450:	08009487 	.word	0x08009487
 8009454:	08009487 	.word	0x08009487
 8009458:	08009487 	.word	0x08009487
 800945c:	0800947f 	.word	0x0800947f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009460:	f7fb ff04 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8009464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009466:	e014      	b.n	8009492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009468:	f7fb ff16 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 800946c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800946e:	e010      	b.n	8009492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009470:	4b4e      	ldr	r3, [pc, #312]	@ (80095ac <UART_SetConfig+0x5c0>)
 8009472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009474:	e00d      	b.n	8009492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009476:	f7fb fe8b 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800947a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800947c:	e009      	b.n	8009492 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009484:	e005      	b.n	8009492 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8090 	beq.w	80095ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	4a44      	ldr	r2, [pc, #272]	@ (80095b0 <UART_SetConfig+0x5c4>)
 80094a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a4:	461a      	mov	r2, r3
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ac:	005a      	lsls	r2, r3, #1
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	441a      	add	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80094be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	2b0f      	cmp	r3, #15
 80094c4:	d916      	bls.n	80094f4 <UART_SetConfig+0x508>
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094cc:	d212      	bcs.n	80094f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	f023 030f 	bic.w	r3, r3, #15
 80094d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	8bfb      	ldrh	r3, [r7, #30]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	8bfa      	ldrh	r2, [r7, #30]
 80094f0:	60da      	str	r2, [r3, #12]
 80094f2:	e062      	b.n	80095ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80094fa:	e05e      	b.n	80095ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009500:	2b08      	cmp	r3, #8
 8009502:	d828      	bhi.n	8009556 <UART_SetConfig+0x56a>
 8009504:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <UART_SetConfig+0x520>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	08009531 	.word	0x08009531
 8009510:	08009539 	.word	0x08009539
 8009514:	08009541 	.word	0x08009541
 8009518:	08009557 	.word	0x08009557
 800951c:	08009547 	.word	0x08009547
 8009520:	08009557 	.word	0x08009557
 8009524:	08009557 	.word	0x08009557
 8009528:	08009557 	.word	0x08009557
 800952c:	0800954f 	.word	0x0800954f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009530:	f7fb fe9c 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8009534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009536:	e014      	b.n	8009562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009538:	f7fb feae 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 800953c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800953e:	e010      	b.n	8009562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009540:	4b1a      	ldr	r3, [pc, #104]	@ (80095ac <UART_SetConfig+0x5c0>)
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009544:	e00d      	b.n	8009562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009546:	f7fb fe23 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800954a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800954c:	e009      	b.n	8009562 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009554:	e005      	b.n	8009562 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009560:	bf00      	nop
    }

    if (pclk != 0U)
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	d028      	beq.n	80095ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	4a10      	ldr	r2, [pc, #64]	@ (80095b0 <UART_SetConfig+0x5c4>)
 800956e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009572:	461a      	mov	r2, r3
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	fbb3 f2f2 	udiv	r2, r3, r2
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	441a      	add	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	fbb2 f3f3 	udiv	r3, r2, r3
 800958a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d910      	bls.n	80095b4 <UART_SetConfig+0x5c8>
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009598:	d20c      	bcs.n	80095b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	b29a      	uxth	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60da      	str	r2, [r3, #12]
 80095a4:	e009      	b.n	80095ba <UART_SetConfig+0x5ce>
 80095a6:	bf00      	nop
 80095a8:	40008000 	.word	0x40008000
 80095ac:	00f42400 	.word	0x00f42400
 80095b0:	0800a2ac 	.word	0x0800a2ac
      }
      else
      {
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2201      	movs	r2, #1
 80095be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2200      	movs	r2, #0
 80095ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2200      	movs	r2, #0
 80095d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3730      	adds	r7, #48	@ 0x30
 80095de:	46bd      	mov	sp, r7
 80095e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080095e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00a      	beq.n	800960e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00a      	beq.n	8009630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d01a      	beq.n	80096fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096e2:	d10a      	bne.n	80096fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	605a      	str	r2, [r3, #4]
  }
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b098      	sub	sp, #96	@ 0x60
 800972c:	af02      	add	r7, sp, #8
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009738:	f7fa fa06 	bl	8003b48 <HAL_GetTick>
 800973c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b08      	cmp	r3, #8
 800974a:	d12f      	bne.n	80097ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800974c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009754:	2200      	movs	r2, #0
 8009756:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f88e 	bl	800987c <UART_WaitOnFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d022      	beq.n	80097ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800977a:	653b      	str	r3, [r7, #80]	@ 0x50
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	461a      	mov	r2, r3
 8009782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009784:	647b      	str	r3, [r7, #68]	@ 0x44
 8009786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800978a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e6      	bne.n	8009766 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e063      	b.n	8009874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d149      	bne.n	800984e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c2:	2200      	movs	r2, #0
 80097c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f857 	bl	800987c <UART_WaitOnFlagUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d03c      	beq.n	800984e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	623b      	str	r3, [r7, #32]
   return(result);
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097fa:	e841 2300 	strex	r3, r2, [r1]
 80097fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e6      	bne.n	80097d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	60fb      	str	r3, [r7, #12]
   return(result);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f023 0301 	bic.w	r3, r3, #1
 800981c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3308      	adds	r3, #8
 8009824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009826:	61fa      	str	r2, [r7, #28]
 8009828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	69b9      	ldr	r1, [r7, #24]
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	617b      	str	r3, [r7, #20]
   return(result);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e5      	bne.n	8009806 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e012      	b.n	8009874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3758      	adds	r7, #88	@ 0x58
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800988c:	e04f      	b.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009894:	d04b      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009896:	f7fa f957 	bl	8003b48 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d302      	bcc.n	80098ac <UART_WaitOnFlagUntilTimeout+0x30>
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e04e      	b.n	800994e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d037      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b80      	cmp	r3, #128	@ 0x80
 80098c2:	d034      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b40      	cmp	r3, #64	@ 0x40
 80098c8:	d031      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	f003 0308 	and.w	r3, r3, #8
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d110      	bne.n	80098fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2208      	movs	r2, #8
 80098de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f920 	bl	8009b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2208      	movs	r2, #8
 80098ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e029      	b.n	800994e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009908:	d111      	bne.n	800992e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f906 	bl	8009b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e00f      	b.n	800994e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4013      	ands	r3, r2
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	429a      	cmp	r2, r3
 800993c:	bf0c      	ite	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	2300      	movne	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	429a      	cmp	r2, r3
 800994a:	d0a0      	beq.n	800988e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b096      	sub	sp, #88	@ 0x58
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	88fa      	ldrh	r2, [r7, #6]
 8009970:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2222      	movs	r2, #34	@ 0x22
 8009980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800998a:	2b00      	cmp	r3, #0
 800998c:	d02d      	beq.n	80099ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009994:	4a40      	ldr	r2, [pc, #256]	@ (8009a98 <UART_Start_Receive_DMA+0x140>)
 8009996:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999e:	4a3f      	ldr	r2, [pc, #252]	@ (8009a9c <UART_Start_Receive_DMA+0x144>)
 80099a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a8:	4a3d      	ldr	r2, [pc, #244]	@ (8009aa0 <UART_Start_Receive_DMA+0x148>)
 80099aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099b2:	2200      	movs	r2, #0
 80099b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3324      	adds	r3, #36	@ 0x24
 80099c2:	4619      	mov	r1, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c8:	461a      	mov	r2, r3
 80099ca:	88fb      	ldrh	r3, [r7, #6]
 80099cc:	f7fa faa2 	bl	8003f14 <HAL_DMA_Start_IT>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d009      	beq.n	80099ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2210      	movs	r2, #16
 80099da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e051      	b.n	8009a8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d018      	beq.n	8009a24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3308      	adds	r3, #8
 8009a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	f043 0301 	orr.w	r3, r3, #1
 8009a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a44:	637a      	str	r2, [r7, #52]	@ 0x34
 8009a46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e5      	bne.n	8009a24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	613b      	str	r3, [r7, #16]
   return(result);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a78:	623a      	str	r2, [r7, #32]
 8009a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	69f9      	ldr	r1, [r7, #28]
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e5      	bne.n	8009a58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3758      	adds	r7, #88	@ 0x58
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	08009cb1 	.word	0x08009cb1
 8009a9c:	08009de5 	.word	0x08009de5
 8009aa0:	08009e2b 	.word	0x08009e2b

08009aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b08f      	sub	sp, #60	@ 0x3c
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009acc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e6      	bne.n	8009aac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3308      	adds	r3, #8
 8009afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009afe:	61ba      	str	r2, [r7, #24]
 8009b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e5      	bne.n	8009ade <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b1a:	bf00      	nop
 8009b1c:	373c      	adds	r7, #60	@ 0x3c
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b095      	sub	sp, #84	@ 0x54
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e6      	bne.n	8009b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e3      	bne.n	8009b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d118      	bne.n	8009bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f023 0310 	bic.w	r3, r3, #16
 8009bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e6      	bne.n	8009ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009be6:	bf00      	nop
 8009be8:	3754      	adds	r7, #84	@ 0x54
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b090      	sub	sp, #64	@ 0x40
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d137      	bne.n	8009c7e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	623b      	str	r3, [r7, #32]
   return(result);
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3308      	adds	r3, #8
 8009c34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	69b9      	ldr	r1, [r7, #24]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	617b      	str	r3, [r7, #20]
   return(result);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e6      	bne.n	8009c4a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c7c:	e004      	b.n	8009c88 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009c86:	4798      	blx	r3
}
 8009c88:	bf00      	nop
 8009c8a:	3740      	adds	r7, #64	@ 0x40
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ca8:	bf00      	nop
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b09c      	sub	sp, #112	@ 0x70
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d171      	bne.n	8009db0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e6      	bne.n	8009cd4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	623b      	str	r3, [r7, #32]
   return(result);
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3308      	adds	r3, #8
 8009d58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e5      	bne.n	8009d3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d70:	2220      	movs	r2, #32
 8009d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d118      	bne.n	8009db0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	e853 3f00 	ldrex	r3, [r3]
 8009d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0310 	bic.w	r3, r3, #16
 8009d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d9c:	61fb      	str	r3, [r7, #28]
 8009d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	69b9      	ldr	r1, [r7, #24]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	617b      	str	r3, [r7, #20]
   return(result);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e6      	bne.n	8009d7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db2:	2200      	movs	r2, #0
 8009db4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d109      	bne.n	8009dd2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009dc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009dc6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009dca:	4611      	mov	r1, r2
 8009dcc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009dce:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dd0:	e004      	b.n	8009ddc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009dd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009dda:	4798      	blx	r3
}
 8009ddc:	bf00      	nop
 8009dde:	3770      	adds	r7, #112	@ 0x70
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10b      	bne.n	8009e18 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009e0c:	0852      	lsrs	r2, r2, #1
 8009e0e:	b292      	uxth	r2, r2
 8009e10:	4611      	mov	r1, r2
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e16:	e004      	b.n	8009e22 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	4798      	blx	r3
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e52:	2b80      	cmp	r3, #128	@ 0x80
 8009e54:	d109      	bne.n	8009e6a <UART_DMAError+0x40>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b21      	cmp	r3, #33	@ 0x21
 8009e5a:	d106      	bne.n	8009e6a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e64:	6978      	ldr	r0, [r7, #20]
 8009e66:	f7ff fe1d 	bl	8009aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e74:	2b40      	cmp	r3, #64	@ 0x40
 8009e76:	d109      	bne.n	8009e8c <UART_DMAError+0x62>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b22      	cmp	r3, #34	@ 0x22
 8009e7c:	d106      	bne.n	8009e8c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009e86:	6978      	ldr	r0, [r7, #20]
 8009e88:	f7ff fe4d 	bl	8009b26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e92:	f043 0210 	orr.w	r2, r3, #16
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ea2:	6978      	ldr	r0, [r7, #20]
 8009ea4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea6:	bf00      	nop
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b088      	sub	sp, #32
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	61bb      	str	r3, [r7, #24]
 8009f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6979      	ldr	r1, [r7, #20]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	613b      	str	r3, [r7, #16]
   return(result);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e6      	bne.n	8009ee6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f30:	bf00      	nop
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_UARTEx_DisableFifoMode+0x16>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e027      	b.n	8009fda <HAL_UARTEx_DisableFifoMode+0x66>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2224      	movs	r2, #36	@ 0x24
 8009f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e02d      	b.n	800a05a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	@ 0x24
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f850 	bl	800a0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a076:	2302      	movs	r3, #2
 800a078:	e02d      	b.n	800a0d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2224      	movs	r2, #36	@ 0x24
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0201 	bic.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f812 	bl	800a0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d108      	bne.n	800a102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a100:	e031      	b.n	800a166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a102:	2308      	movs	r3, #8
 800a104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a106:	2308      	movs	r3, #8
 800a108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	0e5b      	lsrs	r3, r3, #25
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	0f5b      	lsrs	r3, r3, #29
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	7b3a      	ldrb	r2, [r7, #12]
 800a12e:	4911      	ldr	r1, [pc, #68]	@ (800a174 <UARTEx_SetNbDataToProcess+0x94>)
 800a130:	5c8a      	ldrb	r2, [r1, r2]
 800a132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a136:	7b3a      	ldrb	r2, [r7, #12]
 800a138:	490f      	ldr	r1, [pc, #60]	@ (800a178 <UARTEx_SetNbDataToProcess+0x98>)
 800a13a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	7b7a      	ldrb	r2, [r7, #13]
 800a14c:	4909      	ldr	r1, [pc, #36]	@ (800a174 <UARTEx_SetNbDataToProcess+0x94>)
 800a14e:	5c8a      	ldrb	r2, [r1, r2]
 800a150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a154:	7b7a      	ldrb	r2, [r7, #13]
 800a156:	4908      	ldr	r1, [pc, #32]	@ (800a178 <UARTEx_SetNbDataToProcess+0x98>)
 800a158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a15a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	0800a2c4 	.word	0x0800a2c4
 800a178:	0800a2cc 	.word	0x0800a2cc

0800a17c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	ed93 7a06 	vldr	s14, [r3, #24]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	edd3 7a07 	vldr	s15, [r3, #28]
 800a192:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	edd3 7a08 	vldr	s15, [r3, #32]
 800a19c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	edd3 7a06 	vldr	s15, [r3, #24]
 800a1ac:	eeb1 7a67 	vneg.f32	s14, s15
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	edd3 7a08 	vldr	s15, [r3, #32]
 800a1b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	220c      	movs	r2, #12
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 f804 	bl	800a1e8 <memset>
  }

}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <memset>:
 800a1e8:	4402      	add	r2, r0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d100      	bne.n	800a1f2 <memset+0xa>
 800a1f0:	4770      	bx	lr
 800a1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f6:	e7f9      	b.n	800a1ec <memset+0x4>

0800a1f8 <__libc_init_array>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a230 <__libc_init_array+0x38>)
 800a1fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a234 <__libc_init_array+0x3c>)
 800a1fe:	1b64      	subs	r4, r4, r5
 800a200:	10a4      	asrs	r4, r4, #2
 800a202:	2600      	movs	r6, #0
 800a204:	42a6      	cmp	r6, r4
 800a206:	d109      	bne.n	800a21c <__libc_init_array+0x24>
 800a208:	4d0b      	ldr	r5, [pc, #44]	@ (800a238 <__libc_init_array+0x40>)
 800a20a:	4c0c      	ldr	r4, [pc, #48]	@ (800a23c <__libc_init_array+0x44>)
 800a20c:	f000 f826 	bl	800a25c <_init>
 800a210:	1b64      	subs	r4, r4, r5
 800a212:	10a4      	asrs	r4, r4, #2
 800a214:	2600      	movs	r6, #0
 800a216:	42a6      	cmp	r6, r4
 800a218:	d105      	bne.n	800a226 <__libc_init_array+0x2e>
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a220:	4798      	blx	r3
 800a222:	3601      	adds	r6, #1
 800a224:	e7ee      	b.n	800a204 <__libc_init_array+0xc>
 800a226:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22a:	4798      	blx	r3
 800a22c:	3601      	adds	r6, #1
 800a22e:	e7f2      	b.n	800a216 <__libc_init_array+0x1e>
 800a230:	0800a2dc 	.word	0x0800a2dc
 800a234:	0800a2dc 	.word	0x0800a2dc
 800a238:	0800a2dc 	.word	0x0800a2dc
 800a23c:	0800a2e0 	.word	0x0800a2e0

0800a240 <memcpy>:
 800a240:	440a      	add	r2, r1
 800a242:	4291      	cmp	r1, r2
 800a244:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a248:	d100      	bne.n	800a24c <memcpy+0xc>
 800a24a:	4770      	bx	lr
 800a24c:	b510      	push	{r4, lr}
 800a24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a252:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a256:	4291      	cmp	r1, r2
 800a258:	d1f9      	bne.n	800a24e <memcpy+0xe>
 800a25a:	bd10      	pop	{r4, pc}

0800a25c <_init>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr

0800a268 <_fini>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr
